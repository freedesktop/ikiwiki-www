= OpenICC project =

OpenICC has two main goals. The first goal is to work out a common set of settings for color savvy applications to share profiles and settings. The second goal is to bring together those developers in areas like printing, display and desktop applications to work together to make color management end to end work for open source applications.

A draft specification is planned at a later stage.

<<TableOfContents(3)>>

= Getting involved =

If you are planning to add color management to your software project or you are hardware manufacturer who wishes to extend his clients base by dipping your toes into opensource water, we encourage you to join our mailing list. Subscription page is [[http://lists.freedesktop.org/mailman/listinfo/openicc|just round the corner]].
 * Email: [[http://lists.freedesktop.org/mailman/listinfo/openicc|OpenICC email list at freedesktop.org]]
 * IRC: the channel is called [[irc://irc.freenode.net/openicc|#openicc @ irc.freenode.net]]

= Who's taking part =

Currently, OpenICC is an informal group of developers exchanging ideas and concepts on integrating ICC color management. Here is a mostly complete list of project developers involved in this discussion:

 *[[http://www.argyllcms.com|ArgyllCMS]], an experimental, open source, ICC compatible color management system.
 *[[http://cinepaint.sourceforge.net|CinePaint]], a 16-bit photo retouching application, best suited for video.
 *[[http://cups.org|CUPS]] printing software.
 *[[http://www.graphicsmagick.org/|GraphicsMagick]], is the swiss army knife of image processing.
 *[[http://www.gimp.org|GIMP]], popular pixel manipulation application
 *[[http://gutenprint.org|Gutenprint]], a set of very high quality drivers for printers, with particular emphasis on inkjets.
 *[[http://www.imagemagick.net|ImageMagick]],  image editing collection.
 *[[http://www.inkscape.org|Inkscape]], a vector graphics editor.
 *[[http://www.koffice.org/krita|Krita]], and [[http://www.koffice.org/karbon|Karbon]], the raster and vector image manipulation applications of the KOffice suite.
 *[[http://www.itcreate.net/|IPhone app developers]]
 *[[http://www.littlecms.com|LittleCMS]], a widely used open source color management system.
 *[[http://lprof.sourceforge.net|LPROF]], an open source profiler that uses LCMS.
 *[[http://www.scribus.net|Scribus]], an open source page layout application.
 *[[http://www.oyranos.org|Oyranos]], a colour management system intended for configuration, user interfaces and profile distribution.

= Profiles for standard print condition and their licences =
For the creation and exchange of images, vector graphics and documents (e.g. PDF) ist makes sense, when applications can use a standard set of ICC-profiles which are preinstalled in an known directoty like eg. share/color/profile on every computer. Currently, different organisations, projects and vendors are offering such standard profile packages with different licenses. Not all licenses are compatible to integrate these profile packages into LINUX distributions. 
Furthermore in the graphic arts, there are so called "reference printing conditions" which represent color measurement-data (also called characterization-data) representing a printing standard. Such characterization-data are a basis for calculating ICC-profiles representing a printing standard. 
Several packages for standard ICC profiles are containing CMYK-profiles with different names and calculated with different profiling packages but representing the same reference printing condition.
The International Color Consortium ICC hosts a [[http://www.color.org/registry2.xalter|registry]] for worldwide used reference printing conditions.

Available Profile Packages

free license

[[http://www.colormanagement.org/download_files/basICColor_Offset_2009.zip|Colormanagment.org Offset profiles 2009]] 
Karl Koch, owner of the Company [[http://www.basiccolor.de|Basiccolor]] hosts at [[http://www.colormanagement.org|colormanagement.org]] packages of ICC profiles and test images under a creatice commons licence. The offset 2009 package is based on the same FOGRA characterization-data like the ECI profiles, but they are calculated with a profiling package from Basiccolor. basICColor [[http://lists.freedesktop.org/archives/openicc/2010q3/002218.html|released]] its www.colormanagement.org profiles under a free license.

 *ISOcoated_v2_bas.ICC
 *ISOcoated_v2_300_bas.ICC
 *ISOnewspaper_v4_26_bas.ICC
 *ISOuncoatedyellowish_bas.ICC
 *PSO_Coated_300_NPscreen_ISO12647_bas.ICC
 *PSO_Coated_NPscreen_ISO12647_bas.ICC
 *PSO_LWC_Improved_bas.ICC
 *PSO_LWC_Standard_bas.ICC
 *PSO_MFC_Paper_bas.ICC
 *PSO_SNP_Paper_bas.ICC
 *PSO_Uncoated_ISO12647_bas.ICC
 *PSO_Uncoated_NPscreen_ISO12647_bas.ICC
 *SC_paper_bas.ICC
 *ISOcoated_v2_grey1c_bas.ICC
(17/07/2009) 

[[http://sourceforge.net/projects/openicc/files/OpenICC-Profiles/|OpenICC profile collection 1.0]]

 *sRGB
 *LStar-RGB.icc
 *compatibleWithAdobeRGB1998.icc
 *PhotoGamutRGB_avg6c.icc

 *XYZ.icc
 *Lab.icc

 *coated_FOGRA39L_argl.icc
 *GRACoL_coated_TR006_argl.icc
 *SC_paper_FOGRA40L_argl.icc
 *SNAP_newsprint_TR002_argl.icc
 *SWOP_coated_3_TR003_argl.icc
 *SWOP_coated_5_TR005_argl.icc
 *uncoated_FOGRA29L_argl.icc
 *uncoatedyellowish_FOGRA30L_argl.icc
 *webcoated_FOGRA28L_argl.icc

 *Gray.icc
 *Gray-CIE_L.icc
 *ITULab.icc
(21/09/2010 Version 1.0)

non free license 

[[http://www.adobe.com/support/downloads/detail.jsp?ftpID=3682|Adobe Profiles for Bundlers]] containing following profiles:

3 RGB profiles

 *Adobe RGB (1998)
 *Apple RGB
 *ColorMatch RGB

12 CMYK profiles

 *US Web Coated (SWOP) v2
 *US Web Uncoated v2
 *US Sheetfed Coated v2
 *US Sheetfed Uncoated v2
 *Coated FOGRA27 (ISO 12647-2:2004)
 *Web Coated FOGRA28 (ISO 12647-2:2004)
 *Uncoated FOGRA29 (ISO 12647-2:2004)
 *Coated FOGRA39 (ISO 12647-2:2004)
 *Japan Web Coated (Ad)
 *Japan Color 2001 Coated
 *Japan Color 2001 Uncoated
 *Japan Color 2002 Newspaper 

[[http://www.eci.org/lib/exe/fetch.php?id=en%3Adownloads&cache=cache&media=downloads:icc_profiles_from_eci:eci_offset_2009.zip|ECI Offset-profiles 2009]] 
The ECI is a european hub for colormanagement workflows for the graphic arts. The published profiles are based on characterization-data from [[http://www.fogra.org|FOGRA]]. The profiles are calculated with profiling tools from the company [[http://www.heidelberg.com|Heidelberg]]. ECI allows to bundle the profiles into installers, but this needs and individual permission from ECI. ECI uses a non free license.
 The ECI Offset 2009 package contains.

 *ISO Coated v2 (ECI)
 *ISO Coated v2 300% (ECI)
 *PSO LWC Improved (ECI)
 *PSO LWC Standard (ECI)
 *PSO Uncoated ISO12647 (ECI)
 *ISO Uncoated Yellowish
 *SC Paper (ECI)
 *PSO MFC Paper (ECI)
 *PSO SNP Paper (ECI)
 *PSO Coated NPscreen ISO12647 (ECI)
 *PSO Coated 300% NPscreen ISO12647 (ECI)
 *PSO Uncoated NPscreen ISO12647 (ECI)

[[http://files.idealliance.org/color_characterization/icc_profiles/swop2006%20and%20gracol2006%20icc%20profiles.zip|SWOP and GRACoL Profiles]] SWOP and GRACoL are specifications for standardized printing in the US maintained by [[http://www.ideallinace.org|IDEAlliance]]. Profiles for printing according SWOP and GRACoL are based on characterization-data hosted from [[http://www.npes.org/standards/tools.html|CGATS]] Profiles are calculated with Profiling Tools from [[http://www.xrite.com|X-Rite]]. Integration of the profiles into installers is may possible but needs the allowance from IDEAlliance.


= ICC is going open source =
The ICC itself has began an open source project:
 *[[http://sourceforge.net/projects/sampleicc/]]
SampleICC provides an open source platform independent C++ library for reading, writing, manipulating, and applying ICC profiles along with applications that make use of this library.

= Legal issues =
In the middle of the 90's, there were some patent wars concerning colormanagement. Specifically the company EFI sued a lot of other companies that had implemented a RGB to CMYK conversion in their applications. Actually, it is important to be aware of which colormanagement-functionalities are part of the ICC-specs, and which are going beyond the ICC specs. Implementing colormanagement according ICC-specs is very safe. Implementing extended functions that are not part of the ICC specification could may be dangerous.  This concerns especially littleCMS, which is the standard CMM for more or less all open source applications dealing with colormanagement. (Of course, argyllCMS also contains a CMM...)
Some of this extended functionality can be very helpful for some usecases. So from the point of view of the user, it makes a lot of sense to implement and use them. One example is enhanced options for CMYK to CMYK conversions. Such functions are useful for the colormanagement of documents for the graphic arts.
It can be implemented as special function for the CMM, or it can be solved by precalculating a devicelink-profile, which is used with a ICC-conforming CMM.
If it is, for example, implemented as special function in littleCMS, a legal issue concerning littleCMS could touch all applications, which make use of littleCMS.
If it is implemented in a standalone software, which generates and delivers a devicelink-profile, the legal issue covers only the standalone software. The usage of devicelink-profiles in other software is a standard functionality of the ICC-specs.

= Specifications =

 *[[http://www.oyranos.org/wiki/index.php?title=Standards|Standards]] overview on [[http://www.oyranos.org/wiki/|ColourWiki]]
 *[[http://www.freedesktop.org/wiki/Specifications/icc_profiles_in_x_spec|ICC Profiles in X Specification]]
 *[[http://www.oyranos.org/wiki/index.php?title=Oyranos_X11_Requirements|Oyranos X11 Requirements]]

= Proposals =
== White papers for enhancing the ICC-specs ==
Observing real world colormanagement-workflows with ICC-profiles, it is clear that some problems should be solved with better and more clear defined ICC-specs. Actually, some of such enhancements can be done through "white papers". Such a white paper could e.g. describe extended functions of the CMM. One example of such enhancement is the description of Blackpoint Compensation in Adobe Products at *[[http://www.color.org/Adobe1bpc.pdf]]
If developers or colormanagement-consultants think, that the ICC-specs need some enhancements, the OpenICC wiki could be used as collaborative platform to produce such whitepapers.

Every proposal for an ICC Whitepaper should be a Subpage in the OpenICC wiki and should be structured as following:

 *Which real world use cases are addressed
 *which kind of applications are targeted
 *how should it be implemented technically
 *how should it be implemented in the user interface.

=== Actual proposals for ICC whitepapers ===

==== Better handling of ICC Grey Objects ====
IccGreyObjects

==== Device Settings in ICC ====
[[http://www.oyranos.org/wiki/index.php?title=Device_Settings|Device_Settings]] at !ColourWiki includes a specification proposal for handling device settings inside a ICC profile. As device settings are closely related to the validity of ICC profiles, such information should be included to make the profile selection process easier across systems. This provides the means to automatically select or reject a ICC depending on the installed driver software and the to be accessed devices and media.

The proposal can be considered complement to the [[http://www.color.org/ICCSpecRevision_25-02-10_dictType.pdf|ICC meta data tag]].

==== HDR Rendering Description ====
The goal of the HdrRenderingDescription is to provide a way of, how to render an LDR representation from a certain HDR image in different applications to appear similar. Such a description should be included into a ICC style colour profile. As one step a OpenIccForGoogleSoC2007 project was underway.

== General Topics ==
=== Directory scheme for Colour Management ===
[[http://www.oyranos.com/wiki/index.php?title=OpenIccDirectoryProposal|OpenICC Directory Proposal]]

=== net-color spec ===
[[http://www.oyranos.org/scm?p=xcolor.git;a=blob;f=docs/net-color-spec;h=e27ff95b4|Version 0.2 Draft 2]] is public. The goal is to communicate ICC colour regions between server and clients. The implementation is available in libXcm-0.2.x. Some tools and plugin in the Oyranos examples directory support the draft by using libXcm.

== Requirements of Applications and Services ==
=== Link Collection ===
 *[[https://www.oyranos.org/wiki/index.php?title=Applications|Applications at ColourWiki]]
 *[[http://www.freedesktop.org/wiki/OpenIcc/Cairo|Cairo]]

=== PPD colouring ===
End user applications want to assign ICC profiles to a combination of printer device, a driver and a set of colour related driver options. Thus for PPD to support this scheme, it is necessary to know, which PPD option is colour related. The proposal suggests a enumerated list of PPD key words named !ColorKeyWords, containing a semicolon ';' separated list of PPD key words. The listed keys relate to colour and thus with their values to the ICC profile selection at application level.

= LINUX color management a proposal for implementation =

This proposal describes a roadmap for color management under LINUX with the interaction of

- A profile repository connecting devices, documents and profiles
- Engine for ICC color transformations of Image maps
- Cairo
- Ghostscript
- monitor output
- printer driver (e.g. Gutenprint or Turboprint)
- CUPS / PPDs
- File export
- application interface


== 1) The role of a profile repository ==
The profile repository connects ICC profiles to input and output devices and documents. t is the central point for applications, libraries and services to get the information which profiles are valid for transforming an document for output on the monitor, on a printer with a specific printer driver setting and media or a file export. 
Available profile repositories for windows are 
- Oyranos
- Gnome Color Manager

== 2) Engine for ICC color transformation of Image maps ==
A Image map is a pixel array with 8 or 16 bit colordepth per channel. Monitors are displaying RGB Image maps. Colorprinter drivers a mainly out putting CMYK Image maps, which are may converted inside the printerdriver in CMYK+X Image maps. 
An well known engine for ICC based colortransformations of Image maps is littleCMS. If a e.g. littleCMS is combined with the profile repository, the color transformation of Image maps for output on monitor and printerdriver can be made systemwide available for applications, graphic libraries and printer drivers.

== 3) Printer driver and ICC profiles ==
If the printerdriver is should be integrated into an ICC based colormanagement workflow, an ICC profile for printing always represent a combination of printerdriver settings, inks / toner and the media. There are several advantages, if ICC-profiles for printer setups are configured inside the printerdriver and the printer driver communicates with the "ICC profile repository, which ICC-profile is valid for a printer setup.
Furthermore, it would also be helpful, if the printerdriver has the possibility for export and import of color relevant setups with an attached ICC-profile for the setup. 
This allows e.g. following workflows:
- Driver vendor providing setups for different media / print-modes with attached ICC-profiles
- Media vendor providing setups for different printers / media with attached ICC profiles
- profiling service delivers driver setups incl. the profile
In all this variants, the user imports the setups for the media he is using, and the correct ICC-profile is automatically configured. If the printerdriver communicates with "ICC profile repository" all applications and graphic libraries creating print data can detect (if necessary), which ICC-profile is valid for an active printer setup.

Another option for connecting ICC-profiles and printer setups is the integration of all color relevant print setup data (screening parameters, per channel ink limits, per channel LUT, etc..) as metadata into the ICC-profile. If the printing data is already converted to the printer profile, the driver extracts the metadata from the ICC-profile and setups the driver automatically.

== 4) Document types and ICC-Profiles for devices, objects and documents ==
For implementing colormanagement on system level, it makes sense to differentiate between following types of documents:

=== 4a) images ===
with embedded ICC-profiles or EXIF-data referencing to standard-profile like sRGB or Adobe RGB

=== 4b) flat color documents ===
containing text, vectorgraphics and images with one valid document ICC profile for all objects
Typical standard profiles and document types are e.g. sRGB for Office documents or FOGRA39_coated for documents prepared for commercial printing. The PDF equivalent for such document types is PDF/X-1a where (in general) all PDF objects are either DeviceRGB with outputIntent sRGB or DeviceCMYK with Output Intent e.g. FOGRA39_coated.
Flat color document can be easily rendered to a Image map. For displaying such document on the monitor or the printout, the color transformation can be applied after rendering the document to a Image map.

=== 4c) Mixed color documents, ===
 where every object (texts, images, vectorgraphics can have their own ICC-embedded profiles and rendering intents. These objects can also interact through transparencies and blending color spaces.
Rendering for such kind of elements is quite complex. The only available engine to deliver such functionality in the !OpenSource Environment is currently !GhostScript, which is currently too slow for realtime rendering to the monitor.

== 5) Step by step colormanagement implementation in the LINUX environment ==
A lot of developers think, that colormanagement must be implemented in one step with the approach to handle mixed color documents. This is a very complex beast, with a lot of traps, which e.g. also APPLE is still learning.
In this concept the colormanagement implementation under LINUX concentrates first only of images and flat color documents. The goal for this implementation step is to reach a robust workflow both for output on monitor and printers with shared libraries and services between applications, graphic libraries and printer drivers.
The steps could be e.g.

=== 5a) Adding Colormanagement of Image maps to Oyranos and Gnome Color Manager (g-c-m) ===
Oraynos and g-c-m get added functionality to colormanage Image maps with currently active profiles and send the Image maps to the display or a printerdriver with the associated setting

=== 5b) Adding "per document profile" to Oyranos and g-c-m ===
If documents are exchanged between computers, it is necessary, that the document colorspace from the creator of the document is remembered at the receivers side. This makes it necessary to specify a mechanism, ho the document colorspace can be embedded into an document and communicated from an application to Oyranos or g-c-m

=== 5c) Adding CMYK colorspace and Oyranos g-c-m support for cairo ===
In the first implementation, it is not needed, that ICC based color transformations are part of Cairo. Cairo gets the following added functionalities:
- assigned Cairo document/window colorspace (This ICC profile describes all colors of an actual Cairo document / window
- embed Cairo document during file export (The Cairo document profile is embedded as PDF output Intent during text export or during TIFF / JPEG export
- communicate Cairo document profile to Oyranos / g-c-m image map color processing ((Cairo renders output to an Image map and Oyranos / g-c-m transform the image map from the embedded Cairo document profile to either the monitor or print setting profile 
- introduce CMYK elements in Cairo (they will rendered through described mechanism to the monitor or printer setting


=== 5d) Handling of ICC-profiles in the print pipeline ===
In the first implementation, the printerdriver do NOT needs an internal engine for doing color transformations. It needs only the possibility to assign an ICC profile to named setting and communicate the the setting to oyranos or g-c-m.
The colortransformation from document colorspace to the ICC-profile of the driver print setting will be done in the Image map color engine from Oyranos / g-c-m. The driver should also have the possibility to export and import a complete setting incl. the assigned ICC-profile.
In the LINUX environment CUPS is the leading service to manage printing queues. The options of a printer driver are described in PPDs, from which the User Interface is generated.

Handling of driver settings, ICC-profiles, CUPD queues and PPDs could be e.g. organized as follows:

=== 5d-1) Virtual printers with static PPD ===
The PPD for a printer is reduced from all color relevant option like e.g. quality modes, media-presets, color corrections...
The user first creates in the printer driver all the necessary settings incl. an ICC profile for each setting. For every setting, a virtual CUPS printer is created and the assigned ICC profile for the setting is communicated to Oyranos / g-c-m. If the user prints through the virtual printer, the CUPS output is converted from the document profile to the printer setting profile in the Oyranos / g-c-m Image map engine.
This solution has the advantage to work with static PPDs. But the number of virtual printers is increasing.

=== 5d-2) Dynamic PPD creation ===
The user creates in the printer driver all necessary setting with assigned ICC-profiles for every setting. If he has finished the setup the PPD of the printer will be automatically updated, including all the named settings, the user has created. Only one CUPS queue is needed for the printer. In the printing UI - concerning color -  the user only sees, the settings created in the driver. Depending on the setting choosed in the print UI, the Oyranos / g-c-m Image map engine will configure the correct profile for the color transformation to the printer setting.


== 6) Entering the area of mixed color documents ==
If we have robust workflow for images and flat color documents, the implemented workflows can be migrated to workflows for mixed color documents. Here we have currently two !OpenSource engines: !GhostScript and Poppler. !GhostScript is standard for rendering complex document for print output, but is currently too slow for doing realtime rendering to the monitor. Poppler as a PDF renderer is not such a "big beast" like !GhostScript, but probably will have difficulties with very complex documents. If somebody expects for complex documents the same rendering on the monitor and the print out, he should use the same rendering engine for both ways. 






= Google SoC =

Suggestions for Googles Summer of Code 2011 are here OpenIcc/GoogleSoC2011.  Students will find our project goals and ideas, contact persons, requirements and other hints there.

Students who successfully complete their projects will receive a significant stipend from Google for their work.  Not our application is not agreed upon.
For the older projects and ideas see here OpenIcc/GoogleSoC2010, OpenIcc/GoogleSoC2009, OpenIccForGoogleSoC2008 and here OpenIccForGoogleSoC2007.

----
= Help for editors =
Here is the editing manual [[http://www.freedesktop.org/wiki/HelpContents]]
 
