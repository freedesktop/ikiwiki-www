# kdbus

## What is this?

kdbus is a transport layer for the DBus IPC system. It is meant as replacement for the UDS (Unix Domain Socket) transport layer which is the de-facto default for local DBus communication. kdbus is not directly related to DBus, nor is it limited to transporting DBus messages. However, kdbus was designed specifically for DBus so it does exhibit DBus specific behavior. Further use-cases are possible, though.

With the kdbus transport layer, the dbus-daemon is no longer needed. kdbus provides a full bus transport and thus eliminates the bus manager. Note that UDS also provides such a full bus transport, but lacks extended features like message tracking, policy handling, peer tracking and a name database. Hence, dbus-daemon is needed if UDS is used as transport.

Apart from providing a full bus transport, kdbus also extends DBus with new features. This includes reliable metadata transmission, simplified policy, single/zero-copy message transactions and namespaced endpoints.

## Implementation

The **kdbus.ko** kernel module is available at [[git.kernel.org|https://git.kernel.org/cgit/linux/kernel/git/gregkh/char-misc.git/log/?h=kdbus]] and included in [[linux-next|https://git.kernel.org/cgit/linux/kernel/git/next/linux-next.git/]]. It implements the kdbus transport layer and exposes its API via a virtual file system, usually mounted at `/sys/fs/kdbus`.

Since version 221, systemd will automatically load the kdbus module (if available), mount kdbusfs and create the system and user bus via kdbus. A dbus1 compatibility daemon, called **systemd-bus-proxyd**, is spawned for each bus. It listens on the old UDS dbus1 socket and provides a compatibility layer to kdbus. Thus, legacy software will run on kdbus systems without any changes required.

systemd will read the `kdbus={0,1}` kernel command-line option and load kdbus only if it is set to `1`. Otherwise, a legacy boot is done and kdbus will not be loaded nor used by your system. Hence, you can disable kdbus entirely by specifying `kdbus=0` on your kernel commandline. If the commandline option is omitted, the default is used (which might be either, depending how systemd was compiled).

The [[sd-bus|http://0pointer.net/blog/the-new-sd-bus-api-of-systemd.html]] library supports both transports (dbus1 and kdbus) natively. Further native ports for gdbus and qt are underway.

## Testing

To run your system on kdbus, you need the kdbus kernel module installed and a recent systemd version:

* kdbus.ko: [[https://git.kernel.org/cgit/linux/kernel/git/gregkh/char-misc.git/log/?h=kdbus]]
* systemd-223: [[https://github.com/systemd/systemd]]

You're highly recommended to run the newest version of both, but at least systemd-221 and kdbus.ko-63c8e2f6f337. Please extend your kernel commandline with `kdbus=1` to enable (and `kdbus=0` to disable) kdbus.

Once you booted your system, you can use `busctl` to list bus users. If the `DESCRIPTION` column contains non-empty entries, you've successfully booted with kdbus enabled. You can also verify this by looking for a log message `systemd[1]: Inserted module 'kdbus'`, or see whether `/sys/fs/kdbus` contains a sub-directory called `0-system`.

If you encounter any issues, please report them to us via the systemd issues tracker at [[github|https://github.com/systemd/systemd/issues/]].

### Testing on Fedora

If you run Fedora Rawhide, then you already run a recent systemd version that supports kdbus. Furthermore, the Fedora Rawhide kernel includes the kdbus.ko kernel module. Hence, there is no need to install those manually. All you need is pass `kdbus=1` on the kernel commandline (default for Rawhide is `0`).

### Testing on Arch Linux

The `systemd` package of Arch Linux includes all relevant code to run kdbus. All you need is to install the kdbus.ko kernel module and pass `kdbus=1` on the kernel commandline (default for Arch Linux is `0`).

### Compiling kdbus.ko

If your distribution does not ship a kdbus.ko kernel module, you need to compile it yourself. If you know how to compile your own kernel, all you need is to merge Greg's tree from [[kernel.org|https://git.kernel.org/cgit/linux/kernel/git/gregkh/char-misc.git/log/?h=kdbus]] (or use the tree directly; or use [[linux-next|https://git.kernel.org/cgit/linux/kernel/git/next/linux-next.git/]]).

If you do not want to compile your own kernel, you can use the out-of-tree kdbus.ko kernel module:

    $ git clone https://github.com/systemd/kdbus.git     # clone the out-of-tree repository
    $ cd kdbus                                           # enter repository
    $ git checkout -f v4.1                               # checkout branch for kernel-4.1
    $ make -j4                                           # build module
    $ # make tt                                          # Optional: run test-suite
    $ sudo make install                                  # install module into /lib/modules/`uname -r`/

Please use the branch according to your kernel version (See `uname -r` and pick branches `v4.0`, `v4.1` or `v4.2` accordingly; older releases are **not** supported). Please also *always* use `git checkout -f <branch>` or `git reset --hard <branch>` as all branches but `master` are **rebased**. Never use `git pull` or `git merge`!

If you don't want to deal with rebases, use the `master` branch. This branch tracks the upstream tree from Greg, but also only applies to the version Greg's tree is based on. The `v4.X` branches carry necessary reverts/changes for the given version.

Every time you update your kernel, you need to re-compile the kdbus.ko module for the new kernel. Your kernel will refuse to load modules not built explicitly for the given kernel.

## Known issues

No known issues at the moment.

## Common Problems

#### Kernel oopses and panics during boot

If you encounter kernel bugs during system boot, you might have hit a bug in the kdbus.ko module. However, chances are more likely you compiled the wrong kdbus.ko version. Please verify your kernel-headers are correctly installed, your build directory in ``/lib/modules/`uname -r`/build`` is consistent and you actually compiled the correct branch.

If you still see kernel bugs, please report them to us!
