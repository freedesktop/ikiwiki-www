[[Back to systemd|http://www.freedesktop.org/wiki/Software/systemd/]]

# resolved

systemd 229 and newer include a fully featured systemd-resolved DNS resolver implementation. This is a tiny daemon that provides DNS and LLMNR based host name resolution and caching. Since it acts as DNSSEC validating stub resolver it is suitable for retrieving DNS certificate and SSH fingerprint resource records.

See [[systemd-resolved(8).service|http://www.freedesktop.org/software/systemd/man/systemd-resolved.service.html]] for more information.

systemd-resolved may be used via two interfaces: directly via its D-Bus interface (which is documented here), or via glibc NSS getaddrinfo(), in which case it provides forward and reverse hostname resolution. The latter is generally preferable as long as basic hostname resolution is all that's needed. The former is useful to retrieve arbitrary DNS resource records or DNSSEC authentication information. It generally provides a more fine-grained control over the lookups made. In addition it provides calls to introspect and configure the DNS resolver.

## The Manager Object

The service exposes the following interfaces on the Manager object on the bus:

    node /org/freedesktop/resolve1 {
      interface org.freedesktop.resolve1.Manager {
        methods:
          ResolveHostname(in  i ifindex,
                          in  s name,
                          in  i family,
                          in  t flags,
                          out a(iiay) addresses,
                          out s canonical,
                          out t flags);
          ResolveAddress(in  i ifindex,
                         in  i family,
                         in  ay address,
                         in  t flags,
                         out a(is) names,
                         out t flags);
          ResolveRecord(in  i ifindex,
                        in  s name,
                        in  q class,
                        in  q type,
                        in  t flags,
                        out a(iqqay) records,
                        out t flags);
          ResolveService(in  i ifindex,
                         in  s name,
                         in  s type,
                         in  s domain,
                         in  i family,
                         in  t flags,
                         out a(qqqsa(iiay)s) srv_data,
                         out aay txt_data,
                         out s canonical_name,
                         out s canonical_type,
                         out s canonical_domain,
                         out t flags);
          ResetStatistics();
          GetLink(in  i ifindex,
                  out o path);
          SetLinkDNS(in  i ifindex,
                     in  a(iay) addresses);
          SetLinkDomains(in  i ifindex,
                         in  a(sb) domains);
          SetLinkLLMNR(in  i ifindex,
                       in  s mode);
          SetLinkMulticastDNS(in  i ifindex,
                              in  s mode);
          SetLinkDNSSEC(in  i ifindex,
                        in  s mode);
          SetLinkDNSSECNegativeTrustAnchors(in  i ifindex,
                                            in  as names);
          RevertLink(in  i ifindex);
        properties:
          readonly s LLMNRHostname = 'delta';
          readonly a(iiay) DNS = [(0, 2, [0xac, 0x1f, 0x00, 0x01])];
          readonly a(isb) SearchDomains = [(0, 'fritz.box', false)];
          readonly (tt) TransactionStatistics = (0, 846);
          readonly (ttt) CacheStatistics = (55, 406, 439);
          readonly (tttt) DNSSECStatistics = (0, 0, 0, 0);
          readonly b DNSSECSupported = false;
      };
      interface org.freedesktop.DBus.Peer {
      };
      interface org.freedesktop.DBus.Introspectable {
      };
      interface org.freedesktop.DBus.Properties {
      };
    };

### Methods

**ResolveHostname()** takes a hostname and acquires one or more IP addresses for it. As parameters it takes the Linux network interface index to execute the query on, or 0 if it may be done on any suitable interface. The `name` parameter specifies the hostname to resolve. Note that IDNA conversion is applied to this name when necessary, and when it is resolved via Unicast DNS, but not for resolution via LLMNR or MulticastDNS. The `family` parameter specifies the address family of the IP address to retrieve. It may be AF_INET, AF_INET6 or AF_UNSPEC, to request addresses of a specific family. If AF_UNSPEC is specified (recommended) both kinds are retrieved, subject to local network configuration (i.e. if no local, routable IPv6 address is found, no IPv6 address is retrieved; and similar for IPv4). A 64bit flags field may be used to alter behaviour of the resolver operation (see below). The method returns an array of address records. Each address record consists of an interface index the address belongs to, an address family as well as a byte array with the actual IP address data (which either has 4 or 16 elements, depending on the address family). The returned address family will be one of AF_INET or AF_INET6. For IPv6, the returned address interface index should be used to initialize the `.sin6_scope_id` field of a `struct sockaddr_in6`, to permit support for resolution to link-local IP addresses. The address array is followed by the canonical name of the host, which may or may not be identical to the name looked up. Finally, a 64bit flags field is returned, that is defined similar to the flags field that was passed in, but contains information about the resolved data (see below).

**ResolveAddress()** executes the reverse operation: it takes an IP address and acquires one or more hostnames for it. As parameters it takes the interface index to execute the query on, or 0 if all suitable interfaces are OK. The `family` parameter indicates the address family of the IP address to resolve, it may be either AF_INET or AF_INET6. The `address` parameter takes the raw IP address data (as either 4 or 16 byte array). The `flags` input parameter may be used to alter the resolver operation (see below). The call returns an array of name records, consisting of an interface index plus the name each.  The `flags` output field contains additional information about the resolver operation (see below).

**ResolveRecord()** takes a DNS resource record (RR) type, class and name, and retrieves the full resource record set (RRset), including the rdata, for it. As parameter it takes the Linux network interface index to execute the query on, or 0 if it may be done on any suitable interface. The `name` parameter specifies the RR domain name to look up (no IDNA conversion is applied), followed by the 16bit class and type fields (which may be ANY). Finally, a `flags` field may be passed in to alter behaviour of the look-up (see below). On return an array of RR items is returned. Each array entry consists of the network interface index the RR was discovered on, the type and class field of the RR found, and a byte array of the raw RR discovered. For RRs that support name compression in the payload (such as MX or PTR), the compression is expanded in the returned data.

Note that the class field has to be specified as IN or ANY currently, and specifying a different class will return an error indicating that look-ups of this kind are unsupported. Similar, some special types are not supported either (AXFR, OPT, â€¦). While resolved parses and validates resource record of many types, it is crucial that clients using this API understand that the RR data originates from the network and should be thoroughly validated before use.

**ResolveService()** may be used to resolve a DNS SRV service record, as well as the hostnames referenced in it, and possibly an accompanying DNS-SD TXT record containing addditional service metadata. As parameter it takes a Linux network interface index, a service name, a service type and a domain. The call may be invoked in three different modes:

1. To resolve a DNS-SD service, specify the service name (e.g. `Lennart's Files`), the service type (e.g. `_webdav._tcp`) and the domain to search in (e.g. `local`). The service must be in UTF-8 format, and no IDNA conversion is applied to it in this mode (as mandated by the DNS-SD specifications). However, if necessary IDNA conversion is applied to the domain parameter.
2. To resolve plain SRV record, set the service name parameter to the empty string, and set the service type and domain properly. (IDNA conversion is applied to the domain, if necessary)
3. Alternatively, leave both the service name and type empty, and specify the full domain name of the SRV record (i.e. prefixed with the service type) in the domain parameter. (No IDNA coversion is applied in this mode)

The `family` parameter of the **ResolveService()** call encodes the family of the addresses to resolve, if this is enabled (Use the NO_ADDRESS flag to turn address resolution off, see below). The `flags` parameter takes a couple of flags that may be used to alter the resolver operation.

On return, **ResolveService()** returns an array of SRV record structures. Each item consists of the priority, weight and port fields and the hostname to contact, as encoded in the SRV record. Immediately following is an array with the addresses of this hostname, with each item consisting of the interface index, the address family and the address data in a byte array. This address array is followed with the canonicalized hostname. After this array of SRV record structures an array of byte arrays follows, that encodes the TXT RR strings, in case DNS-SD look-ups are enabled. The next parameters are the canonical service name, type and domain. This may or may not be identical to the parameters passed in. Finally, a `flags` field is returned that contains information about the resolver operation performed.

#### Flags Parameter

The four calls above accept and return a 64bit flags value. In most cases passing 0 is sufficient and recommended, however, the following flags are defined to alter the look-up:

Flags:

    #define SD_RESOLVED_DNS           (UINT64_C(1) << 0)
    #define SD_RESOLVED_LLMNR_IPV4    (UINT64_C(1) << 1)
    #define SD_RESOLVED_LLMNR_IPV6    (UINT64_C(1) << 2)
    #define SD_RESOLVED_MDNS_IPV4     (UINT64_C(1) << 3)
    #define SD_RESOLVED_MDNS_IPV6     (UINT64_C(1) << 4)
    #define SD_RESOLVED_NO_CNAME      (UINT64_C(1) << 5)
    #define SD_RESOLVED_NO_TXT        (UINT64_C(1) << 6)
    #define SD_RESOLVED_NO_ADDRESS    (UINT64_C(1) << 7)
    #define SD_RESOLVED_NO_SEARCH     (UINT64_C(1) << 8)
    #define SD_RESOLVED_AUTHENTICATED (UINT64_C(1) << 9)

On input, the first five flags control the protocols to use for the look-up. They refer to classic unicast DNS, LLMNR via IPv4/UDP and IPv6/UDP respectively, as well as MulticastDNS via IPv4/UDP and IPv6/UDP. If all of these five bits are off on input (which is strongly recommended) the look-up will be done via all suitable protocols for the specific look-up. Note that these flags operate as filter only, but cannot force a look-up to be done via a protocol. Specifically, resolved will only route look-ups within the .local TLD to MulticastDNS (plus some reverse look-up address domains), and single-label names to LLMNR (plus some reverse address lookup domains). It will route neither of these to Unicast DNS servers. Also, it will do LLMNR and Multicast DNS only on interfaces suitable for multicasting. 

On output these five flags indicate which protocol was used to execute the operation, and hence where the data was found.

The primary use case for these five flags are follow-up look-ups based on DNS data retrieved earlier. In this case it is often a good idea to limit the follow-up look-up to the protocol that was used to discover the first DNS data look-up.

The NO_CNAME flag controls whether CNAME/DNAME resource records shall be followed during the look-up. This flag is only available at input, none of the functions will return it on output. If a CNAME/DNAME RR is discovered while resolving a hostname an error is returned instead. By default, when the flag is off, CNAME/DNAME RRs are followed.

The NO_TXT and NO_ADDRESS flags influence operation of the **ResolveService()** call only. They are only defined for input, not output. If NO_TXT set, the DNS-SD TXT RR look-up is not done in the same operation. If NO_ADDRESS is specified the hostnames discovered are not implicitly translated to their address records.

The NO_SEARCH flag turns off the search domain logic. It is only defined for input in **ResolveHostname()**. When specified, single-label hostnames are not qualified using defined search domains, if any are configured. Note that **ResolveRecord()** will not qualify single-label domain names using search domains in any case.

The AUTHENTICATED bit is defined only in the output flags of the four functions. If set, the returned data has been fully authenticated. Specifically, this bit is set for all DNSSEC-protected data for which a full trust chain may be established to a trusted domain anchor. It is also set for locally synthesized data, such as "localhost" or data from /etc/hosts. Moreover, it is set for all LLMNR or mDNS RRs which originate from the local host. Applications that require authenticated RR data for operation should check this flag before trusting the data. Not that resolved will not return invalidated data in any case, hence this flag simply allows to discern the cases where data is known to be trustable, or where there's proof that the data is "rightfully" unauthenticated.
