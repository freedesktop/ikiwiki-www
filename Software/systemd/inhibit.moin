[[http://www.freedesktop.org/wiki/Software/systemd/|Back to systemd]]

= Inhibition Logic =

systemd 183 and newer include a logic to inhibit system shutdowns and sleep states. This is implemented as part of [[http://www.freedesktop.org/software/systemd/man/systemd-logind.service.html|systemd-logind.daemon(8)]] There are a couple of different usecases for this:

 * A CD burning application wants to ensure that the system is not turned off or suspended while the burn process is in progress.
 * A package manager wants to ensure that the system is not turned off while a package upgrade is in progress.
 * An office suite wants to be notified before system suspend in order to save all data to disk, and delay the suspend logic until all data is written.
 * A web browser wants to be notified before system hibernation in order to free its cache to minimize the amount of memory that needs to be virtualized.

Applications which want to make use of the inhibition logic shall take an inhibitor lock via the [[http://www.freedesktop.org/wiki/Software/systemd/logind|logind D-Bus API]].

Three distinct inhibitor lock types may be taken, or a combination of them:

 1. ''sleep'' inhibits '''user-requested''' system suspend and hibernation
 2. ''shutdown'' inhibits '''user-requested''' system power-off and reboot
 3. ''idle'' inhibits that the system goes into idle mode, possibly resultin in '''automatic''' system suspend or shutdown depending on configuration.

Two different modes of locks are supported:

 1. ''block'' inhibits operations entirely until the lock is released. If such a lock is taken the operation will fail (but still may be overriden if the user possesses the necessary privileges).
 2. ''delay'' inhibits operations only temporarily, either until the lock is released or up to a certain amount of time. The !InhibitDelayMaxSec= setting in [[http://www.freedesktop.org/software/systemd/man/logind.conf.html|logind.conf(5)]] controls the timeout for this. This is intended to be used by applications which need a synchronous way to execute actions before system suspend but shall not be allowed to block suspend indefinitely.

Inhibitor locks are taken via the Inhibit() D-Bus call on the logind Manager object:

{{{
$ gdbus introspect --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1
node /org/freedesktop/login1 {
  interface org.freedesktop.login1.Manager {
    methods:
      Inhibit(in  s what,
              in  s who,
              in  s why,
              in  s mode,
              out h fd);
      ListInhibitors(out a(ssssuu) inhibitors);
      ...
    signals:
      PrepareForShutdown(b active);
      PrepareForSleep(b active);
      ...
    properties:
      readonly s BlockInhibited = '';
      readonly s DelayInhibited = '';
      readonly t InhibitDelayMaxUSec = 5000000;
      ...
  };
  ...
};
}}}

'''Inhibit()''' is the only API necessary to take a lock. It takes four arguments:

 * ''What'' is a colon-separated list of lock types, i.e. {{{shutdown}}}, {{{sleep}}}, {{{idle}}}. Example: "shutdown:idle"
 * ''Who'' is a human-readable, descriptive string of who is taking the lock. Example: "PackageKit"
 * ''Why'' is a human-readable, descriptive string of why the lock is taken. Example: "Package Update in Progress"
 * ''Mode'' is one of {{{block}}} or {{{delay}}}, see above. Example: "block"

'''Inhibit()''' returns a single value, a file descriptor that encapsulates the lock. As soon as the file descriptor is closed (and all its duplicates) the lock is automatically released. If the client dies while the lock is taken the kernel automatically closes the file descriptors so that the lock is automatically released.

'''ListInhibitors()''' lists all currently active inhibitor locks. It returns an array of structs, each consisting of What, Who, Why, Mode as above, plus the PID and UID of the process that requested the lock.

The '''!PrepareForShutdown()''' and '''!PrepareForSleep()''' signals are emitted if a system suspend or shutdown has been requested but a delay inhibitor lock has been taken and when all locks are released or the timeout reached. The signals carry a boolean argument. If true the shutdown/sleep preperation should begin, if false it ends.  If true, this should be used as indication to quickly execute the operations the applications wanted to execute before suspend and then release the delay lock. If false the preparation time for shutdown/sleep is over, either because all delay locks have have been released or because the timeout is reached. The signals with 'false' might get delivered only after the system comes back from system suspend. It is usually the signal on which applications request a new delay lock in order to be synchronously notified about the next suspend/shutdown. Note that !PrepareForShutdown()/!PrepareForSleep() are ''not'' send out if no delay lock is taken, and more specifically not send out if only block locks are taken.

The '''!BlockInhibited''' and '''!DelayInhibited''' properties encode what types of locks are currently taken. These fields are a colon separated list of {{{shutdown}}}, {{{sleep}}}, {{{idle}}}. The list is basically the union of the What fields of all currently active locks of the specific mode.

'''InhibitDelayMaxUSec''' contains the delay timeout values as configured in [[http://www.freedesktop.org/software/systemd/man/logind.conf.html|logind.conf(5)]].

The tool [[http://www.freedesktop.org/software/systemd/man/systemd-inhibit.html|systemd-inhibit(1)]] may be used to take locks or list active locks from the command line.
