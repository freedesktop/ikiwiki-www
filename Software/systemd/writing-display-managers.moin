= Writing Display Managers =

''Or: How to hook up your favourite display manager with systemd''

systemd's logind service obsoletes !ConsoleKit which was previously widely used on Linux distributions. The switch to logind requires a minimal amount of porting, however brings a couple of new features: true automatic multi-seat support, proper tracking of session processes, (optional) automatic killing of user processes on logout, a synchronous low-level C API and much simplification.

If required it is possible to implement !ConsoleKit and systemd-logind support in the same code, which detects at runtime which interface is needed. The [[http://www.freedesktop.org/software/systemd/man/sd_booted.html|sd_booted()]] call may be used to determine at runtime whether !ConsoleKit or systemd are used.

To a certain level CK and systemd-logind may be used side-by-side, but a number of features are not available if CK is used, for example automatic multi-seat support.

Minimal porting (without multi-seat) requires the following:

 1. Remove/disable all code responsible for registering your service with !ConsoleKit.
 2. Make sure to register your greeter session via the PAM session stack, and make sure the PAM session modules include pam_systemd.
 3. Make sure to register your logged in session via the PAM session stack as well, also including pam_systemd in it.
 4. Optionally, use pam_misc_setenv() to set the the environment variables XDG_SEAT and XDG_VTNR. The former should contain "seat0", the latter the VT number your session runs on. pam_systemd can determine these values automatically but it's nice to pass these variables anyway.

In summary: porting a display manager from !ConsoleKit to systemd primarily means removing code not necessarily adding any new code. Here, a cheers to simplicity!

Complete porting (with multi-seat) requires the following: (Before you continue, make sure to read up on [[http://www.freedesktop.org/wiki/Software/systemd/multiseat|Multi-Seat on Linux]] first.)

 1. Subscribe to seats showing up and going away, via the systemd-logind D-Bus interface's SeatAdded/SeatRemoved signals. Take posession of each seat by spawning your greeter on it.
 2. Use ListSeats() on the D-Bus interface to acquire a list of already available seats and also take posession of them.
 3. For each seat you spawn a greeter on use the XDG_SEAT and XDG_VTNR PAM environment variables to inform pam_systemd about the seat name, resp. VT number you start them on. Note that only the special seat "seat0" actually knows kernel VTs, so you shouldn't pass the VT number on any but the main seat, since it doesn't make any sense there.
 4. Pass the seat name to the X server you start via the -seat parameter.
 5. At this time X interprets the -seat parameter natively only for input devices. To work around this we provide a tiny wrapper /lib/systemd/systemd-multi-seat-x which emulates the enumeration for graphics devices too. This wrapper will eventually go away, as soon as X learned udev-based graphics device enumeration natively, instead of the current PCI based one.

And that's already it.

While most information about seats, sessions and users is available on systemd-logind's D-Bus interface, this is not the only API. The synchronous [[http://www.freedesktop.org/software/systemd/man/sd-login.html|sd-login.h]] interface is often easier to use and much faster too. In fact it is possible to implement the scheme above entirely without D-Bus relying only on this API.
