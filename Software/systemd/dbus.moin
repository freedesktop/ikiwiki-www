= The D-Bus API of systemd/PID 1 =

== The Manager Object ==
{{{
$ gdbus introspect --system --dest org.freedesktop.systemd1 --object-path /org/freedesktop/systemd1
node /org/freedesktop/systemd1 {
  interface org.freedesktop.systemd1.Manager {
    methods:
      GetUnit(in  s name,
              out o unit);
      GetUnitByPID(in  u pid,
                   out o unit);
      LoadUnit(in  s name,
               out o unit);
      StartUnit(in  s name,
                in  s mode,
                out o job);
      StartUnitReplace(in  s old_unit,
                       in  s new_unit,
                       in  s mode,
                       out o job);
      StopUnit(in  s name,
               in  s mode,
               out o job);
      ReloadUnit(in  s name,
                 in  s mode,
                 out o job);
      RestartUnit(in  s name,
                  in  s mode,
                  out o job);
      TryRestartUnit(in  s name,
                     in  s mode,
                     out o job);
      ReloadOrRestartUnit(in  s name,
                          in  s mode,
                          out o job);
      ReloadOrTryRestartUnit(in  s name,
                             in  s mode,
                             out o job);
      KillUnit(in  s name,
               in  s who,
               in  s mode,
               in  i signal);
      ResetFailedUnit(in  s name);
      GetJob(in  u id,
             out o job);
      ClearJobs();
      ResetFailed();
      ListUnits(out a(ssssssouso) units);
      ListJobs(out a(usssoo) jobs);
      Subscribe();
      Unsubscribe();
      Dump(out s dump);
      CreateSnapshot(in  s name,
                     in  b cleanup,
                     out o unit);
      Reload();
      Reexecute();
      Exit();
      Reboot();
      PowerOff();
      Halt();
      KExec();
      SwitchRoot(in  s new_root,
                 in  s init);
      SetEnvironment(in  as names);
      UnsetEnvironment(in  as names);
      UnsetAndSetEnvironment(in  as unset,
                             in  as set);
      ListUnitFiles(out a(ss) changes);
      GetUnitFileState(in  s file,
                       out s state);
      EnableUnitFiles(in  as files,
                      in  b runtime,
                      in  b force,
                      out b carries_install_info,
                      out a(sss) changes);
      DisableUnitFiles(in  as files,
                       in  b runtime,
                       out a(sss) changes);
      ReenableUnitFiles(in  as files,
                        in  b runtime,
                        in  b force,
                        out b carries_install_info,
                        out a(sss) changes);
      LinkUnitFiles(in  as files,
                    in  b runtime,
                    in  b force,
                    out a(sss) changes);
      PresetUnitFiles(in  as files,
                      in  b runtime,
                      in  b force,
                      out b carries_install_info,
                      out a(sss) changes);
      MaskUnitFiles(in  as files,
                    in  b runtime,
                    in  b force,
                    out a(sss) changes);
      UnmaskUnitFiles(in  as files,
                      in  b runtime,
                      out a(sss) changes);
    signals:
      UnitNew(s id,
              o unit);
      UnitRemoved(s id,
                  o unit);
      JobNew(u id,
             o job,
             s unit);
      JobRemoved(u id,
                 o job,
                 s unit,
                 s result);
      StartupFinished(t kernel,
                      t initrd,
                      t userspace,
                      t total);
      UnitFilesChanged();
    properties:
      readonly s Version = 'systemd 185';
      readonly s Distribution = 'fedora';
      readonly s Features = '+PAM +LIBWRAP +AUDIT +SELINUX +IMA +SYSVINIT +LIBCRYPTSETUP';
      readonly s Tainted = '';
      readonly t InitRDTimestamp = 1340822954724393;
      readonly t InitRDTimestampMonotonic = 2431571;
      readonly t StartupTimestamp = 1340822956472674;
      readonly t StartupTimestampMonotonic = 4179853;
      readonly t FinishTimestamp = 1340822966825952;
      readonly t FinishTimestampMonotonic = 14533131;
      readwrite s LogLevel = 'debug';
      readwrite s LogTarget = 'kmsg';
      readonly u NNames = 249;
      readonly u NJobs = 0;
      readonly u NInstalledJobs = 4;
      readonly u NFailedJobs = 0;
      readonly d Progress = 1.0;
      readonly as Environment = ['SYSFONT=latarcyrheb-sun16', 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin', 'DRACUT_QUIET=yes', 'LANG=en_US.UTF-8', 'KEYTABLE=de-latin1'];
      readonly b ConfirmSpawn = false;
      readonly b ShowStatus = true;
      readonly as UnitPath = ['/etc/systemd/system', '/run/systemd/generator', '/usr/lib/systemd/system'];
      readonly s ControlGroupHierarchy = '/system';
      readonly as DefaultControllers = ['cpu'];
      readonly s DefaultStandardOutput = 'journal';
      readonly s DefaultStandardError = 'inherit';
      readwrite s RuntimeWatchdogUSec = 0;
      readwrite s ShutdownWatchdogUSec = 600000000;
  };
  interface org.freedesktop.DBus.Properties {
  };
  interface org.freedesktop.DBus.Peer {
  };
  interface org.freedesktop.DBus.Introspectable {
  };
};
}}}

=== Methods ===

      GetUnit(in  s name,
              out o unit);
      GetUnitByPID(in  u pid,
                   out o unit);
      LoadUnit(in  s name,
               out o unit);
      StartUnit(in  s name,
                in  s mode,
                out o job);
      StartUnitReplace(in  s old_unit,
                       in  s new_unit,
                       in  s mode,
                       out o job);
      StopUnit(in  s name,
               in  s mode,
               out o job);
      ReloadUnit(in  s name,
                 in  s mode,
                 out o job);
      RestartUnit(in  s name,
                  in  s mode,
                  out o job);
      TryRestartUnit(in  s name,
                     in  s mode,
                     out o job);
      ReloadOrRestartUnit(in  s name,
                          in  s mode,
                          out o job);
      ReloadOrTryRestartUnit(in  s name,
                             in  s mode,
                             out o job);
      KillUnit(in  s name,
               in  s who,
               in  s mode,
               in  i signal);
      ResetFailedUnit(in  s name);
      GetJob(in  u id,
             out o job);
      ClearJobs();
      ResetFailed();
      ListUnits(out a(ssssssouso) units);
      ListJobs(out a(usssoo) jobs);
      Subscribe();
      Unsubscribe();
      Dump(out s dump);
      CreateSnapshot(in  s name,
                     in  b cleanup,
                     out o unit);
      Reload();
      Reexecute();
      Exit();
      Reboot();
      PowerOff();
      Halt();
      KExec();
      SwitchRoot(in  s new_root,
                 in  s init);
      SetEnvironment(in  as names);
      UnsetEnvironment(in  as names);
      UnsetAndSetEnvironment(in  as unset,
                             in  as set);
      ListUnitFiles(out a(ss) changes);
      GetUnitFileState(in  s file,
                       out s state);
      EnableUnitFiles(in  as files,
                      in  b runtime,
                      in  b force,
                      out b carries_install_info,
                      out a(sss) changes);
      DisableUnitFiles(in  as files,
                       in  b runtime,
                       out a(sss) changes);
      ReenableUnitFiles(in  as files,
                        in  b runtime,
                        in  b force,
                        out b carries_install_info,
                        out a(sss) changes);
      LinkUnitFiles(in  as files,
                    in  b runtime,
                    in  b force,
                    out a(sss) changes);
      PresetUnitFiles(in  as files,
                      in  b runtime,
                      in  b force,
                      out b carries_install_info,
                      out a(sss) changes);
      MaskUnitFiles(in  as files,
                    in  b runtime,
                    in  b force,
                    out a(sss) changes);
      UnmaskUnitFiles(in  as files,
                      in  b runtime,
                      out a(sss) changes);

=== Signals ===

Note that most signals are sent out only after '''Subscribe()''' has been invoked by at least one client. Make sure to invoke this call when subscribing to these signals!

'''!UnitNew()''' and '''!UnitRemoved()''' are sent out each time a new unit is loaded or unloaded. Note that this has little to do whether a unit is available on disk or not, and simply reflects the units that are currently loaded into memory. The signals take two parameters: the primary unit name and the object path.

'''!JobNew()''' and '''!JobRemoved()''' are sent out each time a new job is queued or dequeued. Both signals take the numeric job ID, the bus path and the primary unit name for this job as arguent. '''!JobRemoved()''' also includes a result string, being one of {{{done}}}, {{{canceled}}}, {{{timeout}}}, {{{failed}}}, {{{dependency}}}, {{{skipped}}}. {{{done}}} indicates successful execution of a job. {{{canceled}}} indicates that a job has been canceled (via !CancelJob() above) before it finished execution (this doesn't necessarily mean though that the job operation is actually cancelled too, see above). {{{timeout}}} indicates that the job timeout was reached. {{{failed}}} indicates that the job failed. {{{dependency}}} indicates that a job this job has been depending on failed and the job hence has been removed too. {{{skipped}}} indicates that a job was skipped because it didn't apply to the units current state.

'''!StartupFinished()''' is sent out when startup finished. It carries four usec timespan values each indicating how much boot time has been spent in the kernel, in the initrd, in userspace and in total. These values may also be calculated from the !InitRDTimestampMonotonic, !StartupTimestampMonotonic, !FinishTimestampMonotonic properties (see below).

'''!UnitFilesChanged()''' is sent out each time the list of enabled or masked unit files on disk have changed.

=== Properties ===

Most properties simply reflect the respective options in {{{/etc/systemd/system.conf}}} and the kernel command line. The others:

'''Version''' encodes the version string of the running systemd instance.

'''Distribution''' encodes for which distribution the running systemd instance has been compiled.

'''Features''' encodes the features that have been enabled resp. disabled for this build. Enabled options are prefixed with +, disabled options with -.

'''Tainted''' encodes a couple of taint flags, as colon seperated list. When systemd detects it is run on a system with certain problems it will set an appropriate taint flag. Taints may be used to lower the chance of bogus bug reports. The following taints are currently known: {{{split-usr}}}, {{{mtab-not-symlink}}}, {{{cgroups-missing}}}, {{{local-hwclock}}}. {{{split-usr}}} is set if /usr is not pre-mounted when systemd is first invoked. See [[http://freedesktop.org/wiki/Software/systemd/separate-usr-is-broken|Booting Without /usr is Broken]] for details why this is bad. {{{mtab-not-symlink}}} indicates that {{{/etc/mtab}}} is not a symlink to {{{/proc/self/mounts}}} as required. {{{cgroups-missing}}} indicates that control groups have not been enabled in the kernel. {{{local-hwclock}}} indicates that the local RTC is configured to be in local time rather than UTC. 

'''InitRDTimestamp''', '''InitRDTimestampMonotonic''', '''!StartupTimestamp''', '''!StartupTimestampMonotonic''', '''!FinishTimestamp''', '''!FinishTimestampMonotonic''' encode CLOCK_REALTIME resp. CLOCK_MONOTONIC usec timestamps taken when the initrd first began execution, when the main systemd instance began execution and finally, when all queued startup jobs finished execution. These values are useful for determining boot-time performance.

'''NNames''' encodes how many unit names are currently known. This only includes names of units that are currently loaded and can be more than actually loaded units since units may have more than one name.

'''NJobs''' encodes how many jobs are currently queued.

'''NInstalledJobs''' encodes how many jobs have ever been queued in total.

'''NFailedJobs''' encodes how many jobs have ever failed in total.

'''Progress''' encodes boot progress as floating point value between 0.0 and 1.0. This value begins at 0.0 at early-boot and ends at 1.0 when boot is finished and is based on the number of executed and queued jobs. After startup this field is always 1.0 indicating a finished boot.

'''Environment''' encodes the environment block passed to all executed services. It may be altered with bus calls such as !SetEnvironment() (see above).

'''!UnitPath''' encodes the currently active unit file search path. It is an array of strings, each being one file system path.

'''!ControlGroupHierarchy''' encodes the control group root path for this systemd instance. Prefixing {{{/sys/fs/cgroup/}}} turns this into a file system path.

== Job Objects ==
{{{
}}}

== Service Unit Objects ==

{{{
}}}

== Socket Unit Objects ==
{{{
}}}

== Device Unit Objects ==
{{{
}}}

== Mount Unit Objects ==
{{{
}}}

== Automount Unit Objects ==
{{{
}}}

== Snapshot Unit Objects ==
{{{
}}}

== Timer Unit Objects ==
{{{
}}}

== Swap Unit Objects ==
{{{
}}}

== Path Unit Objects ==
{{{
}}}
