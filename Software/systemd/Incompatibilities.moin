systemd provides a fair degree of compatibility with the behaviour exposed by the SysV init system as implemented by many distributions. However, there are some areas where compatibility is limited due to technical reasons:

 * If your distribution removes SysV init scripts in favour of systemd unit files typing "/etc/init.d/foobar start" to start a service will not work, since the script will not be available. Use the more correct "/sbin/service foobar start" instead, and your command will be forwarded to systemd. Note that invoking the init script directly has always been suboptimal since too much of the callers execution context (env block, umask, resource limits, audit trails, ...) ended up being inherited by the service, and invocation via "/sbin/service" used to clean this up at least partially. Also, LSB mandates only invocation via "/sbin/service" anyway.

 * LSB header dependency information matters. The SysV implementations on many distributions did not use the dependency information encoded in LSB init script headers, or used them only in very limited ways. Due to that they are often incorrect or incomplete. systemd however fully interprets these headers and follows them at runtime (and not at installation time like some implementations). 

 * Timeouts applay to all init script operations in systemd.

 * Services are executed in completely clean execution contexts, no context of the invoking user session is inherited. Not even $HOME or similar are set.

 * Services cannot read from stdin, as this will be connected to /dev/null.

 * Additional verbs for init scripts are not supported.

* Additional parameters to the standard verbs are not supported.
