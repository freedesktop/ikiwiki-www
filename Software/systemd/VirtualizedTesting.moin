= Testing systemd during Development in Virtualization =

== Testing in a VM ==

Here's a nice trick if you regularly build and test-boot systemd, are gutsy enough to install it into your host, but too afraid or too lazy to continuously reboot your host.

Create a shell script like this: 

{{{
#!/bin/sh

sudo sync
sudo /bin/sh -c 'echo 3 > /proc/sys/vm/drop_caches'
sudo umount /
sudo modprobe kvm-intel

exec sudo qemu-kvm -smp 2 -m 512 -snapshot /dev/sda
}}}

This will boot your local system in a throw-away VM. It will take your main harddisk, boot from it in the VM, allow changes to it, but these changes are all just buffered in memory and never hit the real disk. Any changes made in this VM will be lost when the VM terminates. I have called this script "q", and hence for test booting my own system all I do type the following command in my systemd source tree and I can see if it worked.

{{{
$ make -j10 && sudo make install && q
}}}

The first three lines are necessary to ensure that the kernel's disk caches are all synced to disk before qemu takes the snapshot of it. Yes, invoking "umount /" will sync your file system to disk as a side effect, even though it will actually fail. When the machine boots up the file system will still be marked dirty (and hence you will get an fsck, usually), but it will work fine nonetheless in virtually all cases.

YMMV if you use LVM or btrfs. 

== Testing in a container ==

Test-booting systemd in a container has the benefit of being much easier to debug/instrument from the outside. 

'''Important:''' As preparation it is essential to turn of auditing entirely on your host. Auditing cannot be used with containers, and will trigger all kinds of error ins containers if not turned off. Use ''audit=0'' on the host's kernel command line to turn it off.

Then, as first step I install Fedora into a container tree: 

{{{
$ sudo yum -y --releasever=18 --nogpg --installroot=$HOME/fedora-tree --disablerepo='*' --enablerepo=fedora install systemd passwd yum fedora-release
}}}

You can do something similar with debootstrap on a Debian system. Now, we need to set a root password in order to be able to log in:

{{{
$ sudo systemd-nspawn --capability=cap_audit_control,cap_audit_write -D /home/lennart/fedora-tree/
# passwd
# ^D
}}}

As next step I can already boot the container:

{{{
$ sudo systemd-nspawn --capability=cap_audit_control,cap_audit_write -bD ~/fedora-tree
}}}

To test systemd in the container I then run this from my source tree:

{{{
$ make -j10 && sudo DESTDIR=$HOME/fedora-tree make install && sudo systemd-nspawn --capability=cap_audit_control,cap_audit_write -bD ~/fedora-tree 3
}}}

And that's already it.

You need to specify --capability= on the nspawn command line in order to grant the container audit capabilities (which nspawn doesn't normally grant, since audit can't handle containers), since some of the crappy audit client code will fail fatally if the audit capabilities aren't around even if auditing is turned off in the kernel entirely. Audit is simply a pain in the ass, and even annoying if one turns it off.
