[[Back to systemd|http://www.freedesktop.org/wiki/Software/systemd/]]

# importd

systemd 219 and newer include the `systemd-importd` service which may be used to import, export and download additional system images, for running them as local containers using tools such as `systemd-nspawn`. The service is used as backend for `machinectl pull-raw` and `machinectl pull-tar` and related commands.

See [[systemd-importd(8).service|http://www.freedesktop.org/software/systemd/man/systemd-importd.service.html]] for more information.

## The Manager Object

The service exposes the following interfaces on the Manager object on the bus:

    node /org/freedesktop/import1 {
      interface org.freedesktop.import1.Manager {
        methods:
          ImportTar(in  h fd,
                    in  s local_name,
                    in  b force,
                    in  b read_only,
                    out u transfer_id,
                    out o transfer_path);
          ImportRaw(in  h fd,
                    in  s local_name,
                    in  b force,
                    in  b read_only,
                    out u transfer_id,
                    out o transfer_path);
          ExportTar(in  s local_name,
                    in  h fd,
                    in  s format,
                    out u transfer_id,
                    out o transfer_path);
          ExportRaw(in  s local_name,
                    in  h fd,
                    in  s format,
                    out u transfer_id,
                    out o transfer_path);
          PullTar(in  s url,
                  in  s local_name,
                  in  s verify_mode,
                  in  b force,
                  out u transfer_id,
                  out o transfer_path);
          PullRaw(in  s url,
                  in  s local_name,
                  in  s verify_mode,
                  in  b force,
                  out u transfer_id,
                  out o transfer_path);
          ListTransfers(out a(usssdo) list);
          CancelTransfer(in  u transfer_id);
        signals:
          TransferNew(u transfer_id,
                      o transfer_path);
          TransferRemoved(u transfer_id,
                          o transfer_path,
                          s result);
      };
      interface org.freedesktop.DBus.Peer {
      };
      interface org.freedesktop.DBus.Introspectable {
      };
      interface org.freedesktop.DBus.Properties {
      };
    };

### Methods

**ImportTar()** and **ImportRaw()** import a system image and place it into `/var/lib/machines/`. The first argument should be a file descriptor referring to the tar or raw file to import. It should reference either a file on disk or a pipe/socket. When `ImportTar()` is used the file descriptor should refer to a tar file, optionally compressed with gzip, bzip2 or xz. `systemd-importd` will detect the used compression scheme (or whether any is used at all) automatically. When `ImportRaw()` is used the file descriptor should refer to a raw or qcow2 disk image containing an MBR or GPT disk label, also optionally compressed with gzip, bzip2 or xz. In either case, if the file is specified as file descriptor on disk, progress information is generated for the import operation (since the size on disk is known then), if a socket or pipe is specified this is not available. The file descriptor argument is followed by a local name for the image. This should be a name suitable as a hostname and will be used to name the imported image below `/var/lib/machines`. A tar import is placed as directory tree or btrfs subvolume below `/var/lib/machines/`, under the name specified with no suffix appended. A raw import is placed as file in `/var/lib/machines/` with the `.raw` suffix appended. The `force` argument controls whether any pre-existing image with the same name shall be removed for the operation. If true, it is removed, if false the operation fails on a name conflict. Finally, the `read_only` argument controls whether to create a writable or read-only image. The two calls return immediately after invocation, with the import transfer ongoing. They return a pair of transfer identifier and object path, which may be used to retrieve progress information about the transfer, or cancel it. The transfer id is a simple numeric identifier, the object path references an `org.freedesktop.import1.Transfer` object, see below.
