## PHP-FPM

PHP-FPM includes an undocumented, internal socket-passing mechanism based on the `FPM_SOCKETS` environmental variable. It uses this to perform reloads without having to close and reopen its sockets, but it's also useful for socket activation.

This configuration is possible with any web server that supports FastCGI (like Apache, Lighttpd, or nginx). The web server does not need to know anything special about the socket; use a normal PHP-FPM configuration.

Paths are based on a Fedora 19 system.

### First, the configuration files

**/etc/php-fpm.d/my-php-fpm-pool.conf**

    [global]
    pid = /run/my-php-fpm-pool.pid ; Not really used by anything with daemonize = no, but needs to be writable.
    error_log = syslog             ; Will aggregate to the service's systemd journal.
    daemonize = no                 ; systemd handles the forking.
    
    [www]
    listen = /var/run/my-php-fpm-pool.socket  ; Must match systemd socket unit.
    user = nginx ; Ignored but required.
    group = nginx ; Ignored but required.
    pm = static
    pm.max_children = 10
    slowlog = syslog

**/etc/systemd/system/my-php-fpm-pool.service**

    [Service]
    User=nginx
    Group=nginx
    Environment="FPM_SOCKETS=/var/run/my-php-fpm-pool.socket=3"
    ExecStart=/usr/sbin/php-fpm --fpm-config=/etc/php-fpm.d/my-php-fpm-pool.conf
    KillMode=process

**/etc/systemd/system/my-php-fpm-pool.socket**

    [Socket]
    ListenStream=/var/run/my-php-fpm-pool.socket
    
    [Install]
    WantedBy=sockets.target

### Second, the setup commands

    sudo systemctl --system daemon-reload
    sudo systemctl start my-php-fpm-pool.socket
    sudo systemctl enable my-php-fpm-pool.socket

After accessing the web server, the service should be running.

    sudo systemctl status my-php-fpm-pool.service

It's possible to shut down the service and re-activate it using the web browser, too. The systemctl command should warn you that the socket is still listening.

    sudo systemctl stop my-php-fpm-pool.service
