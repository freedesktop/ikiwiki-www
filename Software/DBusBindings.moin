This page lists the language bindings for D-Bus, their status and, if appropriate, links to download them.

== GLib ==
You can find latest glib bindings in Freedesktop's [http://gitweb.freedesktop.org/?p=dbus/dbus-glib.git git repo].  To access with git:

 * users with commit access: git+ssh://git.freedesktop.org/git/dbus/dbus-glib
 * anonymous read only access: git://anongit.freedesktop.org/git/dbus/dbus-glib
[http://dbus.freedesktop.org/doc/dbus-glib/index.html API documentation]

'''The latest release is [http://dbus.freedesktop.org/releases/dbus-glib/dbus-glib-0.74.tar.gz dbus-glib-0.74.tar.gz]. (2007-06-27)'''

 * Init threading first to stop a warning from new GLib.
 * Remove the XML documentation support in configure
 * Fix typo in _dbus_gvalue_signals_error (#10837) (Thanks to Peter Kjellerstedt)
 * Update GLib requirement (Closes #10889).
 * Document dbus-gtype-specialized
 * Add simple test suite for peer objects.
 * Support peer-to-peer proxies. (Closes #10233).
 * Add dbus_connection_get_g_connection.
 * Stop compiler warnings (Closes #10374).
 * Handle dbus errors which are not name has no owner
 * Update abstract socket test from DBus, which now cross-compiles
 * Rename the error quark to be unique
 * Update AUTHORS
'''The previous release is [http://dbus.freedesktop.org/releases/dbus-glib/dbus-glib-0.72.tar.gz dbus-glib-0.73.tar.gz]. (2006-02-13)'''

 * Allow passing of NULL to strv out arguments.
 (Patch due to Luiz Augusto von Dentz < luiz.dentz@gmail.com >. Fixes bug #8795.)
 * Make uscore_to_wincaps return NULL when passed NULL. (Fixes bug #8318.)
 * Only respond to NameOwnerChanged if its one of our names. (Patch by Kimmo HÃ¤mÃ¤lÃ¤inen < kimmo.hamalainen@nokia.com >. Fixes bug #8235.)
 * Fix dbus-binding-tool to generate headers usable from C++.
 (Thanks to Christian Persch < chpe@gnome.org >. Fixes bug #6358.)
 * Only require --prefix for server side binding generation. (Fixes reopened bug #4185.)
 * Clarify documentation for dbus_g_method_get_sender. (Fixes #8832.)
 * Add new API for specifying the timeout in DBusGProxy calls.
 (Patch due to S. Nalliami < snallammai@novell.com >. Fixes  bug #9832.)
 * Don't check for libxml2 when expat not found. (Fixes bugs #9894 and #9000.)
 * Add configure flags --with-introspect-xml. (Fixes bug #9105)
 * Use dbus_threads_init_default() rather than using own threading primitives. (Fixes bug #9259.)
 * Reduce dependency to dbus version 0.93, error out if correct version
 not found. (Patch due to Luiz Augusto von Dentz < luiz.dentz@gmail.com >. Fixes bug #8793.)
 * Allow dbus and dbus-glib to live in different prefixes. (Fixes bug #9384.)
 * Add pkg-config support for uninstalled use.
 (Fix due to Damien Carbery < damien.carbery@sun.com >.  Fixes bug #9769.)v
== Python ==
The D-Bus Python bindings have been removed from the core. You can find latest Python bindings in Freedesktop's [http://gitweb.freedesktop.org/?p=dbus/dbus-python.git git repo].  It can be accessed via git at:

For users with commit access: git+ssh://git.freedesktop.org/git/dbus/dbus-python

For anonymous read only access: git://anongit.freedesktop.org/git/dbus/dbus-python

The current release is [http://dbus.freedesktop.org/releases/dbus-python/dbus-python-0.81.1.tar.gz dbus-python-0.81.1.tar.gz]. (2007-06-04)

Features:

 * When an Error message on the bus is represented as a DBusException, the
  . error name is copied into the exception and can be retrieved by get_dbus_name(). Exception handlers should use this instead of looking at the stringified form of the exception, unless backwards compatibility is needed.
 * DBusException objects now get all arguments from the Error message, not
  . just the first (although there will usually only be one). Use the 'args' attribute if you need to retrieve them.
 * The Connection, BusConnection and Bus classes have a method
  . list_exported_child_objects(path: str) -> list of str, which wraps dbus_connection_list_registered()
 * You can remove objects from D-Bus before they become unreferenced, by
  . using dbus.service.Object.remove_from_connection()
  (https://bugs.freedesktop.org/show_bug.cgi?id=10457)
Bug fixes:

 * Don't deadlock when removing a signal match that tracks name-owner changes.
  . (http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=426412)
 * Include child nodes in introspection using list_exported_child_objects()
The previous release was [http://dbus.freedesktop.org/releases/dbus-python/dbus-python-0.81.0.tar.gz dbus-python-0.81.0.tar.gz]. (2007-05-09)

This is a feature release with support for non-bus-daemon connections and improved GObject integration.

Features:

 * Bus has a superclass dbus.bus.BusConnection (a connection to a bus daemon,
  . but without the shared-connection semantics or any deprecated API) for the benefit of those wanting to subclass bus daemon connections
 * BusConnection has a superclass dbus.connection.Connection (a
  . connection without a bus daemon) for use in peer-to-peer situations, or distributed pseudo-bus situations without a bus daemon such as Telepathy's Tubes API
 * dbus.gobject_service.ExportedGObject is like dbus.service.Object, but
  . is also a subclass of GObject (with the necessary metaclass magic to make this work). Until someone has verified that the GObject side of things works as expected too, I consider this API to be potentially subject to change!
 * Connection and BusConnection have gained a number of useful methods,
  . including watch_name_owner (track name owner changes asynchronously, avoiding race conditions), call_blocking and call_async (blocking and asynchronous method calls without going via a proxy - note that these are semi-low-level interfaces which don't do introspection), and list_names, list_activatable_names and get_name_owner which are simple wrappers for the corresponding org.freedesktop.DBus methods
 * dbus.Interface (now also available at dbus.proxies.Interface)
  . and dbus.proxies.ProxyObject now have some reasonably obvious properties.
Deprecations:

 * All keyword arguments called named_service are deprecated in favour of an
  . argument called bus_name (to be compatible with both older and newer dbus-python, you should pass these positional arguments).
 * The bus keyword argument to dbus.proxies.ProxyObject is deprecated in
  . favour of an argument called conn, because proxies will work on non-bus connections now (again, for maximum compatibility you should use a positional argument for this).
 * No warning is raised for this, but I consider calling any remote method
  . on a ProxyObject or Interface whose name is either alllowercase or lower_case_with_underscores to be deprecated, and reserve the right to add properties or methods of this form in future releases - use ProxyObject.get_dbus_method if you must call a remote method named in this way. Methods named following TheUsualDBusConvention or theJavaConvention are safe.
Bugfixes:

 * Exceptions in signal handlers print a stack trace to stderr (this can
  . be redirected elsewhere with Python's logging framework). Partially addresses fd.o #9980.
 * The reserved local interface and object path are properly checked for.
 * When you return a tuple that is not a Struct from a method with no
  . out_signature, it's interpreted as multiple return values, not a single Struct (closes fd.o #10174).
 * If send_with_reply() returns TRUE but with pending call NULL, dbus-python
  . no longer crashes. This can happen when unexpectedly disconnected.
 * Arguments are not examined for functions declared METH_NOARGS (this is
  . unnecessary and can cause a crash).
Other notable changes:

 * dbus-python uses the standard Python logging framework throughout.
  . The first time a WARNING or ERROR is generated, it will configure the logging framework to output to stderr, unless you have already configured logging in your application.
 * The tutorial now advocates the use of add_signal_receiver if all you
  . want to do is listen for signals: this avoids undesired activation, e.g. of Listen or Rhythmbox (!). Addresses fd.o #10743, fd.o #10568.
== Java ==
There are now three versions of Java D-Bus. Since version 2.0 it has been a complete native implementation of the protocol and not a wrapper around the reference implementation. 1.x versions are feature-complete bindings around the reference implementation, but only work with 1.5-compatible VMs (Currently only Sun). There are older 1.4-compatible bindings which are feature incomplete and have not had much optimization work. See below if you want to try these.

Java D-Bus is hosted in freedesktop.org's [http://gitweb.freedesktop.org/?p=dbus/dbus-java.git git repository] and can be accessed:

For users with commit access: git+ssh://git.freedesktop.org/git/dbus/dbus-java

For anonymous read only access: git://anongit.freedesktop.org/git/dbus/dbus-java

'''The latest release is [http://dbus.freedesktop.org/releases/dbus-java/dbus-java-2.2.tar.gz dbus-java-2.2.tar.gz]. (2007-03-31)'''

 * Fix cross-test to pass.
 * Fix DBusViewer.sh *again* (Spotted by Serkan Kaba <serkan_kaba -at- yahoo -dot- com>)
 * Add DBusCall
 * fix CreateInterface to put DBusException in the right package in import statements. Spotted by Steve Crane <Steve -dot- Crane -at- rococosoft -dot- com>
 * Update Cross-test to new spec
 * Change casting and return types for get{Peer,}RemoteObject calls to use generics so you don't need explicit casts on return types. Suggested by Philippe Marschall <philippe -dot- marschall -at- gmail -dot- com>.
 * Test with multiple requested (same actual) connection
 * Add async-with-callback API.
'''The previous release is [http://dbus.freedesktop.org/releases/dbus-java/dbus-java-2.1.tar.gz dbus-java-2.1.tar.gz]. (2007-01-04)'''

 * make scripts with $JAVA
 * fix DBusViewer.sh (Spotted by Luigi Paioro <luigi -at- lambrate -dot- inaf -dot- it>
The last release binding the reference implementation is [http://dbus.freedesktop.org/releases/dbus-java/libdbus-java-1.13.tar.gz libdbus-java-1.13.tar.gz].

Documentation and API reference for the Java implementation of D-Bus is [http://dbus.freedesktop.org/doc/dbus-java/ here].

The older 1.4-compatible bindings are still available [http://www.matthew.ath.cx/projects/java here].

The Maintainer is Matthew Johnson < dbus@matthew.ath.cx >

== Qt4 ==
The D-Bus bindings for Qt4 are distributed alongside Qt itself, starting with version 4.2. The latest release can be found at http://www.trolltech.com/developer/downloads/qt/index. More recent versions can be found in Qt's [http://www.trolltech.com/developer/downloads/qt/snapshots nightly snapshots].

== Perl ==
The Perl bindings currently work on any Perl >= 5.8.x and any D-Bus version from 0.33.0 onwards.  They can be downloaded from [http://search.cpan.org CPAN] under the [http://search.cpan.org/~danberr/Net-DBus-0.33.3/ Net-DBus] module:

 * [http://search.cpan.org/CPAN/authors/id/D/DA/DANBERR/Net-DBus-0.33.3.tar.gz Net-DBus-0.33.3.tar.gz]
 * [http://search.cpan.org/~danberr/Net-DBus-0.33.3/lib/Net/DBus.pm API documentation]
 * [http://search.cpan.org/~danberr/Net-DBus-0.33.3/lib/Net/DBus/Tutorial.pod Tutorials]
The maintainer is [http://search.cpan.org/~danberr/ Daniel P. Berrange], and the source code is managed in a Mercurial repository at http://hg.berrange.com/libraries/net-dbus--devel

== C++ ==
[:Software/dbus-cpp:dbus-cpp] was started almost three years ago to provide a C++ API for D-Bus, but is unfortunately abandoned since then. For this reason PaoloDurante wrote a pure C++ binding while working on the [http://dev.openwengo.com/ OpenWengo] softphone.

You can browse the code via [http://dev.openwengo.org/trac/openwengo/trac.cgi/browser/wengophone-ng/branches/wengophone-dbus-api/libs/dbus trac] or download the latest subversion snapshot with

 . ''svn --username guest --password guest --non-interactive co `http://dev.openwengo.org/svn/openwengo/wengophone-ng/branches/wengophone-dbus-api/libs/dbus/`''
== Pascal ==
Pascal bindings are in progress and details can be found [http://www.freepascal.org/wiki/index.php/FPC_and_DBus here].

== Qt3 ==
There is a Qt3 backport of the Qt4 bindings available under [http://websvn.kde.org/branches/work/dbus-qt4-qt3backport/ WebSVN@KDE] and [http://people.freedesktop.org/~krake/dbus-1-qt3/dbus-1-qt3-0.7.tar.gz Sources ca. 400 KB]

Check out through anonymous SVN is also avialable: ''svn co svn://anonsvn.kde.org/home/kde/branches/work/dbus-qt4-qt3backport''

API documentation can be found here: [http://people.freedesktop.org/~krake/dbus-1-qt3/api-docs/ API Docs]

The maintainer is Kevin Krammer < kevin.krammer@gmx.at >

== .NET ==
The .NET bindings located in the D-Bus GIT server is unmaintained. They are scheduled to be removed unless a maintainer steps up.  The have been split and placed in a [http://gitweb.freedesktop.org/?p=dbus/dbus-mono.git git repo] for anyone who would like to pick up maintainership. It can be accessed via git at:

For users with commit access: git+ssh://git.freedesktop.org/git/dbus/dbus-mono

For anonymous read only access: git://anongit.freedesktop.org/git/dbus/dbus-mono

For those interested in .NET support, the [http://www.ndesk.org/DBusSharp D-Bus Sharp] implementation provides an alternative and is in active development. D-Bus Sharp is not a binding to the reference implementation, but an alternative implementation of the D-Bus protocol.

== Ruby ==
Sven Herzberg was asked by a friend to develop dbus bindings for ruby. His git repository is located at: http://www.blaubeermuffin.de/rdbus.git

Jaime Atahualpa Lopez Sollano has started a project at rubyforge to create a pure ruby implementation of dbus. It can be found at http://pr-dbus.rubyforge.org. Right now, there are no releases, but the code can be downloaded from the subversion repository
