= Preamble =

Here are some easy things to do. If you are deeply skilled, please consider doing a little easy hack, to get used to the process. After that, if you can please moving on up to the more difficult tasks, leaving some of the easy tasks to others so they can get involved and achieve change themselves. The quicker you move up the pile, the more quickly you can be making large scale, user-visible changes and improvements to LibreOffice - of which these easy hacks are just the tip of a very interesting iceberg: Welcome !

<<TableOfContents()>>

= Easy Hacks =

== find and remove German comments, translate if possible ==

'''Background''': The code is littered with German comments; some have little-to-no value such as:
{{{
    //    Beschreibung:	textuelle Beschreibung ermitteln
    String  SwDocStyleSheet::GetDescription(SfxMapUnit eUnit)
}}}
These guys just need removing. Others are more useful - these need translating. In general if a comment is obvious - ie. it just duplicates something that is clear from a next door method (as above) it should be removed. We should leave around issue numbers, usually of the form: i#12345 but not internal StarOffice bug tracker numbers (which have no i# prefix).

'''Skills''': grep, code reading, optional German-to-English translation, diff etc.

If you work on this task please write the directory, you are working in, in the table on the site [[Software/LibreOffice/EasyHacksTranslationOfComments|EasyHacksTranslationOfComments]]

== remove all the bogus comments lying around ==
'''Background:''' Almost no-one believed that revision control works, so we see things like:
{{{
    /* -----------------------------04.12.00 16:26--------------------------------
}}}
and
{{{
    #include <svx/svxdlg.hxx> //CHINA001
}}}
and
{{{
    // --> OD 2008-01-08 #newlistlevelattrs#
}}}

'''Skills:''' identifying bogus comments, and removing them.


== remove non-compiled / dead code ==
'''Background:''' There is tons of this lying around in the code. Apparently some developers don't believe in revision control. In calc, much un-used code is just commented out like this:
{{{
//UNUSED2008-05          if (nCount==1)
//UNUSED2008-05              return 0;                               // leer
}}}
	    all of this needs removing.

'''Skills:''' ability to identify and remove large sections of commented out /	compiled out code

== remove ineffectual emacs modeline remnants ==

If you find emacs modeline comments (like  \/* -*- Mode: C++; ...) '''in the middle of a file''' (i.e. not at the very top) - elide it.

== find / fix all German spellings in internal APIs ==
'''Background:''' There are a good number of misspelled methods.  For instance 'childs' should be children and 'menues' menus

'''Skills:''' grep, German, code reading

== Use new SAL_N_ELEMENTS macro ==
'''Background:''' In many places in the code a fixed array size is hard-coded. This is both buggy and un-necessary - it is easy to calculate this at compiletime with a macro: eg.
{{{
char *string_array[] = { "hello", "world" };
for (int i = 0; i < 2; i++) // broken style
for (int i = 0; i < sizeof(string_array)/sizeof(string_array[0]); i++) // old style
for (int i = 0; i < SAL_N_ELEMENTS(string_array); i++) // best style
}}}
We should grep for all uses of 'sizeof' - and replace suitable 'old style' ones with the new macro to clean them up.

'''Skills:''' grep 'sizeof.*\[' simple code editing, compilation

== add editor settings line to each source file ==
'''Background:''' Both vi and Emacs can read editor config from individual files. Would be cool to add that to most of the source files. Task is to write a script that does it, not actually send a patch.
    
{{{ 
    /* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */
    
    [ ... all the file's content ... ]
    
    /* vim:set shiftwidth=4 softtabstop=4 expandtab: */
}}}

'''Skills:''' Write a Perl/Python script that adds stuff to files of a certain type.

== hunt and destroy obsolete macros ==
'''Background:''' It is hard to know that a macro is no longer used, so they can pile up, cluttering the code, and scaring people. We need to use code search to look for obsolete ones, and remove them.

'''Skills:''' build, patience, code search

= Slightly more interesting hacks =

== use the CLang++ static analyser to find bugs ==
'''Background:''' There is a lovely static code analyser at http://clang-analyzer.llvm.org/scan-build.html A little work needs doing to integrate it with the build (or at least check that its interposing works). Then we need to analyse the results to turn them into lots of new easy-hacks. If you can already build LibreOffice, adding clang should be an easy extra step (though it requires a re-compile).

'''Skills:''' build, makefiles, simple C++, patience

== remove VOS library ==
'''Background:''' The VOS library has been obsolete for many years, but still lingers on in the codebase. Patches are in patches/dev300/vosremoval-* to remove it altogether, simplifying the code and speeding start-up. These need re-applying and building and some QA doing to test them. One fewer library means less seeking / reading at startup, and less obsolete code lying around.

'''Skills:''' build, C++

== remove PAM dependency ==
'''Background:''' The System Abstraction Layer (sal) library - has a PAM dependency to implement a method that is never used (except by VOS, which in turn is never used). We should keep that method around - but stripped of content (in theory sal has a stable ABI), and remove that pam dependency, and configure / makefile.mk code associated with it, see: http://lists.freedesktop.org/archives/libreoffice/2010-September/000130.html

'''Skills:''' build, grep, shell, perhaps dmake

== accelerate perl installer ==
'''Background:''' For now we use solenv/bin/make_installer.pl - with perl modules in solenv/bin/modules/installer/ to do our installation. Unfortunately it is extremely slow even on a fast machine. The perl is written without the benefit of a deep understanding of perl which makes it less efficient, and it also likes to spawn processes where native code would be better: eg. we fork 'chmod' ~700 times during an install - of ~1100 spawned processes. If we could replace the chmod spawning we should get a nice speed win. We need to (in general) retain the heap of perl to create MSI files on windows.

'''Skills:''' perl, building

== warning-free code ==
'''Background:''' Making code compile without warnings is a prerequisite for noticing errors in _new_ code.

'''Skills:''' building the beast, basic C++ skills (and the attitude to ask when in doubt)

== systray build progress tracker ==
'''Background:''' Building LibreOffice takes a long time - it would be nice (under Linux) to have a systray helper like jhbuild that can show you how far through we are. The code in jhbuild to do this is [[http://git.gnome.org/browse/jhbuild/tree/jhbuild/utils/trayicon.py here]] - it essentially spawns and talks to '''zenity'''. We should hack something similar into solenv/bin/build.pl - which should be able to tell us a rough guess: how many modules (of how many) are built thus far.

'''Skills:''' perl, shell

== cleanup (very) obsolete types ==
'''Background:''' There are a number of very obsolete types in use in the code-base.

* One is FASTBOOL (defined in [[http://opengrok.go-oo.org/xref/libs-gui/tools/inc/tools/solar.h#61|libs-gui/tools/inc/tools/solar.h]] which is deprecated and currently defined as int), which should be replaced with a 'bool' type. (But careful: sizeof(bool) = 1 sizeof(FASTBOOL) = 4.  So replacing one with the other may not always be trivial and the variable usage should be checked.)

'''Skills:''' build, search & replace.

== valgrind cleanliness ==
'''Background:''' There are a large number of memory mismanagement bugs around that leak memory, such as when closing documents, or leave threads around at exit. Identifying and fixing these areas should help improve robustness. A good start has been made by Caolan in [[http://qa.openoffice.org/issues/show_bug.cgi?id=112782 | issue 112782]].

'''Skills:''' build, C++, valgrind trace reading [ help available ], fix UMRs etc.

== cppcheck cleanliness ==
'''Background:''' There is a great tool: http://sourceforge.net/projects/cppcheck/ that can help identify bad-looking pieces of code. We should run the latest version on the codebase, identify false positives, and clean the code to fix bugs, and avoid warnings.

'''Skills:''' build, simple C++

== un-screw-up accessible icon code-paths & shrink theme files ==
'''Background:''' Whomever added the accessibility icon theming code created a limited solution of un-necessary complexity. Then real theming was introduced. We should remove the un-necessary !BmpColorMode code paths. We should also remove the redundant high-contrast icons from all the themes (retaining the discrete high-contrast theme itself of course) - that means moving all the lch_ and sch_ variants in default_images/res/commandimagelist (and similar icons) into a new directory in ooo_custom_images - and stripping all mention of them from the .src and .hrc files.

'''Skills:''' build, C++

== unit test writing ==
'''Background:''' Many parts of OO.o have no unit tests, creating these gives far greater confidence around re-factoring. Some great places for these would be against the spreadsheet.

'''Skills:''' simple C++ programming

== call-catcher / bloat removal ==
'''Background:''' A certain amount of code is simply not used in OO.o. We have a tool to identify this called 'callcatcher', yet its results need some investigation and patches need to be created to remove truly unused methods.

'''Skills:''' building, simple C++ programming

== change make test to make check all over the place ==
'''Background:''' Align !LibreOffice makefile targets with FLOSS conventions.

'''Skills:''' grep, Makefile reading

== audit / remove SvStream long operators ==
'''Background:''' the SvStream class has many operators used for creating binary streams, some of these are not particularly helpful - using 'long' for example, is confusing, as long can have a different size on different platforms, and the stream will serialize only the 4 bytes of it. We should remove these SvStream methods, find and replace callers with an explicit sal_uInt32 cast, call.

'''Skills:''' building, simple C++ programming

== align ASSERT (& friends) macro foo ==
'''Background:''' Two families of debug type macros exist in the openoffice code base, the OSL family ( OSL_TRACE, OSL_ASSERT, OSL_ENSURE etc. ) defined http://opengrok.go-oo.org/xref/ure/sal/inc/osl/diagnose.h and the DBG family ( DBG_ASSERT, DBG_TRACE etc. ) defined http://opengrok.go-oo.org/xref/libs-gui/tools/inc/tools/debug.hxx. The OSL family of macros are enabled when you build with debug ( --enable-debug configure option ) and the DBG family with ( --enable-dbgutil ) The OSL family should be considered to be the desired variant. Some local ASSERT variants also exist such as 'ASSERT & ASSERT_ID' http://opengrok.go-oo.org/xref/writer/sw/inc/errhdl.hxx#58, these should be replaced with OSL_ASERT. Also in there is VOS_ASSERT ( which is actually defined to be OSL_ASSERT ) Directly replacing occurrences of VOS_ASSERT with OSL_ASSERT should also be done. Eventually we should remove/replace the DBG family of macros with OSL variants.
 
'''Skills:''' building, simple C++ programming

= Easy Programming tasks =

== Fuzz XML file filters ==
'''Background:''' The XML file filters are protected from casual binary fuzzing by the zip de-compression, and the XML parser - thus they get little real, hard-core testing. Morten Welinder (of gnumeric fame) has written a nice, simple perl XML fuzzer - which you can find here: http://git.gnome.org/browse/gnumeric/tree/test/fuzzxml - the idea is to get a complex, existing XML document - and to swap it about randomly into a new one, then load that inside LibreOffice, and see if it crashes - if it does; file a bug report with the file (or fix the crash). You will need to unzip, fuzz, and re-zip up an ODF file (which requires the mimetype as the first entry, and no compression ie zip -0).

'''Skills:''' shell, basic XML experience, optionally bit of debugger

== re-work build system to build out of git repos ==
'''Background:''' Currently we have a mess - whereby we have to rsync the contents of the git repositories into build/ in a different order to build from them. This should not be incredibly difficult - it is mostly a matter of tweaking solenv/bin/build.pl - so it knows where to find the directories, and in particular the solver - and putting the solver at the top-level (of course there is probably more detail than that). Some macros in solenv/inc/ will need tweaking too.

The current build flow goes like this.  When running make, the bin/unpack script copies the entire tree from rawbuild into build/libreoffice-<version>/ via rsync, and the build process continues in that second directory.  We want the build process to skip this rsync and continue directly in the rawbuild directory instead.

Files of interest:

  * bin/unpack - copies source tree from rawbuild to build/libreoffice-<version>/.
  * clone/bootstrap/solenv/bin/build.pl - main build script.
  * clone/bootstrap/solenv/inc/ - includes various macros that need tweaking.

'''Skills:''' perl scripting, dmake tweakering, patience.

== add coverage analysis to unit tests ==
'''Background:''' Feedback loop in testing is missing, we need to add that. Example is here:
            http://developer.digitalstrom.org/redmine/wiki/dss/Generate_coverage_report

'''Skills:''' shell scripting, Makefile reading

== Removal/Replacement of the String/UniString/ByteString with OUString/OString once and for all. ==
'''Background:''' OO.o uses duplicate string classes, and should not. The 'old' !UniString class is limited to 64k, yet has many more helpful helper methods. We need to create similar helper methods for OUString and port the existing code to use the basic string class. We should write unit tests in parallel to ensure that nothing breaks.

'''Skills:''' building, coding, writing unit tests, etc.

== Reduce power consumption: timers must end eventually. ==
'''Background:''' We have a lot of timers, which constantly fire endlessly once started (calc has a particularly nasty one). So we chew up battery life on laptops when we're idling. When we're idle we should, after a short enough time, actually go idle and not wake up the laptop constantly. That means removing any leaked timers properly. This is a matter of tracking pending timers, and verifying that they are sensible, adding some infrastructure to help with this would be good too.  See [[http://qa.openoffice.org/issues/show_bug.cgi?id=106485 | issue 106485]].

'''Skills:''' building, C++

== build with strict-aliasing ==
'''Background:''' GCC compiler developers believe we can get performance benefits from gcc's -fstrict-aliasing flag. Finishing the work already started on this and merging it would be useful (see [[http://qa.openoffice.org/issues/show_bug.cgi?id=101100 | issue 101100]]). This entails identifying and fixing sites that generate related warnings.

'''Skills:''' building, C++

== strip out non-trivial globals before main ==
'''Background:''' Ordering and running constructors at startup consumes CPU time. Anything larger than a simple string should be switched to use the singleton pattern in 'sal' for this case. Any variable marked 'static' is potentially a problem.

'''Skills:''' build, simple C++

== 16-bit unicode string literals ==
'''Background:''' Our ASCII string handling is slow and inefficient. C++0x introduces [[http://en.wikipedia.org/wiki/C++0x#New_string_literals|u"UTF-16 string literals" (Wikipedia)]] and see icu/source/common/unicode/unistr.h and icu/source/common/unicode/platform.h for hackery for other platforms. mozilla even uses -wshort-wchar and L"string literals", though the standard approach is better. To implement this, we should add a SAL_STRING_STATIC_FLAG to create rtl_uStrings with, and instrument rtl_uString_assign - to deep copy these when necessary.

'''Skills:''' build, C++

== get rid of useless Win9x support ==
'''Background:''' We have some code to support Windows 9x by providing emulated wide-character Win32 APIs etc. That is not needed, we should just use the wide-character APIs directly.

'''Skills:''' Win32, building

== get rid of obsolete manual templates such as DECLARE_LIST ==
'''Background:''' before the wonderful world of templates and STL (all those years ago), standard pre-processor based generics were created. These still litter the code, and need replacing with STL equivalents. see tools/inc/tools/list.hxx etc.

'''Skills:''' building, simple C++, care in re-factoring

== add slide thumbnails to HTML export ==
'''Background:''' for a long time we've had a nice slide-gallery feature for HTML export lurking around in patches/test/sd-export-html-thumbnails.diff - it needs resurrecting, applying, testing, whatever polish we can give it, and including.

'''Skills:''' building, simple C++, ability to grok HTML.

= Programming Tasks =

== PackageKit / Help integration ==
'''Background:''' currently many Linux distributions package help separately, since it is incredibly bulky. will not fit on a live-CD etc. It would be great to detect and trap those entry points (eg. sfx2/source/appl/appserv.cxx /SID_HELPINDEX/  -> vcl/inc/vcl/help.hxx) and allow PackageKit to be used to install the apropriate (localised) help if it is not present. Similarly it would be good to present a web fallback if not running on Linux. We should most likely integrate with PackageKit directly via its dbus interface to avoid desktop dependencies.

'''Skills:''' building, simple C++

== default to sqlite not hsqldb ==
'''Background:''' currently when creating a local database we default to this Java database engine. That is somewhat unfortunate. It would be better to default to a sqlite provider - unfortunately we don't have one. So - it needs writing (see connectivity/source/drivers/*) - and then the default changing.

'''Skills:''' building, C++ hacking


= Hacking help =

If you need to search constructs in the code, there is a code search engine at http://opengrok.go-oo.org/
