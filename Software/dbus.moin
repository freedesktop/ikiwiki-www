||<tablewidth="40%" tablestyle="FONT-SIZE: 0.9em; FLOAT: right; MARGIN: 0pt 0pt 1em 1em"style="PADDING-RIGHT: 0.5em; PADDING-LEFT: 0.5em; PADDING-BOTTOM: 0.5em; PADDING-TOP: 0.5em">'''Contents'''<<BR>><<TableOfContents>> ||
= What is D-Bus? =
D-Bus is a message bus system, a simple way for applications to talk to one another. In addition to interprocess communication, D-Bus helps coordinate process lifecycle; it makes it simple and reliable to code a "single instance" application or daemon, and to launch applications and daemons on demand when their services are needed.

D-Bus supplies both a system daemon (for events such as "new hardware device added" or "printer queue changed") and a per-user-login-session daemon (for general IPC needs among user applications). Also, the message bus is built on top of a general one-to-one message passing framework, which can be used by any two apps to communicate directly (without going through the message bus daemon). Currently the communicating applications are on one computer, or through unencrypted TCP/IP suitable for use behind a firewall with shared NFS home directories. (Help wanted with [[Software/DBusRemote|better remote transports]] - the transport mechanism is well-abstracted and extensible.)

The D-Bus [[http://dbus.freedesktop.org/doc/api/html/index.html|low-level API reference implementation]] and [[http://dbus.freedesktop.org/doc/dbus-specification.html|protocol]] have been heavily tested in the real world over several years, and are now "set in stone." Future changes will either be compatible or versioned appropriately.

The low-level libdbus reference implementation has no required dependencies; the bus daemon's only *required* dependency is an XML parser (either libxml or expat). Higher-level bindings specific to particular frameworks (Qt, GLib, Java, C#, Python, etc.) add more dependencies, but can make more assumptions and are thus much simpler to use. The bindings evolve separately from the low-level libdbus, so some are more mature and ABI-stable than others; check the docs for the binding you plan to use.

There are also some reimplementations of the D-Bus protocol for languages such as C#, Java, and Ruby. These do not use the libdbus reference implementation.

It should be noted that the low-level implementation is not primarily designed for application authors to use. Rather, it is a basis for binding authors and a reference for reimplementations. If you are able to do so it is recommended that you use one of the higher level bindings or implementations. A list of these can be found on the [[Software/DBusBindings|bindings page]].

The [[Software/DbusProjects|list of projects using D-Bus]] is growing and they provide a wealth of examples of using the various APIs to learn from.

D-Bus is very portable to any Linux or UNIX flavor, and a port to Windows is in progress.

If you have any trouble with D-Bus or suggestions for improvement, bug reports and comments are very welcome.

Get on D-Bus today!

= Mailing List =
All D-Bus discussion is currently on [[http://lists.freedesktop.org/mailman/listinfo/dbus/|dbus@lists.freedesktop.org]].

= Reporting Bugs & Sending Patches =
Please report bugs (and submit patches) through the freedesktop.org [[https://bugs.freedesktop.org/|Bugzilla]].

Ideally, include test suite coverage with your patch; or if you report a bug, it's good to add a test that fails even if you don't have a patch otherwise. You can see test coverage stats in the GNOME build bot results, at http://build.gnome.org:8080/coverage/dbus/lcov/ (note, coverage is understated since it counts the test code itself in the coverage, and the test suite does not test itself, in particular all the "test failed" codepaths are not covered).

Patches to improve test coverage are very welcome, though D-Bus is already among the best-covered codebases around.

= Documentation =
Some stuff from the doc/ subdirectory is prebuilt and browsable here. If you're new to D-Bus, the tutorial is probably the best place to start (even though it is very incomplete, the basics are covered).

Generic D-Bus protocol information:

 * [[http://dbus.freedesktop.org/doc/dbus-specification.html|D-Bus specification]]
 * [[IntroductionToDBus|An introduction to the basics]] by Jeroen Vermeulen
 * [[http://doc.trolltech.com/4.2/intro-to-dbus.html|Introduction to D-Bus]] from the Qt documentation
 * [[http://dbus.freedesktop.org/doc/dbus-faq.html|FAQ]]
 * Overview picture [[http://dbus.freedesktop.org/doc/diagram.png|png]] [[http://dbus.freedesktop.org/doc/diagram.svg|svg]]
 * [[http://dbus.freedesktop.org/doc/dbus-tutorial.html|D-Bus tutorial (incomplete, has stuff on several bindings and reimplementations)]]
 * [[http://dbus.freedesktop.org/doc/busconfig.dtd|Config file DTD]]
 * If you are confused about some of the concepts in DBus, look at [[Software/DBusAnalogy|some analogies]]
Please note that the D-Bus spec is incomplete, especially in its description of the message bus daemon. The spec for the protocol itself is reasonably complete, though not always clear or precise. Your patches are welcome! In the meantime, you may need to supplement your reading of the spec with a reading of the reference implementation source code.

Docs specific to the reference implementation:

 * [[http://dbus.freedesktop.org/doc/api/html/index.html|API reference manual for the reference implementation (libdbus)]]
 * [[http://dbus.freedesktop.org/doc/dbus/api/html/todo.html|@todo items from reference implementation manual]] and high-level [[http://dbus.freedesktop.org/doc/TODO|TODO]]
 * [[http://dbus.freedesktop.org/doc/dbus/api/html/files.html|Browse reference implementation source]]
 * [[http://dbus.freedesktop.org/doc/dbus-daemon.1.html|dbus-daemon(1)]] (includes configuration file docs)
 * [[http://dbus.freedesktop.org/doc/dbus-send.1.html|dbus-send(1)]] [[http://dbus.freedesktop.org/doc/dbus-monitor.1.html|dbus-monitor(1)]] [[http://dbus.freedesktop.org/doc/dbus-launch.1.html|dbus-launch(1)]] [[http://dbus.freedesktop.org/doc/dbus-uuidgen.1.html|dbus-uuidgen(1)]]
 * [[http://dbus.freedesktop.org/doc/HACKING|HACKING]] [[http://dbus.freedesktop.org/doc/AUTHORS|AUTHORS]]
 * [[http://dbus.freedesktop.org/doc/NEWS|NEWS]] [[http://dbus.freedesktop.org/doc/ChangeLog|ChangeLog]] [[http://dbus.freedesktop.org/doc/README|README]]
 * [[http://dbus.freedesktop.org/doc/dbus-test-plan.html|Test plan]]
 * [[http://www.freedesktop.org/software/dbus/dbus-docs.tar.gz|Tarball]] with most of the above docs.
Keep in mind that libdbus is a low-level library, intended to be the backend for a language binding and with extra complexity needed to implement dbus-daemon. You will save yourself a lot of pain if you use a higher-level wrapper or a reimplementation. Documentation of these is usually linked from the [[Software/DBusBindings|bindings page]].

Articles from around the web, including some tutorials:

 * [[http://www-128.ibm.com/developerworks/linux/library/l-dbus.html?ca=dgr-lnxw95D-BUS|"Connect desktop apps using D-BUS" (IBM developerWorks)]] by Ross Burton (July 2004)
 * [[http://www.redhat.com/magazine/003jan05/features/dbus/|"Get on D-BUS" (Red Hat Magazine)]] by John Palmieri (January 2005)
 * [[http://www.linuxjournal.com/article/7744|"Get on the D-BUS" (Linux Journal)]] by Robert Love (January 2005)
 * [[http://raphael.slinckx.net/dbustutorial.php|"The DBus missing tutorial - DBus Activation"]] by RaphaÃ«l Slinckx (2005)
 * [[http://dbus.freedesktop.org/doc/dbus/libdbus-tutorial.html|D-Bus Low-Level API Tutorial]] by Matthew Johnson (Nov 2005)
 * [[http://techbase.kde.org/Development/Tutorials/D-Bus/Introduction|Introduction To D-BUS]] by Aaron Seigo & KDE community (2007)
= Download =
== Reference Implementation (dbus-daemon and libdbus) ==

 * The current '''stable''' release is [[http://dbus.freedesktop.org/releases/dbus/dbus-1.4.6.tar.gz|D-Bus 1.4.6]]. (2011-02-17)
 * The current '''legacy''' release is [[http://dbus.freedesktop.org/releases/dbus/dbus-1.2.26.tar.gz|D-Bus 1.2.26]]. (2010-12-21)
 * There is no current development release yet.

== DBus 1.4.6 ==
This release is the current stable version of D-Bus.  It is the reference implementation for version 0.14 of the specification.

See the [[http://lists.freedesktop.org/archives/dbus/2011-February/014122.html|1.4.6 Release announcement]].

For a list of new features, please see the [[http://dbus.freedesktop.org/doc/NEWS|NEWS file]] in the package.

Contributors to this release are: Alban Crequy, Christian Dywan, Colin Walters, Cristian Rodríguez, Lennart Poettering, Marcus Brinkmann, Matthias Clasen, Mike McQuaid, Pau Garcia i Quiles, Ralf Habacker, Richard A. Hankins, Simon McVittie, Will Thompson, Wulf C. Krueger

== DBus 1.2.26 ==

See the [[http://lists.freedesktop.org/archives/dbus/2010-December/013867.html|1.2.26 Release announcement]].

== Permissive Stream, DBus 1.2.4.6permissive ==
The dbus 1.2 stable branch has been split into two streams. The "1.2.4Xpermissive" branch originates from 1.2.4, and maintains the unintended permissive default for messages. Releases after 1.2.4 (1.2.6+) have a default deny. It is intended that the permissive branch only be used temporarily by vendors. For more information, see [[http://lists.freedesktop.org/archives/dbus/2008-December/010769.html|this mail]]. The current development version is based on the primary (not permissive) branch: it is expected that vendors will have fixed the problems created by the unintended defaults. 

Contributors to this release: Federico Mena Quintero, Eamon Walsh, Colin Walters, Tomas Hoger, Marc Mutz, Xan Lopez, Johan Gyllenspetz.

Changes in 1.2.4.6permissive:

 * Bug 17803 - Fix both test case and validation logic [CVE-2009-1189]

Previous releases can be found in the [[Software/DbusReleaseArchive|release archive]].

== DBus 1.0.3 ==
The legacy 1.0.x branch is still supported but only for security fixes.  Only use this version when upgrading from older stable releases.  For all new development use the new stable releases.

The latest legacy release is [[http://dbus.freedesktop.org/releases/dbus/dbus-1.0.3.tar.gz|D-Bus 1.0.3]]. (2008-02-27)

 * Fixed CVE-2008-0595 - security policy of the type <allow send_interface="some.interface.WithMethods"/> work as an implicit allow for messages sent without an interface bypassing the default deny rules and potentially allowing restricted methods exported on the bus to be executed by unauthorized users.
 * correctly unref connections without guids during shutdown
 * don't mess with message from message cache outside of the cache lock
 * avoid trying to protect individual bits in a word with different locks  
 * fix to allow a server to use port=0 or omit port so the port can be auto-selected by the OS
 * add session.d for the session bus, so security policy can be extended
 * capture the dbus-launch stderr output and add it to the DBusError message we return.
 * add option --close-stderr to close stderr before starting dbus-daemon
 * session bus now has higher limits by default

== Bindings and Independent Implementations ==
Bindings and independent implementations are linked to from the [[Software/DBusBindings|Bindings Page]].

A binding wraps libdbus (and thus automatically gets e.g. new authentication mechanisms and other additions to libdbus), while a reimplementation codes the protocol from scratch (and thus avoids a dependency on the libdbus C library, but has to be kept in sync with new features). We are working on a hybrid approach where libdbus can be used to set up connections but bindings don't use the message queue or message marshaling from libdbus.

= Windows port =
The Windows port from the windbus and dbus4win projects has been merged into the freedesktop dbus development branch and the spec has been updated with windows specific stuff. Many thanks to the people who worked on the windows port (in alphabetic order): 

Marcus Brinkmann, Nguyễn Thái Ngọc Duy, Christian Ehrlicher, Peter Kümmel, Tor Lillqvist, Ralf Habacker, 
Frank Osterfeld, Marc Mutz, Romain Pokrzywka, Ole André Vadla Ravnås, Sebastian Sauer 	

Everyone interested in having stable dbus on windows is invited to test the implementation, to reports bugs and/or to file patches. 

= Grab the Source =

The core dbus code and the language bindings are under version control using Git.  There is a [[http://freedesktop.org/wiki/Infrastructure/git|nice tutorial for using git with freedesktop.org projects]]. There is also [[http://www-128.ibm.com/developerworks/linux/library/l-git/|another tutorial at IBM Developerworks site]].

All components of dbus are in the dbus/ subdirectory.

[[http://gitweb.freedesktop.org/?p=dbus/dbus.git;a=summary|View the reference implementation in gitweb]]

Anonymous git for reference implementation: git://anongit.freedesktop.org/git/dbus/dbus

Developer git for reference implementation: ssh://git.freedesktop.org/git/dbus/dbus
