[[!inline pages="Software/PulseAudio/TOC" quick="yes" raw="yes"]]

# Bluetooth

PulseAudio depends on [[BlueZ|http://www.bluez.org]] for all Bluetooth functionality, and additionally [[oFono|https://01.org/ofono]] is required for HFP support.

## Profiles

The bluetooth standard specifies three audio profiles. Don't confuse these with the "card profile" concept in PulseAudio. A bluetooth device shows up in PulseAudio as a card, and the card will have some set of profiles depending on what bluetooth profiles the device supports, but the "bluetooth profile" <-> "card profile" mapping is not one-to-one. The three bluetooth profiles are:

* A2DP (Advanced Audio Distribution Profile) - high-quality audio playback, appropriate for e.g. listening to music.
* HSP (HeadSet Profile) - phone-quality audio playback and recording, appropriate for phone calls.
* HFP (Hands-Free Profile) - same as HSP, but with additional functionality for managing phone calls.

Each of the profiles are further divided into two roles:

* A2DP:
  * Source role - the device that sends audio.
  * Sink role - the device that receives audio.
* HSP:
  * Audio Gateway role - the device that the headset is connected to. The HSP profile is typically used in phone calls, and this is the device that is connected to the cellular network (for cellular phone calls) or to the internet (for VoIP calls). Typically a cellular phone or a personal computer.
  * Headset role - the headset, obviously. This is where the speakers and microphone are.
* HFP:
  * Audio Gateway role - the device that the hands-free device is connected to. The HFP profile is typically used for cellular phone calls, and this is the device that is connected to the cellular network. Typically a cellular phone.
  * Hands-Free Unit role - the device with the speakers and microphone.

## A2DP

PulseAudio supports A2DP in both source and sink roles. When PulseAudio acts in the source role, a sink is created where applications can play to. When PulseAudio acts in the sink role, a source is created where applications can record from.

A2DP works generally without a hassle, although when watching videos, the audio can get badly out of sync. It seems that in case of transmission problems (weak signal, or out of signal range) the kernel can buffer quite a lot of audio. PulseAudio doesn't know how much the kernel has audio buffered, so PulseAudio can neither report the latency accurately, nor wait until the kernel buffer fill level goes down to a more reasonable level. We currently lack a person who would have both the time and the skills to resolve this problem. Help would be greatly appreciated. Here's a bug report about this issue: [[https://bugs.freedesktop.org/show_bug.cgi?id=95411]].

## HSP

PulseAudio supports HSP only in the audio gateway role, so headsets can be used with PulseAudio, but PulseAudio can't act as a headset. (With BlueZ 4 both roles are supported, but almost everyone uses BlueZ 5 nowadays.) With the "Headset Head Unit (HSP/HFP)" card profile selected, PulseAudio will create a sink and a source that applications can use to play back and record audio.

The HSP implementation in PulseAudio is mutually exclusive with the HFP implementation, so users have to choose which one is more important to them. There's no reason why the two profiles absolutely have to be mutually exclusive, but that's the way it is for now.

HSP support is enabled by passing argument "headset=native" to module-bluetooth-discover in /etc/pulse/default.pa. Or the argument can be omitted, because HSP is enabled by default.

The headset role will eventually be supported too. In fact, there's already a patch for that: [[https://lists.freedesktop.org/archives/pulseaudio-discuss/2015-February/023242.html]]. Arun reviewed the patch, and there was something to fix in the patch, but the feedback was given in IRC, so the details are not archived. No new version of the patch has been submitted. Contact Arun Raghavan and Wim Taymans if you want more information about this, or if you want to help finishing the work.

## HFP

PulseAudio supports HFP only in the hands-free unit role (opposite to the situation with HSP), so PulseAudio can connect to a mobile phone, but not to headsets and other hands-free devices. With the "Headset Audio Gateway (HSP/HFP)" card profile selected, PulseAudio will create a sink and a source that applications can use to play back and record audio - or more commonly, the bluetooth sink and source will be connected with module-loopback to speakers and a microphone device. Note that the "Headset Audio Gateway (HSP/HFP)" card profile is typically automatically activated by module-bluetooth-policy when the phone initiates audio streaming.

The HFP specification recommends that it's always the AG side that initiates the audio streaming, so it doesn't seem like a good idea to manually activate the HFP profile from PulseAudio side. The rationale for doing the initiation always from the AG side is that the network may or may not support

As mentioned in the HSP section, support for HFP and HSP are currently mutually exclusive. HFP support is enabled by passing argument "headset=ofono" to module-bluetooth-discover in /etc/pulse/default.pa.

The audio gateway role will hopefully be supported too in the future, as well as simultaneous support for HSP and HFP. Simon Fels has done some work on both of these things: [[https://github.com/morphis/pulseaudio/commits/master-bt-fixes]]. Those patches have not yet been submitted to upstream, however.

## Using HFP with oFono

In typical desktop environments, connecting to a mobile phone with HFP isn't totally plug-and-play. The device has to be manually enabled in oFono first. To do that, get the oFono source code, which includes some test scripts that can be used to interact with oFono. First, run

    test/list-modems

That will list all modems (the phone will appear as a "modem" in oFono), look for the one with Type=hfp. Then, assuming that the phone is on path /hfp_path, run

    test/enable-modem /hfp_path

To disable the device, use this command:

    test/disable-modem /hfp_path

While the device is enabled, you can test that audio works by calling someone using the phone. You can also try to command the phone to make the call from your computer with this command:

    test/dial-number /hfp_path 12345

To hangup all ongoing calls, this command can be used:

    test/hangup-all /hfp_path

## Troubleshooting

### The "Protocol not supported" problem

There was some regression in the kernel that was introduced in 3.12 and fixed in 3.18 that caused failure when trying to activate HSP/HFP with some headsets. This problem can be identified by this error message in pulseaudio log:

backend-native.c: connect(): Protocol not supported
