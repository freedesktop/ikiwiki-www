[[!inline pages="Software/PulseAudio/TOC" quick="yes" raw="yes"]]

# Developer Documentation

## Developing Clients

You may browse the [[Doxygen|http://www.doxygen.org/]] generated [[programming documentation|http://freedesktop.org/software/pulseaudio/doxygen/]] for the client API. (Run make doxygen to generate this documentation from the source tree).   

If you want to write a volume control application, [[make sure to read this|Software/PulseAudio/Documentation/Developer/Clients/WritingVolumeControlUIs]]. 

**Also, make sure to set properties on all PA connections, [[make sure to read this|Software/PulseAudio/Documentation/Developer/Clients/ApplicationProperties]].** 

**Finally, [[make sure you know everything about latency control|Software/PulseAudio/Documentation/Developer/Clients/LatencyControl]]! ** 

Here are some examples that uses the async (complex) API, [[Sample Async Device List|Software/PulseAudio/Documentation/Developer/Clients/Samples/AsyncDeviceList]] and [[Sample Async Playback|Software/PulseAudio/Documentation/Developer/Clients/Samples/AsyncPlayback]]. 

### Talk to PA over D-Bus

Using the native protocol as described is the most common way to talk to PA, but PA can expose D-Bus interfaces as well:

* [[module-dbus-protocol API|http://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/Developer/Clients/DBus/]] - can be used if module-dbus-protocol is loaded
* [[Device reservation API|http://git.0pointer.net/reserve.git/tree/reserve.txt]] - if you need PA to give an ALSA sound card to you temporarily

## Developing PulseAudio

[[Instructions for building and installing the current development version.|Software/PulseAudio/Documentation/Developer/PulseAudioFromGit]]

[[Instructions for sending patches with `git send-email`.|Software/PulseAudio/HowToUseGitSendEmail]]

When working on PulseAudio, please mind the [[Coding Style|Software/PulseAudio/Documentation/Developer/CodingStyle]]. 


### Developing Modules

There are several reasons for writing loadable modules for PulseAudio: 

* Extended device driver support 
* Protocol support beyond ESOUND's protocol and the native protocol. (such as NAS or a subset of aRts) 
* New programming interfaces such as XMLRPC or DBUS for controlling the daemon. 
* Hooking audio event sources directly into PulseAudio (similar to `module-x11-bell`) 
* For low latency applications such as VOIP: load the VOIP core directly into PulseAudio and have a slim GUI frontend to control it. 
There is currently a little bit of documentation available on how to write loadable modules for PulseAudio. Beyond this, read the source, Luke! If you are interested in writing new modules feel free to contact the authors in case you have any questions. 

* [[Writing Modules|Software/PulseAudio/Documentation/Developer/Modules]] 
* [[Core API|Software/PulseAudio/Documentation/Developer/CoreAPI]] 
* [[Module API|Software/PulseAudio/Documentation/Developer/ModuleAPI]] 
* [[Module Arguments API|Software/PulseAudio/Documentation/Developer/ModuleArgumentsAPI]] 
* [[Threading Model|Software/PulseAudio/Documentation/Developer/Threading]] 
* [[A discussion about writing a sink|Software/PulseAudio/Documentation/Developer/IO]] 
* [[Rewinding explained|Software/PulseAudio/Documentation/Developer/Rewinding]] 
Some things that might be relevant for people hacking on specific modules: 
* [[Brief documentation on volumes|Volumes]]
* [[BlueZ issues/limitations list|Software/PulseAudio/Backends/Bluetooth/Issues]] 
* [[ALSA issues/limitations list|Software/PulseAudio/Backends/ALSA/Issues]] 

### Porting to other platforms

* [[Building the sources on Mac OS X|Software/PulseAudio/Ports/OSX]] 
