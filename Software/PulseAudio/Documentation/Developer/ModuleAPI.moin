= Interface of `pa_module` =

When you write a module, it can be thought as a subclass of `pa_module`, if you're familiar with the object oriented programming concepts. `pa_module` with its associated functions define some basic functionality that all the different modules include and refine. Let's see if there's any useful stuff in that basic functionality.

I'll walk you through the interface, see [http://www.pulseaudio.org/browser/branches/lennart/src/pulsecore/module.h pulsecore/module.h] for a more compact reference, and also for the complete definitions, as I won't repeat the field and function types here.

== `struct pa_module` ==

`core` -- Here you have a pointer to the core that the module is connected to.

`name` -- The name that was used when loading the module, i.e. the first argument to the "load-module" command.

`argument` -- The whole argument string that was given with the "load-module" command. You could parse this yourself, but it's better to use the available helper functions. See `pa_module_get_info` at the end of this page, and [wiki:ModargsAPI].

`index` -- Every loaded module is assigned an index in the core that is used as an unique identifier. If you're ever going to need the index for any purpose, note that it is set only after `pa__init` returns, so its value is undefined during the initialization.

`dl` -- Handle through which the module's symbols are loaded. You can probably ignore this.

`init` -- Pointer to the `pa__init` function.

`done` -- Pointer to the `pa__done` function.

`userdata` -- This is initially NULL. This field belongs completely to you, you store a pointer to your custom data in this variable and you take care of freeing it too.

`n_used` -- [What's this?]

`auto_unload` -- [What's this?]

`last_used_time` -- [What's this?]

`unload_requested` -- This is set to 1 when someone (might be you) wants to unload the module. Don't change this directly, use `pa_module_unload_request` instead.
