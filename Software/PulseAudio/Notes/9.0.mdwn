[[!inline pages="Software/PulseAudio/TOC" quick="yes" raw="yes"]]

# PulseAudio 9.0 release notes (draft)

## Changes at a glance

 * Automatic routing improvements
 * Beamforming and various other new features in the WebRTC echo canceller
 * Various improvements in module-role-cork and module-role-ducking
 * memfd-backed shared memory transport
 * Support for sample rates up to 384 kHz
 * webrtc-audio-processing dependency minimum version bumped to 0.2
 * Changed the C standard from C99 to C11.

## Notes for end users

### Automatic routing improvements

In 8.0, PulseAudio started to automatically switch to another profile when the device associated with the current profile is unplugged. That seemingly smart thing had some serious unintended consequences. One typical issue was that when unplugging headphones, PulseAudio might switch to S/PDIF output and not switch back to headphones when they are plugged in again. Another issue was that HDMI in many cases appears to get temporarily unplugged when the monitor goes to sleep mode, or even when switching the refresh rate of the monitor - PulseAudio 8.0 would move audio away from the HDMI monitor in these cases and not move the audio back to HDMI when the monitor becomes available again. These issues are now fixed.

### Beamforming and various other new features in the WebRTC echo canceller

The WebRTC echo canceller now supports [[beamforming|https://en.wikipedia.org/wiki/Beamforming#Beamforming_for_speech_audio]]. To enable the feature, pass "beamforming=true" in aec_args when loading module-echo-cancel. The filter also needs to know the microphone array geometry and the target direction, configured with the "mic_geometry" and "target_direction" options. For more details about how to configure beamforming, refer to the [[Modules|Software/PulseAudio/Documentation/User/Modules/#index45h3]] wiki page.

There's a new "extended filter" mode in the WebRTC echo canceller. The extended filter is more complex and less sensitive to incorrect delay reporting from the hardware than the regular filter. The extended filter mode is disabled by default, because it seemed produce worse results during double-talk (based on some very quick testing). Pass "extended_filter=true" in aec_args when loading module-echo-cancel to enable this feature.

It's now possible to disable the voice activation detection feature. To do that, pass "voice_detection=false" in aec_args when loading module-echo-cancel.

It's now possible to configure the initial volume when using AGC (automatic gain control). To do that, pass "agc_start_volume=VOL" in aec_args when loading module-echo-cancel (replace VOL with a number between 0 and 255). Note that too low initial volume may prevent the AGC algorithm from ever raising the volume high enough (there seems to be some regression in the WebRTC code in this regard).

### Various improvements in module-role-cork and module-role-ducking

module-role-cork and module-role-ducking previously ignored streams that don't have the "media.role" property set. Now it's possible to refer to such streams in the configuration by using the special "no_role" string in place of a real stream role.

Another new special role string is "any_role", which allows corking or ducking all streams other than the trigger stream.

module-role-ducking now supports configuring different ducking volume levels for different trigger streams, and different trigger streams can also be configured to duck different sets of streams. For example, "trigger_roles=trig_role1/trig_role2,trig_role3 ducking_roles=ducking_role1,ducking_role2/ducking_role2,ducking_role3 volume=40%/20%" configures two groups. In the first group, streams with role "trig_role1" cause streams with roles "ducking_role1" and "ducking_role2" to be set to 40% volume. In the second group, streams with role "trig_role2" or "trig_role3" cause streams with roles "ducking_role2" or "ducking_role3" to be set to 20% volume.

If the trigger streams themselves get muted or corked, their effects on other streams now get cancelled.

### memfd-backed shared memory transport

We have so far used the POSIX shared memory system to implement efficient communication between clients and the server. Now we also have initial support for [[memfd|https://lwn.net/Articles/593918/]]-backed shared memory, which has potential to improve security in sandboxing use cases (preventing applications from accessing each other's streams) and efficiency in system-wide setups (by making it possible to enable shared memory) in the future (further development is required before those benefits materialize).

The memfd support is disabled by default for now, to allow more testing before it's rolled out to everyone (everyone is encouraged to test - if there are problems, please report them!). To enable the feature, add "enable-memfd = true" to /etc/pulse/daemon.conf or ~/.config/pulse/daemon.conf.

Even if the server supports memfd and has it enabled, clients can opt out of it by setting "enable-memfd = false" in /etc/pulse/client.conf or ~/.config/pulse/client.conf.

### Support for sample rates up to 384 kHz

PulseAudio has traditionally limited the maximum sample rate to 192 kHz, but it seems that there is some use for rates as high as 384 kHz, so the hard limit has been increased. While such rates may seem nonsensical, there are reasons for supporting them:

 * Some online stores sell music with such sample rates.
 * ALSA uses such sample rates for playing back some compressed formats in passthrough mode. In that case the actual audio doesn't have that high sample rate. The high rate is just an ALSA quirk originating from the choice of pretending that the compressed data is PCM audio with only two channels, while the compressed data actually carries more channels. Note that these compressed formats don't work yet with PulseAudio, the increase in the maximum sample rate is just a precondition for adding the support later.
 * There are indications that some hardware supports such rates. PulseAudio should now be able to take advantage of that hardware feature, but it hasn't been tested.

## Notes for application developers

### Support for sample rates up to 384 kHz

If you have always wanted to create streams in your application with sample rates higher than 192 kHz, now it is possible, up to 384 kHz.

## Notes for packagers

### webrtc-audio-processing dependency minimum version bumped to 0.2

When enabling the WebRTC features, the webrtc-audio-processing package version has to be at least 0.2. Note that webrtc-audio-processing 0.2 is not compatible with applications that use version 0.1 (for example, older PulseAudio versions), so PulseAudio and webrtc-audio-processing have to be upgraded in lockstep.

### Changed the C standard from C99 to C11.

We now pass -std=gnu11 to the C compiler. Earlier we didn't explicitly set the C standard version, but we tried to be C99 compliant (with GNU extensions). Now we have decided to start using C11 features.

## git shortlog

<pre>
To be added later.
</pre>
