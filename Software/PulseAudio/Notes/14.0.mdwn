[[!inline pages="Software/PulseAudio/TOC" quick="yes" raw="yes"]]

# PulseAudio 14.0 release notes (draft)

## Changes at a glance

* Flat volumes are now disabled by default
* module-null-sink's compressed format support can now be configured at run-time
* New GStreamer-based RTP implementation
* qpaeq switched from Python 2 to Python 3

## Notes for end users

### Flat volumes are now disabled by default

Flat volumes have always been a controversial feature in PulseAudio. With flat volumes the stream volumes control also the sink volume. In the simple case of only one stream, the stream and the sink volume are always the same. In case of multiple streams, the sink volume is set to the maximum of the stream volumes. The purpose of this is to simplify the volume control of an application: the full volume range is always available via the application volume slider, so there's no need to think about the sink volume. In practice, however, this has caused more harm than good (the worst problem is that some applications automatically set their stream volume to 100%, causing the audio to be played at the maximum volume that the hardware can produce), and most large distributions have patched PulseAudio to disable flat volumes by default. Now that patching won't be needed any more.

Flat volumes can be enabled by setting "flat-volumes = yes" in ~/.config/pulse/daemon.conf.

### module-null-sink's compressed format support can now be configured at run-time

In the previous release it became possible to configure module-null-sink to accept compressed formats. That had to be done with module arguments when loading the module, now the configuration can be done at any time using "pactl set-sink-formats" or pavucontrol (pavucontrol 4.0 has a bug that prevents this from working, though, but the next pavucontrol version will have that bug fixed).

## Notes for application developers

(Nothing here yet.)

## Notes for packagers

### New GStreamer-based RTP implementation

module-rtp-send and module-rtp-recv can now use GStreamer to implement the RTP protocol. The old RTP implementation is still available as a compile time option (`--disable-gstreamer` with Autotools or `-Dgstreamer=disabled` with Meson), but the GStreamer implementation is used by default. The purpose of using GStreamer is to make it easier to add more advanced RTP features such as RTCP, non-PCM audio, and potentially synchronized playback.

This adds new dependencies: gstreamer-1.0, gstreamer-app-1.0 and gstreamer-rtp-1.0. TODO: Which tarballs provide these libraries? Are there additional runtime dependencies (required plugins)?

### qpaeq switched from Python 2 to Python 3

The Python interpreter that qpaeq invokes was switched from python to python3. Also, qpaeq doesn't import the SIP module any more (it wasn't used anyway), so if your qpaeq package currently has an explicit dependency to python-sip, that can be dropped. (There's still an implicit dependency to SIP via PyQt, though.)

## git shortlog

<pre>
TODO
</pre>
