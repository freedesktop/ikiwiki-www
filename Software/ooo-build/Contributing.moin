<<TableOfContents>>

== Before you read this ==

Check the [[Software/ooo-build/GettingIt|GettingIt]] pages first, this is in fact its continuation.

<<Anchor(committhechanges)>>
== Committing the changes ==

When you have developed something, you need to commit your changes, and push them.  With git, committing happens locally; you have to push your commits later so that they appear in the remote repository.

You probably want to use any of the following forms of committing
{{{
# commit all the changed or removed files
git commit -a
# commit the specified files
git commit file1 file2 file3 ... fileN
# first mark the files that you want to commit, then commit them
git add file1 file2 file3 ... fileN
git commit
}}}

Of course, there's also the usual:
{{{
git rm file1 file2 # remove file
git mv source dest # move file
git commit         # commit the removes/moves
}}}

Note that there is no ''git cp'' - git detects the history for file moves/copies after the fact, so you should be OK with only using
{{{
cp file1 file2
git add file2
git commit
}}}

The commit logs should have the following form:
{{{
First line roughly describing the change.

Leave one empty line, and then follow with more detailed description
what and why you changed.  It is really important to provide a good
description on the first line, because some of the git tools (like
gitk, git log --pretty=oneline, git rebase --interactive, etc.) show
just the first line.  Also we don't have a ChangeLog any more, so
git log is now your source of the information about the changes.

Please do not forget to mention the bugzilla numbers, like i#12345 or
bnc#234567.

* file1: Did this and that.
* file2: And something else here.
}}}

You can leave out the '* file: Did this and that' part if the general description is descriptive enough, or leave out the general description, if you store all the info in '* file: XYZ' part, but please never ever forget to provide a good first line.

The commit hooks that get installed when you do ./autogen.sh should help you to create good commit messages.

<<Anchor(mailthechanges)>>
== Mailing the changes ==

If you do not have the write permissions [yet ;-)], just develop like if you had one & commit the stuff to your local repository.  Then instead of 'git push' please mail the results of
{{{
# if you are on the branch 'master', and want to mail the commits done there
git format-patch origin/master
# more verbose version, when you want to eg. mail changes committed on branch ooo-build-3-1
git format-patch origin/ooo-build-3-1..ooo-build-3-1
}}}
to the '''dev@lists.go-oo.org''' mailing list.  One of the developers with the write access will review, and push them for you using
{{{
# apply the patches from the mailing list
git am 0001-the-first.patch 0002-the-second.patch 0003-the-third.patch
# check them briefly
git log
# check them better
git log -p
# push
git push
}}}

<<Anchor(pushthechanges)>>
== Pushing the changes ==

If you have write permissions to the remote repository, and want to publish your changes, push them to the repository using
{{{
git push
}}}

When it fails because somebody else has pushed something, update your repository using
{{{
git pull -r
}}}
as already described above.  Again, '''don't forget the -r'''!

''Note: If you used just 'git pull' instead of 'git pull -r' accidentally, you can still fix that by re-running '''git pull -r'''.  There is also a hook that warns about the plain 'git pull' usage, and instructs you what to do.''

''Note2: You might get warnings during git push when you have multiple branches to push in your repository (which happens when you eg. did not delete the master branch though it is recommended in 'Getting a particular branch').  These are just warnings, but if do not want to get them, use the full form of git push:''

{{{
# let's push just the branch 'ooo-build-3-0-1'
git push origin ooo-build-3-0-1
}}}

== What if I committed something wrong ==

If you did not push it yet, all is fine.  Just use
{{{
git rebase -i origin/master
# [this supposes you are in the 'master' branch; for ooo-build-3-0-1
# you would use origin/ooo-build-3-0-1]
}}}
and edit the history.  The use of origin/master as the starting commit decreases the probability that you'll do something wrong.

'git rebase -i' presents you with a list of the commits and a small help; you can let the commit as it is, move it up/down, remove it, squash it together with the previous commit(s), or edit it.

After you save the list, each time there is a conflict, or when rebase finds a commit to edit, you get a shell, do your changes, ''git add the.txt changed.txt files.txt'', and ''git rebase --continue''.  After few iterations, and with a bit of luck, all will be as good as you wanted.

'''However - if you pushed your changes already, don't you try to rebase them!  You have to commit the fixes and push them as completely new stuff.'''

== Introducing a change in more branches ==

To get commits from other branches, please use
{{{
git cherry-pick <commit-id>
}}}

It will take the changes introduced in <commit-id>, and commit them in the current branch.

We may allow full merges from other branches in the future, but so far we do not consider it safe on the branches automatically converted from the SVN.

== Managing translations (info for translators) ==

''ooo-build'' includes two different .po files:

 * ''ooo-build/po/<lang>.po'' - used for the desktop menu entries in ''ooo-build/desktop/*''; they are processed the GNOME way using the ''intltools'' and are applied directly during the build
 * ''ooo-build/po/ooo-build-<lang>.po'' - used for new or modified strings from ooo-build patches; they are based on ''ooo-build/po/ooo-build.pot'' file; they are not used directly during build but the ''ooo-build-<lang>.sdf'' files are used instead; the ''sdf'' files can be regenerated by the command: '''make update-sdf'''.

Translators need not take care of .pot or .sdf files. They are regenerated by ooo-build developers when necessary (before release). Any new or updated .po file can be either pushed directly to ooo-build (in case you have the fd.o account) or mailed to the mailing list. See [[#mailthechanges|Mailing the changes]] section on how to do it.

See also ''ooo-build/po/README''.
