<<TableOfContents>>

== Installing ooo-build for development ==

In order to install the freshly built ooo-build, run
{{{
make dev-install
}}}

This installs ooo-build in the `build/install` directory of the source tree. Once done, you can launch ooo-build this way:
{{{
cd build/install/program
source ooenv
./soffice
}}}

This is equivalent to the following with the installation dir path set to `build/install`
{{{
bin/ooinstall -l <installation dir path>
}}}

Notice the `-l` option given to the `ooinstall` script, which sets symbolic links to the shared libraries in the build directory instead of copying them into the installation directory.  This saves disk space since it avoids making duplicated binaries.  But more importantly, it makes it more efficient to make changes to the code, re-build it and test the change in the installation since '''you don't have to overwrite the libraries after each re-build'''.  But keep in mind that, '''you do need to source the `ooenv` script''' when you install ooo-build with an `-l` option, or else the application would fail to start and probably crash right after the splash screen.

== Up-stream/ooo-build boundary ==

When hacking, you have to use the up-stream tools to build parts of OOo.  The boundary is the `build/` subdirectory of ooo-build, ie. when you get to `build/ooo320-m12`, you are leaving ooo-build, and have to use the up-stream tools.

== My first hack ==

So - we've built and run OO.o, and we want to prove to ourselves that it is in fact possible to hack on it. So in a new terminal do this:
{{{
cd build/ooo320-m12
. ./LinuxX86Env.Set.sh
cd vcl
}}}

Now have a hack at vcl/source/window/menu.cxx (Menu::Set``ItemText);
(near line 1770) I suggest manually applying this change:
{{{
-               pData->aText = rStr;
+               pData->aText = String(rStr).Reverse();
}}}

Then save. (You can find more things to hack in the [[http://wiki.services.openoffice.org/wiki/Tutorials|Tutorials]].)

You're still in vcl/ yes ? then type 'build debug=true'; wait for the scrolling text to stop; (5 seconds?). Now re-run `soffice -writer`. You should notice the effect in the menus. If not, ensure the previous soffice.bin was dead with `killall -9 soffice.bin`

'''Note:''' for day to day hacking you want to just run 'build' inside the source tree. It is also highly recommended to work inside a copy of the build tree, and generate / test patches in an un-hacked version.  To copy just the build/ooo300-m12 directory elsewhere, you need to use the `bin/relocate` tool.

== My real hack ==

Where to start with hacking?  The best is to fix something you ''personally'' hate in OOo.  Do you have a document that crashes, but nobody seems to care?  Is there a feature you'd love using, but nobody has implemented it yet?  Do it yourself!  And when you have finished, please let us know about that - please see the [[Software/ooo-build/Contributing|Contributing]] page.

== Read the Fine manual ==

With the power of C++ comes the ability to shoot yourself in the foot all the more easily; (and implicitly), cf. '''Holub, Rules for C and C++ programming, Mc``Graw-Hill, 95'''.

The best way to prepare yourself for battle is to read the
[[http://tools.openoffice.org/CodingGuidelines.sxw|OpenOffice coding guidelines]], and for the easily confused c'tor / d'tor is short for
constructor / destructor.

Also, there's an extensive list of [[http://wiki.services.openoffice.org/wiki/Recommended_Reading|recommended literature]] about C++ - but that's of course <em>no prerequisite</em> to start coding.

== Starting the right app ==

As you start soffice.bin, there are several useful parameters to use to accelerate your debugging experience; particularly `-writer`, `-calc`, `-draw`, and (the wizardly painful) `-impress` arguments.

== Understanding D' make (man) ==

While the build system is in similar to many other systems, it is also perhaps slightly different. The overview is that each module is `built`, and then the results are ''delivered'' into the [[http://www.openoffice.org/dev_docs/source/solver.html|solver]]. Each module builds against the headers in the solver. Thus there are a few intricacies.

 * '''build''' &mdash; this perl script `solenv/bin/build.pl` is used in conjunction with `prj/build.lst` to ensure that every module that is needed is built first.  `build` then un-winds internal module dependencies, and builds each module with a chdir, dmake pair.
 * '''deliver''' &mdash; this perl scrip
