<<TableOfContents>>

== Getting the sources ==

ooo-build sources are stored in [[http://git-scm.com/|git]].  To clone the latest version of ooo-build, please use:
{{{
git clone git://anongit.freedesktop.org/git/ooo-build/ooo-build
}}}

Registered developers should use the following command to enable writing to the repository:
{{{
git clone ssh://[username@]git.freedesktop.org/git/ooo-build/ooo-build
}}}

If you asked for your account, but did not get it yet, just clone from the anonymous repository, you can 
commit and pull -r immediately, and push the changes later when you have the read/write access.  You can also [[#mailthechanges|send the changes by mail]] if you need them in the repository on freedesktop.org earlier.

To change your anonymous clone into a read/write one, change the URL in .git/config from the anonymous one to the read/write.

== Basic instructions ==

Please check our '''[[Software/ooo-build/SVNToGitCheatSheet|SVN to git cheat sheet]]''' for quick reference.

== Getting a particular branch ==

When you have cloned the repository, you can switch to any branch you need.  The bleeding edge development happens in ''master'', which is what you get when you clone the repository.  To switch eg. to branch ''ooo-build-3-0-1'', do:
{{{
git checkout -b ooo-build-3-0-1 origin/ooo-build-3-0-1
}}}

This exactly means "please create a local branch ooo-build-3-0-1 that tracks what's happening in the remote branch ooo-build-3-0-1".  You can get a list of all the available remote branches using ''git branch -r''.

Once you have created the branch(es), you can switch between them using ''git checkout'':
{{{
git checkout master
git checkout ooo-build-3-0-1
}}}

''Note: You might want to keep the older ooo-build branches in separate locations.  When you have cloned ooo-build master to eg. ~/ooo-build, you can use the --refence feature of git clone to save bandwidth:''
{{{
git clone --reference ~/ooo-build \
    ssh://[username@]git.freedesktop.org/git/ooo-build/ooo-build ooo-build-3-0-1
cd ooo-build-3-0-1
git checkout -b ooo-build-3-0-1 origin/ooo-build-3-0-1
# you probably want to have ooo-build-3-0-1 as the only branch here
git branch -D master
}}}

== Getting the latest updates ==

We use the same git workflow as described in the [[Infrastructure/git/Developers|common freedesktop.org git instructions]].  The reasoning is simple - using just the ''git pull'' (without the ''-r'') tends to create too many unnecessary 'merge' commits when there are more people working on one repository - and this is what we want to avoid.

So, to get the updates, use
{{{
git pull -r
}}}

Please, '''do not forget the ''-r'' !''' - ''-r'' means that instead of merging, ''git pull'' rebases your local changes against the changes from the remote repository.

<<Anchor(committhechanges)>>
== Committing the changes ==

When you commit your changes, it happens locally.  You probably want to use any of the following forms of committing
{{{
# commit all the changed or removed files
git commit -a
# commit the specified files
git commit file1 file2 file3 ... fileN
# first mark the files that you want to commit, then commit them
git add file1 file2 file3 ... fileN
git commit
}}}

Of course, there's also the usual:
{{{
git rm file1 file2 # remove file
git mv source dest # move file
git commit         # commit the removes/moves
}}}

The commit logs should have the following form:
{{{
First line roughly describing the change.

Leave one empty line, and then follow with more detailed description
what and why you changed.  It is really important to provide a good
description on the first line, because some of the git tools (like
gitk, git log --pretty=oneline, git rebase --interactive, etc.) show
just the first line.  Also we don't have a ChangeLog any more, so
git log is now your source of the information about the changes.

Please do not forget to mention the bugzilla numbers, like i#12345 or
bnc#234567.

* file1: Did this and that.
* file2: And something else here.
}}}

You can leave out the '* file: Did this and that' part if the general description is descriptive enough, or leave out the general description, if you store all the info in '* file: XYZ' part, but please never ever forget to provide a good first line.

The commit hooks that get installed when you do ./autogen.sh should help you to create good commit messages.

<<Anchor(pushthechanges)>>
== Pushing the changes ==

If you have write permissions to the repository, and want to publish your changes, push them to the repository using
{{{
git push
}}}

When it fails because somebody else has pushed something, update your repository using
{{{
git pull -r
}}}
as already described above.  Again, '''don't forget the -r'''!

''Note: If you used just 'git pull' instead of 'git pull -r' accidentally, you can still fix that by re-running '''git pull -r'''.  There is also a hook that warns about the plain 'git pull' usage, and instructs you what to do.''

== What if I committed something wrong ==

If you did not push it yet, all is fine.  Just use
{{{
git rebase -i origin/master
# [this supposes you are in the 'master' branch; for ooo-build-3-0-1
# you would use origin/ooo-build-3-0-1]
}}}
and edit the history.  The use of origin/master as the starting commit decreases the probability that you'll do something wrong.

'git rebase -i' presents you with a list of the commits and a small help; you can let the commit as it is, move it up/down, remove it, squash it together with the previous commit(s), or edit it.

After you save the list, each time there is a conflict, or when rebase finds a commit to edit, you get a shell, do your changes, ''git add the.txt changed.txt files.txt'', and ''git rebase --continue''.  After few iterations, and with a bit of luck, all will be as good as you wanted.

'''However - if you pushed your changes already, don't you try to rebase them!  You have to commit the fixes and push them as completely new stuff.'''

== Introducing a change in more branches ==

To get commits from other branches, please use
{{{
git cherry-pick <commit-id>
}}}

It will take the changes introduced in <commit-id>, and commit them in the current branch.

We may allow full merges from other branches in the future, but so far we do not consider it safe on the branches automatically converted from the SVN.

<<Anchor(mailthechanges)>>
== Mailing the changes ==

If you do not have the write permissions [yet ;-)], please mail the results of
{{{
git format-patch origin/master
}}}
to the '''dev@lists.go-oo.org''' mailing list, we will review, commit, and push them for you.

== Tagging a release ==

When you want to tag a release, you have to first create the tag, and then push it:

{{{
# create a tag, signed by the GPG key you configured using git config user.signingkey
git tag -s <tag-name>
# push the tags to the remote repository
git push --tags
}}}

You can also create the tag using another key (git tag -u <key-id> <tag-name>), or create an unsigned tag (git tag -a <tag-name>); though you should avoid the unsigned tags.

== More info ==

 * [[http://git-scm.com/|git home page]]
 * [[Software/ooo-build/SVNToGitCheatSheet|ooo-build SVN to git cheat sheet]]
 * [[Infrastructure/git/Developers|freedesktop.org git instructions]]
