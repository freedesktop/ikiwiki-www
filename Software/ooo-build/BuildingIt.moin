<<TableOfContents>>

== Building ooo-build ==

If you need to know how to check out the ooo-build sources, please refer to the [[Software/ooo-build/GettingIt|GettingIt]] page.

In general, your build process goes like this:
{{{
cd ooo-build
./autogen.sh --with-distro=<distro name>
./download
make 
}}}
where the ''<distro name>'' refers to one of the distros (meaning either a Linux distribution, or a Windows build) that ooo-build supports.  If you don't know which distro to use, just run `./autogen.sh` without any parameters, and you will get a list of available distros.  Alternatively, you can list the content of the `distro-configs/` subdirectory.

Picking a distro determines what patches get applied when the build process starts, per rules specified in the `patches/dev300/apply` file.  Please note that some distros are more tested than others, and picking the name of the distro that matches yours does not necessarily guarantee buildability on that platform.

When your build successfully finished, continue with the [[Software/ooo-build/HackingIt|HackingIt]] pages.

== Building on specific platforms ==

=== openSUSE ===
Building ooo-build requires that you install many additional packages that the ooo-build depends on.  To install all dependent packages in one step, run 
{{{
sudo zypper si -d OpenOffice_org-bootstrap
}}}
which should automatically resolve and install all packages necessary to build ooo-build.  Note the command `si`, which is short for `source-install`.  In connection with the `-d` option, this means ''install all the build dependencies of the specified package, but do not install the package itself''.

After having installed all necessary packages, run the following:
{{{
./autogen.sh --with-distro=SUSE
./download
make
}}}
to get the build going.  When the build finishes, proceed to the [[Software/ooo-build/HackingIt|HackingIt]] page.

=== Debian ===
To install all *-dev packages necessary to build ooo-build Debian, run 
{{{
apt-get build-dep openoffice.org
}}}

=== Ubuntu ===
Building ooo-build on Ubuntu is somewhat tricky, since no one builds it frequently enough to ensure buildability on Ubuntu, especially if you are building the master branch.  So, if you are building ooo-build on Ubuntu, be prepared to fix build issues on your own.  You will likely not receive much help in case you have trouble building it.

=== Fedora ===
It's hard to get help on building ooo-build on Fedora since no one is actively maintaining it on that platform.  Because of this, we normally advise you to pick a distro that actively packages and ships ooo-build.  

Having said that, we don't anticipate too many build issues on Fedora since the upstream build is tested on Fedora on a regular basis.  And if you would like to step up and maintain ooo-build on Fedora on your own, we would encourage you to do that.  If you decide to do so, please don't forget to share your knowledge with the rest of the world by adding build tips in this section.

== Build tips ==

If you are building on a multi-core CPU, consider using the '''--with-num-cpus=<num>''' configure option to enable parallel build in order to speed up the build time.  Usually, specifying twice the number of your cores will yield optimum build performance.

When you have more machines around, we also recommend that you use icecream to further speed up the build.  Please read [[http://people.gnome.org/~michael/blog/icecream.html|Michael's blog post detailing how to set up icecream]], and specify '''--with-gcc-speedup=icecream''' to the `autogen.sh` script.  In an ideal case (more cores, and more machines around), the following would be the best for you:
{{{
./autogen.sh --with-distro=<distro name> --with-num-cpus=<number of cores> --with-gcc-speedup=icecream
}}}

If nothing of the above fits, consider using at least ccache.  To do so, specify '''--with-gcc-speedup=ccache''' to the autogen.sh script.

== How do I know when the build is finished? ==
When your build process stops with the following output (or something similar to it):
{{{
No EPM: do no packaging at this stage

Multiprocessing build is finished
Maximal number of processes run: 8
rmdir /tmp/NF3ohfIE53
Build succeeded ...!
touch stamp/build
}}}
then your build has successfully finished.  Time to proceed to the [[Software/ooo-build/HackingIt|HackingIt]] page.
