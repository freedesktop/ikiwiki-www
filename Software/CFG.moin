##META:TOPICINFO{author`"ChristianGatzemeier" date`"1096370978" format`"1.0" version`"1.23"}%
##META:TOPICPARENT{name="Home"}%
CFG (Config4GNU) is a three layered unifying configuration framework. It can represent and modify hierarchies of settings in arbitrary config files/databases.

The modular framework works with config (file) descriptions for particular packages (meta-config definition text files). These files can be maintained and installed together with the applications themselves.

Once a meta-config definition is in place the whole CFG framework can be used on the referenced configuration.

The CFG framework features:

	* Simple access to all settings of a package
	* Different Interfaces (API, comand line, www, GUI, LDAP ...)
	* Higher level meta-logic beyond "keys and values" (general Forms and Wizard logic available for frontends)
	* Help texts and comments from the config files along with the settings.
	* Lossless config file updates/transformations
	* and more...

Get a quick overview by reading the CfgFAQ. Also have a look at the [http://config4gnu.sourceforge.net/screenshots/old.html screenshots] of the GTK-- client prototype. In particular look for the usage of "forms" and don't get too caught up in the tree view, a frontend can render an icon view from the provided meta-data in the same manner.

Here is the short version of how it works:

CFG's middlelayer adds the configurations it reads from the various back-end's syntax parsers to a unified XML representation according to the meta-config definitions it finds. The top-layer then provides utilities and different methods for frontends to querry and access the whole representation. CFG itself saves configuration state only in the original config files. The parsers know the syntax and the meta-config definitions are the source of the semantics. So CFG won't interfere with any hand-editing or other means of config manipulation. In case of an option, type or value error, wether real or due to a not up to date meta-config-definition, CFG can fall back to treat the option it does not know about as a string. Therefore CFG based config tools do not have to completly refuse working on modified files.


(* means not yet implemented)
<TABLE WIDTH`100% BORDER`1 BORDERCOLOR`"#000000" CELLPADDING`2 CELLSPACING`0 FRAME`RHS RULES`COLS STYLE`"page-break-before: always">
	<COL WIDTH=35*>
	<COL WIDTH=32*>
	<COL WIDTH=19*>
	<COL WIDTH=16*>
	<COL WIDTH=24*>
	<COL WIDTH=15*>
	<COL WIDTH=33*>
	<COL WIDTH=28*>
	<COL WIDTH=53*>
	<TR>
		<TD WIDTH`14% HEIGHT`23>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Front-Ends:</FONT></FONT></P>
		</TD>
		<TD COLSPAN`2 WIDTH`20%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Command
			Line Utilities</FONT></FONT></P>
		</TD>
		<TD COLSPAN`2 WIDTH`16%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>GUI</FONT></FONT></P>
		</TD>
		<TD COLSPAN`2 WIDTH`19%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Web</FONT></FONT></P>
		</TD>
		<TD WIDTH=11%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>LDAP*</FONT></FONT></P>
		</TD>
		<TD WIDTH=21%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Specialized
			Tools* (e.g. &quot;go back&quot; utility)</FONT></FONT></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH`14% HEIGHT`21>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Top-Layer:</FONT></FONT></P>
		</TD>
		<TD COLSPAN`8 WIDTH`86%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Provides
			API, logging*, caching, and any other shared functionality, as
			appropriate.</FONT></FONT></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH`14% HEIGHT`21>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Middlelayer:</FONT></FONT></P>
		</TD>
		<TD COLSPAN`8 WIDTH`86%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>According
			to found meta-config definitions: Invokes other back-end parsers,
			generates XML representation and activates changes after writes.</FONT></FONT></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=14%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Bottom-Layer:</FONT></FONT></P>
		</TD>
		<TD WIDTH=12%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>conf-style
			parser</FONT></FONT></P>
		</TD>
		<TD COLSPAN`2 WIDTH`14%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>INI-style
			parser</FONT></FONT></P>
		</TD>
		<TD COLSPAN`2 WIDTH`15%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>XML
			parser</FONT></FONT></P>
		</TD>
		<TD COLSPAN`3 WIDTH`45%>
			<P ALIGN`LEFT><FONT FACE`"Nimbus Roman No9 L, Times New Roman"><FONT SIZE=3>Specialized/derived
			parsers (e.g. Apache, samba, XF86Config, Sendmail*,...)</FONT></FONT></P>
		</TD>
	</TR>
	<TR>
		<TD WIDTH=14%>
			<P ALIGN=LEFT>Back-Ends:</P>
		</TD>
		<TD WIDTH=12%>
			<P ALIGN=LEFT>Plain text config files</P>
		</TD>
		<TD COLSPAN`2 WIDTH`14%>
			<P ALIGN=LEFT>INI Files</P>
		</TD>
		<TD COLSPAN`2 WIDTH`15%>
			<P ALIGN=LEFT>XML config files / meta-config files</P>
		</TD>
		<TD COLSPAN`3 WIDTH`45%>
			<P ALIGN=LEFT>apache.conf, crontab*, system.dat*, LDAP server*,
			...</P>
		</TD>
	</TR>
</TABLE>


The original authors have working code out now, but pracically no time to work on it anymore. We need your help packaging it and documenting how to define additional meta-config definitions. Also we'd like to see some of the dependencies (re)moved. (Some more specific things can be found on the CfgDevel page and in the sourcforge's trackers).


Frequently asked questions (and answers) are available and maintained on the CfgFAQ page, and may help to quickly grasp the concept.


== Downloads ==

If you want to see for yourself what this is all about you can download and install Config4GNU. Be aware that the features mentioned here refer to the original Config4GNU concept which differs from the cut down and hardcoded experimental config4gnu-wbem version.

Download Information is available [http://config4gnu.sourceforge.net/downloads/config4gnu.html here], you should prefer the cvs version over the outdated tarball.

For more documentation look also on our first Hompage: http://config4gnu.sourceforge.net
Note that not all parts there are up to date though.

This [http://news.gmane.org/gmane.comp.sysutils.cfg.devel news/web-mail interface] to our mailing list has also the later messages archived that somehow did not make it into sourceforge's [http://sourceforge.net/mail/?group_id=62306 mailing list] archive. 


== Recommended uses for CFG: ==

=== Shared foundation for universal Config Tools/Frontends ===

This one is obvious. Instead of keeping each config tool around up-to-date with changes in config file options and formats only one meta-config definition per package and a appropriate general syntax parser has to be maintained. Config tools can be relatively light weight and easy to maintain yet be universal tools that make use of all their UI/Toolkit features. CFG provides a XML "configuration tree" with available settings, descriptions, available choices and defaults for all packages for which a meta-config definition is available. The frontend can present the tree, or parts of it, if and how desired, and can use the information in forms and wizard definitions to generate user interfaces beyond keys and values even for things the frontend has not been specialized for. Forms and wizards defined in the meta-config only provide the basic logic necessary, the actual appearance can vary widely depending on the frontend used.

=== Config File Upgrades  ===

Config file upgrades can simply be done by querying the existing settings from CFG, and writing the settings back after the package upgrade. With the new meta-config definition in place CFG will now generate a new style config file when told to save all previous settings (and comments etc.) that have been read out before. In cases of first time installs or without previous non-default settings the defaults defined in the meta-config would be written out to the new config file.

=== Installers ===

With CFG a package itself should not need to contain a config file that gets copied into /etc, if the pre-inst script finds that the required configuration settings allready exist they will be kept, if no file exists, a new file with the defaults from the meta-config will be created. But sometimes reasonable defaults don't exist for all settings. In this case the installer script/program can call the appropriate/default CFG frontend to prompt the user with the "init" form or wizard. This wizard is defined in the packages' meta-config. Filling out this init form or wizard will complete a valid configuration. The init form or wizard is for setting up things that don't have reasonable defaults but are needed to use the package. 

=== Preconfigureing Packages ===

General default options are marked/set in the meta-config definitions (i.e. application-defaults that are assumed by the described application if they are not set and therefor do not need to be written to the config file, and CFG-defaults that serve as suggestions/defaults for frontends.) Further preconfigureing or customization can be done in two ways. One is modifying the defaults in special packages' meta-config as desired. But simply pre-seeding the /etc tree with initial config files which contain the desired options during a customized installation is easier. When the package gets installed later those settings will be picked up, and when values for all required settings are available the init wizard doesn't need to be invoked anymore.


== General package maintainer scripts tasks: ==

pre-install:
	* Query CFG for configuration of package that is to be installed.
	* If result is positive save the result (XML representation) and rename the old config file.

post-install:
	* If a saved XML-representation from preinst is found write it back with the now updated meta-config.
	* If package is not installed in manual configuation mode, query CFG now again and save with defaults, otherwise call frontend appropriately.
	* If some required settings are missing call the default CFG frontend to "init" the package.




== Debconf and CFG: ==

They extend each other!

Existing debconf options provided by maintainer scripts can be tied into the configuration system even before explicit CFG meta-config definitions are available for them. The idea is to make a CFG backend that functions as a frontend to debconf. This way all existing debconf settings could be readily available in the configuration system.

Step by step packages can then be updated to provide complete meta-config files. Then maintainers can make use of CFG functions in their package scripts to easily and safely set up and update their configfiles. Debconf will still work as before (just with easier to write and safer scripts). Additionally due to the available meta-config and the configuration system, any frontend, tool or script can now know about the package's current settings and further configuration possibilities.



##META:TOPICMOVED{by`"HeinrichWendel" date`"1079508535" from`"Main.CFG" to`"Software.CFG"}%
