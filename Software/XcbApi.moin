##META:TOPICINFO{author`"JameySharp" date`"1096590882" format`"1.0" version`"1.29"}%
##META:TOPICPARENT{name="xcb"}%
This is the API for [[xcb][XCB]]. At this moment the code does not reflect the API described here, which is undergoing what I hope will be the last publically-visible changes (aside from any future additions). Entries where the documentation does not agree with current CVS are marked with this symbol: %P%. If you have any comments, now is the time: they will be welcomed.

Each function and data structure documents the source file containing its declaration, in addition to the usual sorts of documentation.

##TOC%

<noautolink>

= Public API =

These functions are declared in xcb.h.

== XCBConnection ==
(xcbint.h)

`typedef struct XCBConnection XCBConnection`

An XCBConnection is an opaque structure containing all data that [[xcb][XCB]] needs to communicate with an X server.

== XCBExtension ==
(xcb.h)

`typedef [[#struct_XCBExtension][struct XCBExtension]] XCBExtension`

An XCBExtension is an opaque structure used as key for [[#XCBGetExtensionData][XCBGetExtensionData]].

== XCBAuthInfoHost ==
(xcb.h %P%)

{{{
typedef struct XCBAuthInfoHost {
	 unsigned short family;
	 unsigned short addresslen;
	 char *address;
	 unsigned short displaylen;
	 char *display;
} XCBAuthInfoHost;
}}}

Identifier for an X server.

	''' '''family*: one of the families defined in X.h or Xauth.h; usually FamilyInternet or FamilyLocal.
	''' '''address*: interpreted in a family-specific manner; for FamilyInternet, a `struct in_addr` (see ip(7)).
	''' '''display*: string containing the display number.

== XCBAuthInfo ==
(xcb.h)

{{{
typedef struct XCBAuthInfo {
	 int namelen;
	 char *name;
	 int datalen;
	 char *data;
} XCBAuthInfo;
}}}

A container for authorization information to be sent to the X server.

	''' '''name*: string containing the authentication protocol name, such as "MIT-MAGIC-COOKIE-1" or "XDM-AUTHORIZATION-1".
	''' '''data*: interpreted in a protocol-specific manner.

== XCBConnect ==
(xcb_util.c %P%)

`[[#XCBConnection][XCBConnection]] *XCBConnect(const char *display, int *screen)`

Connects to the X server specified by `display`. If `display` is null, uses the value of the DISPLAY environment variable. If a particular screen on that server is preferred, the int pointed to by `screen` (if non-null) will be set to that screen; otherwise the screen will be set to 0.

Calls:
	* [[#XCBGetFDFromDisplay][XCBGetFDFromDisplay]]
	* [[#XCBGetAuthInfo][XCBGetAuthInfo]]
	* [[#XCBConnectToFD][XCBConnectToFD]]

== XCBConnectToDisplayWithAuthInfo ==
(xcb_util.c %P%)

`[[#XCBConnection][XCBConnection]] *XCBConnectToDisplayWithAuthInfo(const char *display, [[#XCBAuthInfo][XCBAuthInfo]] *auth, int *screen)`

Connects to the X server specified by `display`, using the given authorization information. If a particular screen on that server is preferred, the int pointed to by `screen` (if non-null) will be set to that screen; otherwise the screen will be set to 0.

Calls:
	* [[#XCBGetFDFromDisplay][XCBGetFDFromDisplay]]
	* [[#XCBConnectToFD][XCBConnectToFD]]

== XCBConnectToFD ==
(xcb_conn.c %P%)

`[[#XCBConnection][XCBConnection]] *XCBConnectToFD(int fd, [[#XCBAuthInfo][XCBAuthInfo]] *auth_info)`

Connects to an X server, given an open socket and a suitable [[#XCBAuthInfo][XCBAuthInfo]].

	''' '''fd*: a file descriptor bidirectionally connected to an X server. [[#XCBGetTCPFD][XCBGetTCPFD]] and [[#XCBGetUnixFD][XCBGetUnixFD]] return appropriate file descriptors.
	''' '''auth_info*: authentication data, or 0 if the connection should be unauthenticated. [[#XCBGetAuthInfo][XCBGetAuthInfo]] returns appropriate authentication data.
	''' '''Returns*: an [[#XCBConnection][XCBConnection]], or 0 on failure.

See also [[#XCBConnect][XCBConnect]].

== XCBDisconnect ==
(xcb_conn.c)

`void XCBDisconnect([[#XCBConnection][XCBConnection]] *c)`

Closes the file descriptor and frees all memory associated with the connection.

	''' '''c*: a connection previously returned by [[#XCBConnect][XCBConnect]] and not previously passed to XCBDisconnect.

== XCBGetFDFromDisplay ==
(xcb_util.c %P%)

`int XCBGetFDFromDisplay(const char *name, int *screenp, XCBAuthInfoHost *host)`

Calls:
	* [[#XCBParseDisplay][XCBParseDisplay]]
	* [[#XCBGetTCPFD][XCBGetTCPFD]] or [[#XCBGetUnixFD][XCBGetUnixFD]]

== XCBParseDisplay ==
(xcb_util.c)

`int XCBParseDisplay(const char *name, char **host, int *display, int *screen)`

Parses a display string `name` in the form documented by X(7x). Has no side effects on failure.

	''' '''name*: the display name to parse.
	''' '''host*: a non-null pointer to a pointer which will be set to a malloc'd copy of the hostname.
	''' '''display*: a non-null pointer to an int which will be set to the display number.
	''' '''screen*: a (possibly null) pointer to an int which will be set to the preferred screen number, or set to 0 if the display string does not contain a screen number.
	''' '''Returns*: 0 on failure (perhaps `name` was null or unparsable); non-zero on success.

== XCBGetTCPFD ==
(xcb_util.c %P%)

`int XCBGetTCPFD(const char *hostname, unsigned short display, [[#XCBAuthInfoHost][XCBAuthInfoHost]] *host)`

Opens a TCP socket to the given `hostname`. The destination port is `display` plus 6000. If `host` is not null, it is filled in with values appropriate for passing to [[#XCBGetAuthInfo][XCBGetAuthInfo]].

== XCBGetUnixFD ==
(xcb_util.c %P%)

`int XCBGetUnixFD(unsigned short display, [[#XCBAuthInfoHost][XCBAuthInfoHost]] *host)`

Opens a Unix-domain socket. The filename is "/tmp/.X11-unix/X" plus `display`. If `host` is not null, it is filled in with values appropriate for passing to [[#XCBGetAuthInfo][XCBGetAuthInfo]].

== XCBGetAuthInfo ==
(xcb_auth.c %P%)

`int XCBGetAuthInfo([[#XCBAuthInfoHost][XCBAuthInfoHost]] *host, [[#XCBAuthInfo][XCBAuthInfo]] *info)`

Looks up the best available authorization data for the given host.

The current implementation is a wrapper around the Xau library, which looks up hosts in the file specified by the environment variable XAUTHORITY, or the file $HOME/.Xauthority if the first fails. To manipulate this file, see xauth(1x).

== XCBGetSetupData ==
(xcb_conn.c %P%)

`XCBConnSetupSuccessRep *XCBGetSetupData([[#XCBConnection][XCBConnection]] *c)`

Accessor for the data returned by the server when the [[#XCBConnection][XCBConnection]] was initialized.

This data includes
	* the server's required format for images,
	* a list of available visuals,
	* a list of available screens,
	* the server's maximum request length (in the absence of the BIG-REQUESTS extension),
	* and other assorted information.
See the X protocol specification for more details.

== XCBGetFileDescriptor ==
(xcb_conn.c)

`int XCBGetFileDescriptor([[#XCBConnection][XCBConnection]] *c)`

Accessor for the file descriptor that was passed to the [[#XCBConnectToFD][XCBConnectToFD]] call that returned `c`.

== XCBGetMaximumRequestLength ==
(xcb_conn.c)

`CARD32 XCBGetMaximumRequestLength([[#XCBConnection][XCBConnection]] *c)`

In the absence of the BIG-REQUESTS extension, returns the maximum''request''length field from the connection setup data, which may be as much as 65535. If the server supports BIG-REQUESTS, then the maximum''request''length field from the reply to the BigRequestsEnable request will be returned instead.

Note that this length is measured in four-byte units, making the theoretical maximum lengths roughly 256kB without BIG-REQUESTS and 16GB with.

== XCBWaitForEvent ==
(xcb_in.c %P%)

`[[#XCBEventNameEvent][XCBGenericEvent]] *XCBWaitForEvent([[#XCBConnection][XCBConnection]] *c)`

Returns the next event or error from the server, or returns null in the event of an I/O error. Blocks until either an event or error arrive, or an I/O error occurs.

== XCBPollForEvent ==
(xcb_in.c %P%)

`[[#XCBEventNameEvent][XCBGenericEvent]] *XCBPollForEvent([[#XCBConnection][XCBConnection]] *c, int *error)`

Returns the next event or error from the server, if one is available, or returns null otherwise. If no event is available, that might be because an I/O error like connection close occurred while attempting to read the next event.

	''' '''error*: pointer to an int to be filled in with the I/O error status of the operation. If *error* is null, terminates the application when an I/O error occurs.

== XCBFlush ==
(xcb_out.c)

`int XCBFlush([[#XCBConnection][XCBConnection]] *c)`

Forces any buffered output to be written to the server. Blocks until the write is complete.

== XCBSync ==
(xcb_util.c)

`int XCBSync([[#XCBConnection][XCBConnection]] *c, [[#XCBNameError][XCBGenericError]] **e)`

Blocks the calling thread for the duration of one round trip to the server, ensuring that all events and errors caused by previous requests are available to XCB.

== XCBGetExtensionData ==
(xcb_ext.c)

`const XCBQueryExtensionRep *XCBGetExtensionData([[#XCBConnection][XCBConnection]] *c, [[#XCBExtension][XCBExtension]] *ext)`

This function is the primary interface to the "extension cache", which caches reply information from QueryExtension requests.  Invoking this function may cause a call to XCBQueryExtension to retrieve extension information from the server, and may block until extension data is received from the server.

Do not free the returned XCBQueryExtensionRep - this storage is managed by the cache itself.

== XCBPrefetchExtensionData ==
(xcb_ext.c)

`void XCBPrefetchExtensionData([[#XCBConnection][XCBConnection]] *c, [[#XCBExtension][XCBExtension]] *ext)`

This function allows a "prefetch" of extension data into the extension cache.  Invoking the function may cause a call to XCBQueryExtension, but will not block waiting for the reply.  [[#XCBGetExtensionData][XCBGetExtensionData]] will return the prefetched data after possibly blocking while it is retrieved.

= Protocol Stub API =

These are not single functions or types, but rather naming conventions intended to be used in the core protocol API and the public API for all extensions. All declarations associated with the core protocol are in xcb.h, while each extension provides all of its declarations in its own header file.

One of the design goals of this API is that users should be able to learn these conventions, then read documentation on the binary encoding of the core protocol or any extension, and immediately determine the correct function name and argument list to generate the desired request.

== Extensions ==

=== XCB&lt;Extension&gt;Id ===

`[[#XCBExtension][XCBExtension]] XCB&lt;<i>Extension</i>&gt;Id`

A unique object identifying this extension for [[#XCBGetExtensionData][XCBGetExtensionData]].

== Fields ==

Several conventions apply to field names.

	* Fields have underscore-separated lower-case names.
	* Where a field represents an object in an X protocol specification document, the name is formed by replacing dash ("-") and space (" ") characters with underscores ("_"). 
	* Where a field holds the length of field "foo", its name is "foo_len".

== Types ==

The C name for the X type with name <i>Name</i> is XCB&lt;<i>Name</i>&gt;. If the type is from an extension, then <i>Name</i> is composed by prefixing the extension name onto the type name.

Types are declared using the [[XCBProtocolLanguage#STRUCT][STRUCT]], [[XCBProtocolLanguage#UNION][UNION]], [[XCBProtocolLanguage#XIDTYPE][XIDTYPE]], [[XCBProtocolLanguage#ENUM][ENUM]], and [[XCBProtocolLanguage#TYPEDEF][TYPEDEF]] protocol description macros.

=== XCB&lt;Name&gt;Iter ===

{{{
typedef struct {
	 XCB&lt;Name&gt; *data;
	 int rem;
	 int index;
} XCB&lt;Name&gt;Iter;
}}}

An iterator may only be created for types declared using the [[XCBProtocolLanguage#STRUCT][STRUCT]] and [[XCBProtocolLanguage#XIDTYPE][XIDTYPE]] protocol description macros.

A special iterator type, XCBGenericIter, is declared in xcb.h.

=== XCB&lt;Name&gt;Next ===

`void XCB&lt;<i>Name</i>&gt;Next([[#XCBNameIter][XCB&lt;<i>Name</i>&gt;Iter]] *i)`

Every [[#XCBNameIter][iterator]] has a XCB&lt;<i>Name</i>&gt;Next function.

=== XCB&lt;Name&gt;End ===

`XCBGenericIter XCB&lt;<i>Name</i>&gt;End([[#XCBNameIter][XCB&lt;<i>Name</i>&gt;Iter]] i)`

Every [[#XCBNameIter][iterator]] has a XCB&lt;<i>Name</i>&gt;End function.

=== XCB&lt;TypeName&gt;&lt;Field&gt;Iter ===

`[[#XCBNameIter][XCB&lt;<i>BaseType</i>&gt;Iter]] XCB&lt;<i>TypeName</i>&gt;&lt;<i>Field</i>&gt;Iter(XCB&lt;<i>TypeName</i>&gt; *R)`

Declared by the [[XCBProtocolLanguage#LISTFIELD][LISTFIELD]] protocol description macro.

=== XCB&lt;TypeName&gt;&lt;Field&gt; ===

`&lt;<i>BaseType</i>&gt; *XCB&lt;<i>TypeName</i>&gt;&lt;<i>Field</i>&gt;(XCB&lt;<i>TypeName</i>&gt; *R)`

Declared by the [[XCBProtocolLanguage#LISTFIELD][LISTFIELD]] protocol description macro.

=== XCB&lt;TypeName&gt;&lt;Field&gt;Length ===

`int XCB&lt;<i>TypeName</i>&gt;&lt;<i>Field</i>&gt;Length(XCB&lt;<i>TypeName</i>&gt; *R)`

Declared by the [[XCBProtocolLanguage#LISTFIELD][LISTFIELD]] protocol description macro.

=== XCB&lt;TypeName&gt;&lt;Field&gt;End ===

`[[#XCBNameIter][XCBGenericIter]] XCB&lt;<i>TypeName</i>&gt;&lt;<i>Field</i>&gt;End(XCB&lt;<i>TypeName</i>&gt; *R)`

Declared by the [[XCBProtocolLanguage#LISTFIELD][LISTFIELD]] protocol description macro.

=== XCB&lt;Name&gt;New ===

`XCB&lt;<i>Name</i>&gt; XCB&lt;<i>Name</i>&gt;New([[#XCBConnection][XCBConnection]] *c)`

Allocate a new XID of the appropriate kind.

Declared by the [[XCBProtocolLanguage#XIDTYPE][XIDTYPE]] protocol description macro.

== Requests ==

Every request declared using the [[XCBProtocolLanguage#REQUEST][REQUEST]] or [[XCBProtocolLanguage#VOIDREQUEST][VOIDREQUEST]] protocol description macros generates an assortment of types and functions.

The base C name for all types and functions related to the X request with name <i>Name</i> is XCB&lt;<i>Name</i>&gt;. If the request is from an extension, then <i>Name</i> is composed by prefixing the extension name onto the request name.

=== XCB&lt;Name&gt;Cookie ===

{{{
typedef struct {
	 unsigned int sequence;
} XCB&lt;Name&gt;Cookie;
}}}

A special cookie type, XCBVoidCookie, is declared in xcb.h. See [[#XCBName][XCB&lt;Name&gt;]].

=== XCB&lt;Name&gt;Req ===

{{{
typedef struct {
	 CARD8 major_opcode;
	 /* first single-byte field, CARD8 minor_opcode, or one byte of padding */
	 CARD16 length;
	 ...
} XCB&lt;Name&gt;Req;
}}}

=== XCB&lt;Name&gt;Rep ===

{{{
typedef struct {
	 BYTE response_type;
	 /* first single-byte field or one byte of padding */
	 CARD16 sequence;
	 CARD32 length;
	 ...
	 /* padding to 32 bytes */
} XCB&lt;Name&gt;Rep;
}}}

`response_type` always equals 1 in a reply.

A special reply type, XCBGenericRep, is declared in xcb.h. It contains only the fields common to all replies.

=== XCB&lt;Name&gt; ===

`[[#XCBNameCookie][XCB{&lt;<i>Name</i>&gt;|Void}Cookie]] XCB&lt;<i>Name</i>&gt;([[#XCBConnection][XCBConnection]] *c, ...)`

Delivers a request with the specified arguments to the X server.

If the request will cause a reply to be generated, then an [[#XCBNameCookie][XCB&lt;<i>Name</i>&gt;Cookie]] will be returned and the [[#XCBNameReply][XCB&lt;<i>Name</i>&gt;Reply]] function should be used to obtain the actual reply.

Otherwise, an [[#XCBNameCookie][XCBVoidCookie]] will be returned, and no [[#XCBNameReply][XCB&lt;<i>Name</i>&gt;Reply]] function will be provided.

=== XCB&lt;Name&gt;Reply ===

`[[#XCBNameRep][XCB&lt;<i>Name</i>&gt;Rep]] *XCB&lt;<i>Name</i>&gt;Reply([[#XCBConnection][XCBConnection]] *c, [[#XCBNameCookie][XCB&lt;<i>Name</i>&gt;Cookie]] cookie, [[#XCBNameError][XCBGenericError]] **e)`

=== XCB&lt;Name&gt;&lt;Field&gt;Iter ===

`[[#XCBNameIter][XCB&lt;<i>BaseType</i>&gt;Iter]] XCB&lt;<i>Name</i>&gt;&lt;<i>Field</i>&gt;Iter([[#XCBNameRep][XCB&lt;<i>Name</i>&gt;Rep]] *R)`

=== XCB&lt;Name&gt;&lt;Field&gt; ===

`&lt;<i>BaseType</i>&gt; *XCB&lt;<i>Name</i>&gt;&lt;<i>Field</i>&gt;([[#XCBNameRep][XCB&lt;<i>Name</i>&gt;Rep]] *R)`

=== XCB&lt;Name&gt;&lt;Field&gt;Length ===

`int XCB&lt;<i>Name</i>&gt;&lt;<i>Field</i>&gt;Length([[#XCBNameRep][XCB&lt;<i>Name</i>&gt;Rep]] *R)`

=== XCB&lt;Name&gt;&lt;Field&gt;End ===

`[[#XCBNameIter][XCBGenericIter]] XCB&lt;<i>Name</i>&gt;&lt;<i>Field</i>&gt;End([[#XCBNameRep][XCB&lt;<i>Name</i>&gt;Rep]] *R)`

== Events and Errors ==

=== XCB&lt;EventName&gt;Event ===

{{{
typedef struct {
	 BYTE response_type;
	 /* first single-byte field or one byte of padding */
	 CARD16 sequence;
	 ...
	 /* padding to 32 bytes */
} XCB&lt;EventName&gt;Event;
}}}

`response_type` equals the event number. See [[#XCBEventName][XCB&lt;EventName&gt;]].

A special event type, XCBGenericEvent, is declared in xcb.h. It contains only the fields common to all events.

=== XCB&lt;EventName&gt; ===

`#define XCB&lt;EventName&gt; &lt;number&gt;`

=== XCB&lt;ErrorName&gt;Error ===

{{{
typedef struct {
	 BYTE response_type;
	 BYTE error_code;
	 CARD16 sequence;
	 ...
	 /* padding to 32 bytes */
} XCB&lt;ErrorName&gt;Error;
}}}

`response_type` always equals 0 for errors.

`error_code` equals the error number. See [[#XCBErrorName][XCB&lt;ErrorName&gt;]].

A special event type, XCBGenericEvent, is declared in xcb.h. It contains only the fields common to all errors.

=== XCB&lt;ErrorName&gt; ===

`#define XCB&lt;ErrorName&gt; &lt;number&gt;`

= Protocol Extension API =

These functions are expected to be useful only to X protocol extension implementations built on XCB. They are declared in xcbext.h.

Care is required when calling these functions, as they generally do not have the type-safety properties of the public API functions.

== struct XCBExtension ==

{{{
struct XCBExtension {
	 const char *name;
	 int global_id;
};
}}}

	''' '''name*: the X name of this extension, stored as a null-terminated string.
	''' '''global_id*: a small integer unique across all extensions in the current process.

== XCBProtocolRequest ==
##P%

{{{
typedef struct {
	 size_t count;
	 XCBExtension *ext;
	 CARD8 opcode;
	 BOOL isvoid;
} XCBProtocolRequest;
}}}

Values for a particular request that are always constant.

	''' '''count*: number of elements in the iovec array.
	''' '''ext*: extension identifier, or null for the core protocol.
	''' '''opcode*: major opcode of the request for the core protocol, or minor opcode for an extension.
	''' '''isvoid*: zero if this request will return a reply; non-zero otherwise.

== XCBSendRequest ==
(xcb_out.c %P%)

`int XCBSendRequest([[#XCBConnection][XCBConnection]] *c, unsigned int *sequence, struct iovec *vector, const [[#XCBProtocolRequest][XCBProtocolRequest]] *request)`

== XCBWaitForReply ==
(xcb_in.c)

`void *XCBWaitForReply([[#XCBConnection][XCBConnection]] *c, unsigned int request, [[#XCBNameError][XCBGenericError]] **e)`

== XCBGenerateID ==
(xcb_xid.c)

`CARD32 XCBGenerateID([[#XCBConnection][XCBConnection]] *c)`

== XCBPopcount ==
(xcb_util.c)

`int XCBPopcount(CARD32 mask)`

Returns the number of bits in the binary representation of `mask` that are equal to 1. This is also called a "population count".

= Xlib/XCB API =

Xlib currently uses undocumented parts of XCB from xcbint.h. This interface may change without notice and must not be used: ask for a new API on the mailing list if there's some functionality that you would find useful. At some point in the future, we will design and publish an interface for Xlib, and we'd love to make it as generally useful as possible. Note that when the new API is available, xcbint.h will no longer be installed.

</noautolink>
<!-- vim:set sw`3 lbr sbr`+\ : -->

