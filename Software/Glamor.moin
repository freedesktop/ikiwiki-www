= What is Glamor? =
The glamor module is an open-source 2D graphics common driver for the X Window System as implemented by X.org. It supports a variety of graphics chipsets which have OpenGL/EGL/GBM supports.

It’s a GL-based rendering acceleration library for X server:

 * It uses GL functions and shader to complete the 2D graphics operations.
 * It uses normal texture to represent a drawable pixmap if possible.
 * It calls GL functions to render to the texture directly.

It’s somehow hardware independently. And could be a building block of any X server’s DDX driver:

 * Xephyr or any other X-in-X server could use glamor to acclerate the rendering if the hostX has glx support.
 * Xorg’s DDX driver could leverage glamor-egl package to create a egl context without any native X system.

This package can support every platform which has OpenGL and gbm and drm libraries.

= Why Glamor? =
Basiclly, the biggest two advantages of Glamor is:

 1. Graphic device has powerful 3D capability. To use 3D function to accelerate 2D rendering is possible and many drivers already do so.  OpenGL provides a more convenient and standard interface to leverage GFX device’s 3D power. It would be better to call OpenGL directly rather than manually write 3D pipeline control code for each different GFX device.
 1. We have heard of complains about why we need to develop two version drivers for a single graphic device for a long time. One is for mesa’s DRI driver and the other is for 2D DDX driver. One of glamor’s purpose is to eliminate the latter one.

= How Glamor Works? =
In Xorg, upper layer should always use low level DDX functions to handle rendering and never access a drawable directly.  The common logic of the DDX is: setup appropriate 2D or 3D pipeline according to the rendering request and draw and render it directly,  which will prepare a serial of hardware dependent command, and then upload the command to the GFX device through DRM interface, and if it failed or the feature is not implemented, DDX will map the drawable to a virtual memory buffer and then use  fb functions to draw and render it using software.

The Glamor has similar logic, but replace the 2D or 3D pipeline setup with GL's pipeline. In most caese, pixmap and window have a normal texture object. When doing the render or draw process, the texture object will be binded to a frame buffer object, so all the subsequent draw and render operations can use GL functions or use the according shader. We do not need to setup pipeline and write the control code for each different GFX device, the GL will handle it. If that GL kind render can not complete because of failure or not support, the Glamor will fallback to software rendering, which will use FB functions and upload it then if needs. This process needs memory copy several times and is relative slower, so the fallback cases should be decrease to the minimum.

The Glamor now is implemented to be embedded in other DDX driver(By now, just xf86-video-intel support) to complete the draw and render functions. In the feature, Glamor will also be implemented as a seperated DDX driver.

= How to Enable Glamor? =
