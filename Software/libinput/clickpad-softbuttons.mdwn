[[!meta title="Clickpad Software Button behavior"]]

Clickpad is the name given to touchpads without physical buttons below the
touchpad. Instead, the whole touchpad acts as a button and left or right button clicks are distinguished by the location and/or number of fingers on the touchpad.
["ClickPad" is a term coined by Synaptics Inc.](http://www.synaptics.com/en/clickpad.php) but for simplicity we refer to any touchpad with the above feature as Clickpad, regardless of the manufacturer.

A clickpad is always marked with the INPUT_PROP_BUTTONPAD property.

To perform a right-click on a Clickpad, two methods are prominent:

* on Apple touchpads, a right click is performed by two fingers on the touchpad while clicking, termed "clickfinger"
* on most non-Apple touchpads, a right click is performed by a finger in a software-defined right button area


The button behavior depends on the implementation. Some Clickpads, notably
some Cypress ones, perform right button detection in firmware and appear to
userspace as if the touchpad had physical buttons. While physically clickpads,
these are not handled by the software and treated like traditional touchpads.


The clickfinger behavior is subject to some restrictions:

* two fingers execute a right click, three fingers a middle click
* the two fingers must be in relative proximity. The Xorg synaptics driver uses 30% of the touchpad dimensions as threshold.
* some touchpads only support two touchpoints, with additional fingers being sent as BTN_TOOL_TRIPLETAP, etc. On these touchpads, the first two fingers need to decide if clickfinger behavior should be engaged. However, since clickfingers is recommended for Apple touchpads only anyway, this is more of a an academic exercise.


The button behaviors subject to some restrictions:

The button area is usually defined like this:

    +------------------------+
    |                        |
    |                        |
    |          MAIN          |
    |          AREA          |
    |                        |
    +------------------------+
    |    LEFT    |   RIGHT   |
    +------------------------+

* it is up to the implementation whether to send a button click when pressing down on the main area
* if a finger starts in the main area, the software buttons do not apply to that finger 
* if a finger starts in the button area, it must not move the pointer
* if a finger starts in the button area but moves into the main button area, it should control the pointer and the software button area does not apply to that finger
* if a finger starts in the left button area but moves to the right and vice versa, the latest button area applies to that finger
* when two fingers are on the surface, the finger in the button area decides the click type
* a release event must release the button logically down, regardless of the finger position
