= Types =

There are no special rules for new types. They are going to be introduced very conservatively.

= Geometries =

There are relatively few geometry descriptions are currently available. People are very welcome to contribute them. The only wish is to have them visually pleasant and precise.

= Models =

1. Most of PC keyboard models should be defined by the following actions:

 * adding new ''xkb_symbols'' section to ''symbols/inet''

 * extending ''$inetkbds'' list in ''rules/base.lists.part''

 * adding new ''model'' section to ''rules/base.xml.in'' (in ''modelList'')

2. It is recommended to use '''{v}{m}''' pattern for the model name, where '''{v}''' is abbrevated vendor name (acer, dell, logi, etc) '''{m}''' is the model name

3. The name of ''xkb_symbols'' section (in ''symbols/inet'') should be same as the new element in the ''$inetkbds'' list (in ''base.lists.part''), same as ''name'' element (in ''base.xml.in''). 

4. The ''vendor'' element in ''base.xml.in'' has to be specified.

5. While defining ''xkb_symbols'', it is strongly recommended to include the ''media_common'' section for the media keys, where applicable - even if not all of the keys specified in that section are present in the defined model. The syntax is standard:

    include "inet(media_common)"

For example, if keys ''prev/next/play/stop'' have the mapping as defined in ''media_common'' (and other keys do not exist in the keyboard at all) - this is a good case for including entire ''media_common'' anyway

= Layouts, Variants =

1. Every layout/variant has to define a single group: group 1. Layouts with multiple groups are not accepted.

2. Every layout/variant has to be defined for some particular country, it should go into the file ''symbols/{cc}'' where ''{cc}'' is 2-letter country code from [http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 ISO 3166-1 alpha 2]. The language-based layout/file names are not accepted. If several countries are using the same layout (for example, several countries share the same language), it should be fully defined for one country only - and included by reference into the files for other countries

3. Every layout/variant has to be registered in ''rules/base.xml.in''. There is only one exception: default variants. These are the variants which are either marked by "default" keyword in the symbols file (it is recommended to put them first and name them ''basic''), or used as default because of some rule in the ''rules/base'' file (usually by modifying ''rules/base.ml_s.part'' component).

4. There are popular variant names which are used by many countries, so they should be considered as first candidates (where applicable) for new variants. They are:
 * 'dvorak' - for national variants of the Dvorak layout
 * 'mac' - for variants specific to Macintosh keyboards
 * 'nodeadkeys' - for variants without dead keys (if the some other national variants are using them)
 * 'phonetic' - for variants which are using phonetic resemblance (usually - based on standard Americal layout)
 * 'sundeadkeys' - for variants with dead keys
 * 'us' - for variants which are using standard American layout as a basis, adding some national characters
 * 'winkeys' - for variants which are not standardized nationally but used in Microsoft Windows

5. Every layout/variant has to provide a description. First - as the group name in the symbols file, second - as the translatable description in ''rules/base.xml.in''. For the layout and default variants (including the variants not marked as default explicitly - but used as such because of the rules, see above), both description and group names are just the country name in English (for example, '' 'India' ''). For non-default variants, the group name should be the country name and description (from ''base.xml.in'') separated by the minus character (for example, '' 'Russia - Winkeys' '').

6. For layouts/variants using more than 2 shift levels, it is highly recommended to include ''level3(ralt_switch)'' symbols definition - for standard switching to levels 3 and 4 using Alt``Gr key.

7. The authors are highly encouraged to use ''include'' statements wherever possible - it makes the resulting code more compact and easier to manage.

-- Main.SergeyUdaltsov - 16 Sep 2007
