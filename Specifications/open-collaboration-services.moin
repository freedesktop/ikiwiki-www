##language:en
= Open Collaboration Services (v 1.3) =


Frank Karlitschek [[MailTo(karlitschek AT kde.org)]]

<<TableOfContents>>

== Purpose ==
integration of web communities and web bases services into desktop and mobile applications. free, secure, privacy protected, vendor independent.

== Examples ==

 * show all my friends on my desktop and make it possible to contact them via email, messaging, instant messaging, screensharing or other.
 * find online support information and show them directly in the application
 * show other people with similar interests or from the same city and enable filesharing and collaboration
 * show the activities of my friends on my desktop
 * show related free software events in my region in my calendar.
 * make it possible for a person to become a "friend" of a developer and a fan of an application 
 * find other people to work together on one document. (collabroation)
 * find other people with the same hardware to get help and exchange tips.
 * show kde related and personalized news directly on the desktop

== Naming ==
 * client - the desktop or mobile application, web frontend or proxy who access the services.
 * service provider - web bases application, webservices or online communities who provide open collaboration services. 
 * provider file - a xml configuration file which maps clients to service providers

== Requirements ==

=== Performance / Scalability ===
the services should be usable by millions of people at the same time. because of that it is important to build the architecture in a scalable way. 
every component of the architecture must be cluster enabled. this means that it must be possible to implement every service or component in a server cluster.


=== Security ===
the data transfer should be encrypted if possible.  
   

=== Privacy ===
it is essential to respect the privacy requirements of the people. 
every person must have full control over the personal information. 


=== Vendor Independent ===
it is important for an application to be independent of a specific websites or services 
because of that we use independent provider files who map the clients to the service providers.
For example the KDE project has provider files hosted on the KDE.org server who contains a list of providers who are providing a specific service. So the application maintainer has full control over which content and services are accessed by the application (client)



== Architecture ==


=== REST ===
We use REST for the webservices calls. Unlike, for example SOAP, REST is very, lightweight, easy to learn and implement and cachable. REST is very widespread in the internet and is used by other popular webservices. REST support is integrated into various web or desktop frameworks and it is platform and technology independent
The data exchange format is XML. If you add the format=json parameter you can also get the data in JSON format.

=== SSL ===
we suggest to use ssl to encrypt the data transfer between client and service providers. unencrypted data transfer is also possible when a SSL it too expensive or slow. 


=== Authentication ===
most services require a authenticated user. this is important for legal reasons. and to prevent DOS attacks. At the moment we support autentification via login/password or an API key. You have to get the API key from the service provider
We will support OpenID in a later draft of the specification.

==== example login/password ====
https://frank:password@api.opendesktop.org/v1/activity?page=3

==== example api key ====
https://API5142830791365744186814934@api.opendesktop.org/v1/activity?page=3


=== Proxy ===
it is possible to implement proxy service provider to integrate other proprietary webservices.

=== Date Format ===
All date and time data is in ISO 8601 format.

=== Services ===
the applications or websites do not have to support every service. We suggest to implement only the services into the clients or service providers which are usefull for the person at this point. 

At the moment there are the following services: 


 * [[#PERSON|PERSON]]
  
 * [[#FRIEND|FRIEND]] 

 * [[#MESSAGE|MESSAGE]]

 * [[#ACTIVITY|ACTIVITY]]

 * [[#CONTENT|CONTENT]]

 * [[#FAN|FAN]]

 * [[#KNOWLEDGEBASE|KNOWLEDGEBASE]]

 * [[#EVENT|EVENT]]

 * ...more to come later


=== Error Reporting ===
every response xml contains a "status", "statuscode" and a "message" tag. the status tag has only two possible values. "ok" or "failed". If the status is "failed" you can get a human readable errortext from the "message" tag. Examples of errormessages are: "data is private" or "person not found". You get a machine readable status in the "statuscode" tag. Statuscode 100 means "request sucessful", 999 means "unknown request". All other codes are specific to the called method and described below. 

=== Versioning ===
we support versioning of the service specifications. so if we break the api in an incompatible way we can use a new version number and still keep the old API for legacy applications(client) please note that the api is currently in draft state. so it will change in the future

=== Provider files ===
it is important to decouple the applications from the services. so we suggest to use provider files to control the mapping of applications to service providers. if an application wants to access a services it first gets the provider file to get the list of available providers. than it can access the different providers and merge the results.
An example provider file:



{{{
<providers>

<provider>
 <id>opendesktop</id>
 <location>https://api.opendesktop.org/v1/</location>
 <name>openDesktop.org</name>
 <icon></icon>
 <register>https://opendesktop.org/usermanager/new.php</register>
 <services>
   <person ocsversion="1.3" />
   <friend ocsversion="1.3" />
   <message ocsversion="1.3" />
   <activity ocsversion="1.3" />
   <content ocsversion="1.3" />
   <fan ocsversion="1.3" />
   <knowledgebase ocsversion="1.3" />
   <event ocsversion="1.3" />
 </services>
</provider>

<provider>
 <id>testy</id>
 <location>http://api.foo.org</location>
 <name>Foo provider</name>
 <icon></icon>
 <register>https://foo.org/register.php</register>
 <services>
   <person ocsversion="1.5" />
   <friend ocsversion="1.3" />
   <message ocsversion="1.3" />
   <knowledgebase ocsversion="1.2" />
   <event ocsversion="1.1" />
 </services>
</provider>

</providers>
}}}


The KDE provider file is here: http://download.kde.org/ocs/providers.xml

== Service Specifications ==

<<Anchor(PERSON)>>
=== PERSON ===
The PERSON service is handling the access to user data. you can search people and access personal data of other people of the person made the information public. 

==== search ====
find a  specific list of persons. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. It is not possible to get a list of more than 1000 people because of privacy issues.
 * Syntax: /v1/person/data
 * HTTP method: GET
 * url arguments: name - A part of the name or personid you want to search for.
 * url arguments: country - The country id of the country you want to search in.
 * url arguments: city - The name of the city as a string.
 * url arguments: description - A string you want to search for in the description and other fields of the person.
 * url arguments: pc - A string you want to search for in the pc/hardware field of the person.
 * url arguments: software - A string you want to search for in the software field of the person.
 * url arguments: longitude - The longitude of the position where you want to find people.
 * url arguments: latitude - The latitude of the position where you want to find people.
 * url arguments: distance - The maximum distance of the person to you longitude/latitude position. if you specify the latitude and longitude but no distance the resultset will be ordered by distance. The unit of the distance parameter is degrees. 
 * url arguments: page - The content page. You can control the size of a page with the pagesize parameter. The first page is 0, the second is 1, ...
 * url arguments: pagesize - The amount of entries your get per page. 
 * Statuscodes:
   * 100 - successfull
   * 101 - too many API requests in the last 15 minutes from your IP address. please try again later.
   * 102 - more than 1000 people found. it is not allowed to fetch such a big resultset. please specify more search conditions
 * Result: personlist xml
Example: GET http://frank:password@api.opendesktop.org/v1/person/data?name=eter&city=don&description=development&latitude=11.2&longitude=22&distance=0.5&page=2&pagesize=10 
Gets the third page of the search result list from the search for person where "eter" is in the nickname, firstname or lastname and "don" is in the city and who is interested in "development" and who lived near latitude:11.2 and longitude:22.0 witch a tolerance of 0.5


 
Example:
<?xml version="1.0"?>
{{{
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <person details="summary">
   <personid>Testy</personid>
   <privacy>0</privacy>
   <privacytext>public</privacytext>
   <firstname>Peter</firstname>
   <lastname>-</lastname>
   <company></company>
   <gender></gender>
   <communityrole></communityrole>
   <city>London</city>
   <country></country>
  </person>
  <person details="summary">
   <personid>peter</personid>
   <privacy>0</privacy>
   <privacytext>public</privacytext>
   <firstname>Frank</firstname>
   <lastname>Test</lastname>
   <company>company</company>
   <gender>man</gender>
   <communityrole></communityrole>
   <city>London</city>
   <country></country>
  </person>
 </data>
</ocs>
}}}


==== get ====
get the data from one specific person. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /v1/person/data/"personid"/ 
 * HTTP method: GET
 * Arguments: personid - Id of a person. for example "frank"
 * Result: person xml
 * Statuscodes:
   * 100 - successfull
   * 101 - person not found
   * 102 - data is private
 * Example: GET http://frank:password@api.opendesktop.org/v1/person/data/frank
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <person details="full">
   <personid>Frank</personid>
   <privacy>1</privacy>
   <privacytext>visible only for registered users</privacytext>
   <firstname>Frank</firstname>
   <lastname>Test</lastname>
   <gender>man</gender>
   <communityrole>developer</communityrole>
   <homepage>opendesktop.org</homepage>
   <company>opendesktop.org</company>
   <avatarpic>http://www.KDE-Look.org/CONTENT/user-pics/0/Frank.jpg</avatarpic>
   <avatarpicfound>1</avatarpicfound>
   <bigavatarpic>http://www.KDE-Look.org/CONTENT/user-bigpics/0/Frank.jpg</bigavatarpic>
   <bigavatarpicfound>1</bigavatarpicfound>
   <birthday>1973-07-25</birthday>
   <jobstatus>working</jobstatus>
   <city>Stuttgart</city>
   <country>Germany</country>
   <latitude></latitude>
   <longitude></longitude>
   <ircnick>karli</ircnick>
   <ircchannels>kde-dev, plasma</ircchannels>
   <irclink>irc://irc.freenode.org/kde-dev</irclink>
   <irclink>irc://irc.freenode.org/plasma</irclink>
   <likes>lot of stuff</likes>
   <dontlikes>nothing</dontlikes>
   <interests>travel</interests>
   <languages>english</languages>
   <programminglanguages>php, c++</programminglanguages>
   <favouritequote></favouritequote>
   <favouritemusic>nin</favouritemusic>
   <favouritetvshows></favouritetvshows>
   <favouritemovies>fightclub</favouritemovies>
   <favouritebooks></favouritebooks>
   <favouritegames>ut3</favouritegames>
   <description></description>
   <profilepage>http://www.KDE-Look.org/usermanager/search.php?username=Frank</profilepage>
  </person>
 </data>
</ocs>
}}}

==== get self ====
get the data from yourself. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /v1/person/self 
 * HTTP method: GET
 * Result: person xml
 * Statuscodes:
   * 100 - successfull
 * Example: GET http://frank:password@api.opendesktop.org/v1/person/self
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <person details="full">
   <personid>Frank</personid>
   <privacy>1</privacy>
   <privacytext>visible only for registered users</privacytext>
   <firstname>Frank</firstname>
   <lastname>Test</lastname>
   <gender>man</gender>
   <communityrole>developer</communityrole>
   <homepage>opendesktop.org</homepage>
   <company>opendesktop.org</company>
   <avatarpic>http://www.KDE-Look.org/CONTENT/user-pics/0/Frank.jpg</avatarpic>
   <avatarpicfound>1</avatarpicfound>
   <bigavatarpic>http://www.KDE-Look.org/CONTENT/user-bigpics/0/Frank.jpg</bigavatarpic>
   <bigavatarpicfound>1</bigavatarpicfound>
   <birthday>1973-07-25</birthday>
   <jobstatus>working</jobstatus>
   <city>Stuttgart</city>
   <country>Germany</country>
   <latitude></latitude>
   <longitude></longitude>
   <ircnick>karli</ircnick>
   <ircchannels>kde-dev, plasma</ircchannels>
   <irclink>irc://irc.freenode.org/kde-dev</irclink>
   <irclink>irc://irc.freenode.org/plasma</irclink>
   <likes>lot of stuff</likes>
   <dontlikes>nothing</dontlikes>
   <interests>travel</interests>
   <languages>english</languages>
   <programminglanguages>php, c++</programminglanguages>
   <favouritequote></favouritequote>
   <favouritemusic>nin</favouritemusic>
   <favouritetvshows></favouritetvshows>
   <favouritemovies>fightclub</favouritemovies>
   <favouritebooks></favouritebooks>
   <favouritegames>ut3</favouritegames>
   <description></description>
   <profilepage>http://www.KDE-Look.org/usermanager/search.php?username=Frank</profilepage>
  </person>
 </data>
</ocs>
}}}

==== edit ====
Update the latitude, longitude, city and country of myself. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/person/self
 * Method: POST
 * POST Arguments: latitude - The latitude of myself 
 * POST Arguments: longitude - The longitude of myself 
 * POST Arguments: city - Your city 
 * POST Arguments: country - The 2 letter ISO country code 
 * Statuscodes:
   * 100 - successfull
   * 101 - no parameters to update found
Example: POST http://frank:password@api.opendesktop.org/v1/person/self   postdata: longitude="1.23" latitude="3.45"
Updated my position to 1.23 and 3.45 
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}



==== balance ====
Get the account balance of a user.
 * Syntax: /v1/person/balance
 * HTTP Method: POST 
 * Result: status xml
 * Example: http://api.opendesktop.org/v1/person/balance
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <person details="balance">
   <currency>USD</currency>
   <balance>1.49</balance>
  </person>
 </data>
</ocs>

}}}

<<Anchor(FRIEND)>>
=== FRIEND ===
The FRIEND service is for handling friendship relations between people. you can get the friends of a specific person or from yourself. You can invite other persons as a friend and manage the invitations.

==== get ====
Gets the list of friends from a person. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * syntax: /v1/friend/data/"personid"
 * HTTP method: GET
 * Arguments: personid - The person from which you want to get the friendslist. 
 * URL Arguments: page - The page of the friendslist. The size of a page is controlled by the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * Statuscodes:
   * 100 - successfull
   * 101 - data is private
   * 102 - user not found
Example: GET http://frank:password@api.opendesktop.org/v1/friend/data/foobar?pagesize=10&page=1
Gets the second page of friends of the person "foobar"
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>3</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <user details="id">
   <personid>cornelius</personid>
  </user>
  <user details="id">
   <personid>dave</personid>
  </user>
  <user details="id">
   <personid>fen</personid>
  </user>
 </data>
</ocs>
}}}

==== invite ====
Invite a person to become a friend. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/friend/outbox/"personid"
 * Method: POST
 * Arguments: personid - The person you want to invite as a friend. 
 * POST arguments: message - The message you want to send to the person together with your invitation.
 * Statuscodes:
   * 100 - successfull
   * 101 - message must not be empty
   * 102 - you can´t invite yourself
   * 103 - user not found
Example: POST http://frank:password@api.opendesktop.org/v1/friend/outbox/foobar/   postdata: message="hi. how are you?"
Invites the person "foobar" and send him a message "hi. how are you?"
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}

<<Anchor(MESSAGE)>>
=== MESSAGE ===
The MESSAGE services can be used to send and receive messages. this is always possible even if you don't know the real email address of the other person. The messages are stored in different folders.

==== folders ====
Gets a list of the availabe message folders. You need the ids if you want to access the folders via messagelist.
Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/message
 * HTTP method: GET
 * Result: messagefolder xml
 * Statuscodes:
   * 100 - successfull
 * Example: http://frank:password@api.opendesktop.org/v1/message
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>4</totalitems>
 </meta>
 <data>
  <folder>
   <id>0</id>
   <name>inbox</name>
   <messagecount>27</messagecount>
   <type>inbox</type>
  </folder>
  <folder>
   <id>1</id>
   <name>send</name>
   <messagecount>9</messagecount>
   <type>send</type>
  </folder>
  <folder>
   <id>2</id>
   <name>trash</name>
   <messagecount>0</messagecount>
   <type>trash</type>
  </folder>
  <folder>
   <id>3</id>
   <name>archive</name>
   <messagecount>0</messagecount>
   <type></type>
  </folder>
 </data>
</ocs>
}}}


==== list ====
Gets the list of messages from a specific folder. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/message/"folder"
 * HTTP method: GET
 * Arguments: folder - The ID of the folder you want to get. Use the folders method to get the list of folders.
 * URL Arguments: page - The content page. The amount of entries can be controlled by the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * Result: messagelist xml
   * Status: 0 - unread 
   * Status: 1 - read
   * Status: 2 - answered
 * Statuscodes:
   * 100 - successfull
Example: GET http://frank:password@api.opendesktop.org/v1/message/1?page=2&pagesize=10
Gets the third page of messages from the folder with the id 1 of person "frank"
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <message details="full">
   <id>8490</id>
   <messagefrom>testy</messagefrom>
   <firstname>Frank</firstname>
   <lastname>Karlitschek</lastname>
   <profilepage>http://www.opendesktop.org/usermanager/search.php?username=Frank</profilepage>
   <messageto>Frank</messageto>
   <senddate>2008-08-10T16:03:59+02:00</senddate>
   <status>1</status>
   <statustext></statustext>
   <subject>test message</subject>
   <body>Sorry for bothering but did you ...</body>
  </message>
  <message details="full">
   <id>8491</id>
   <messagefrom>testy1</messagefrom>
   <firstname>Testy</firstname>
   <lastname>TTT</lastname>
   <profilepage>http://www.opendesktop.org/usermanager/search.php?username=testy1</profilepage>
   <messageto>Frank1</messageto>
   <senddate>2008-08-12T16:03:59+02:00</senddate>
   <status>1</status>
   <statustext></statustext>
   <subject>test message</subject>
   <body>Testy 2 ...</body>
  </message>
 </data>
</ocs>
}}}

==== get ====
Get a message. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/message/"folderid"/"messageid"
 * HTTP method: GET
 * Arguments: folderid - The ID of the folder. Use the folders method to get the list of folders.
 * Arguments: messageid - The ID of the message you want to get. 
 * Result: message xml
   * Status: 0 - unread 
   * Status: 1 - read
   * Status: 2 - answered
 * Statuscodes:
   * 100 - successful
   * 101 - message not found
Example: GET http://frank:password@api.opendesktop.org/v1/message/1/42
Get the message with the id 42 in the folder 1
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <message details="full">
   <id>8490</id>
   <messagefrom>testy</messagefrom>
   <firstname>Test</firstname>
   <lastname>TTT</lastname>
   <profilepage>http://www.opendesktop.org/usermanager/search.php?username=testy</profilepage>
   <messageto>Frank</messageto>
   <senddate>2008-08-10T16:03:59+02:00</senddate>
   <status>1</status>
   <statustext></statustext>
   <subject>test message</subject>
   <body>Sorry for bothering but did you ...</body>
  </message>
 </data>
</ocs>
}}}



==== send ====
Send a message. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/message/"sendfolder"
 * HTTP method: POST
 * POST Arguments: to - The receiver of the message.
 * POST Arguments: subject - The subject of the message.
 * POST Arguments: message - The text you want to send.
 * Result: status xml
 * Statuscodes:
   * 100 - successfull
   * 101 - user not found
   * 102 - subject or message not found
   * 103 - you can not send a message to yourself.
 * Example: POST http://frank:password@api.opendesktop.org/v1/message/2 postdata message="coding is fun" subject="hello" to=frank
 * Send a message to "frank" with the subject "hello" and a messagebody "coding is fun"
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}

<<Anchor(ACTIVITY)>>
=== ACTIVITY ===
You can use the ACTIVITY services to see what is going on in your friends network. For example who visited you homepage, wo has send you a message and who uploaded a new content to the website. You can also post a microblogging message which is vivible on you profile page and in the activities of your friends. The entries are sorted by timestamp.

==== get ====
Gets the list of activities. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/activity
 * HTTP method: GET
 * URL Arguments: page - The activities page. The amount of entris per page is controlled by the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * Result: activities xml
 * type categories:
   * 1 - status message
   * 2 - new friend
   * 3 - new content upload
   * 4 - profile update
   * 5 - profile photo update
   * 6 - content edit
   * 7 - new message
   * 8 - homepage visit
   * 9 - become fan
   * 10 - no longer fan
   * 11 - group created
   * 12 - group joined
   * 13 - group left
   * 14 - event created
   * 15 - attending the event
   * 16 - no longer attending the event
   * 17 - created the job offer
   * 18 - edited the job offer
   * 19 - has registered (new user)
 * Statuscodes:
   * 100 - successfull
 * Example: GET http://frank:password@api.opendesktop.org/v1/activity?page=3&pagesize=10
 * Gets the third page of the activities of person "frank"
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <activity details="full">
   <id>42</id>
   <personid>testy2</personid>
   <firstname>Test</firstname>
   <lastname>Te</lastname>
   <profilepage>/usermanager/search.php?username=testy2</profilepage>
   <avatarpic>http://www.opendesktop.org/usermanager/nopic.png</avatarpic>
   <timestamp>2008-08-01T20:30:19+02:00</timestamp>
   <type>6</type>
   <message>testy2 has updated: &quot;Extract And Compress&quot;</message>
   <link>http://www.KDE-Look.org/content/show.php?content=84206</link>
  </activity>
  <activity details="full">
   <id>43</id>
   <personid>foobar2</personid>
   <firstname>Foo</firstname>
   <lastname>Bar</lastname>
   <profilepage>/usermanager/search.php?username=foobar2</profilepage>
   <avatarpic>http://www.opendesktop.org/usermanager/nopic.png</avatarpic>
   <timestamp>2008-08-02T19:38:10+02:00</timestamp>
   <type>6</type>
   <message>foobar2 has updated: &quot;Arezzo&quot;</message>
   <link>http://www.KDE-Look.org/content/show.php?content=84403</link>
  </activity>
 </data>
</ocs>
}}}

==== put ====
Updates your activities. This is microblogging like Twitter. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * POST: /v1/activity
 * POST Arguments: message - The text you want to post.
 * Result: status xml
 * Example: POST http://frank:password@api.opendesktop.org/v1/activity postdata message="coding is fun"
 * Posts the text "coding is fun" to franks hompage and the activities of franks friends.
 * Statuscodes:
   * 100 - successful
   * 101 - empty message
   * 102 - user not found
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}


<<Anchor(CONTENT)>>
=== CONTENT ===

==== categories ====
Get a list of all available content categories. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/content/categories
 * HTTP Method: GET
 * Result: categories xml
 * Statuscodes:
   * 100 - successful
 * Example: GET http://frank:password@api.opendesktop.org/v1/content/categories
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>4</totalitems>
 </meta>
 <data>
  <category>
   <id>1</id>
   <name>KDE Wallpaper 640x480</name>
  </category>
  <category>
   <id>2</id>
   <name>KDE Wallpaper 800x600</name>
  </category>
  <category>
   <id>3</id>
   <name>KDE Wallpaper 1024x768</name>
  </category>
  <category>
   <id>4</id>
   <name>KDE Wallpaper 1280x1024</name>
  </category>
 </data>
</ocs>
}}}

==== list ====
Gets a list of a specific set of contents. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/content/data/
 * HTTP Method: GET
 * URL Arguments: categories - Ids of the requested category ids seperated by "x".
 * URL Arguments: search - the part of the name of the item you want to find.
 * URL Arguments: user - show only contents from one specific user.
 * URL Arguments: sortmode -  The sortmode of the list. Possible values are: "new" - newest first , "alpha" - alphabetical, "high" - highest rated, "down" - most downloads
 * URL Arguments: page - The content page. You can control the size of a page with the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * Result: content xml
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/content/data?categories=1x2x3x4&search=foo&sortmode=new&page=1 Gets the second page of the list of the newest contents from categories 1,2,3 and 4 with the string foo in the name. 
Example:
{{{
<?xml version="1.0"?>

<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <content details="summary">
   <id>1420</id>
   <name>name</name>
   <version>11122</version>
   <changed>2007-11-24T22:41:08+01:00</changed>
   <created>2007-11-01T22:28:24+01:00</created>
   <typeid>6</typeid>
   <typename>KDE Wallpaper (other)</typename>
   <language></language>
   <personid>Frank</personid>
   <downloads>5</downloads>
   <score>50</score>
   <comments>0</comments>
   <preview1>http://www.KDE-Look.org/content/preview.php?preview=1&amp;id=1420&amp;file1=1420-1.png&amp;file2=1420-2.png&amp;file3=&amp;name=nameeee</preview1>
   <previewpic1>http://www.KDE-Look.org/CONTENT/content-pre1/1420-1.png</previewpic1>
  </content>
  <content details="summary">
   <id>1422</id>
   <name>testy2</name>
   <version>11</version>
   <changed>2007-11-01T22:45:20+01:00</changed>
   <created>2007-11-01T22:43:21+01:00</created>
   <typeid>7</typeid>
   <typename>KDE Wallpaper (SVG)</typename>
   <language></language>
   <personid>Frank</personid>
   <downloads>8</downloads>
   <score>50</score>
   <comments>0</comments>
   <preview1>http://www.KDE-Look.org/content/preview.php?preview=1&amp;id=1422&amp;file1=1422-1.jpg&amp;file2=1422-2.png&amp;file3=1422-3.png&amp;name=vdfdds222</preview1>
   <previewpic1>http://www.KDE-Look.org/CONTENT/content-pre1/1422-1.jpg</previewpic1>  
   <smallpreviewpic1>http://www.KDE-Look.org/CONTENT/content-m1/m1421-1.png</smallpreviewpic1>
   <downloadtype1>Fedora </downloadtype1>
   <downloadprice1>2.99</downloadprice1>
   <downloadlink1>http://www.opendesktop.org/content/buy.php?content=1422&amp;id=1</downloadlink1>
   <downloadname1>pay item 1</downloadname1>
   <downloadsize1>2</downloadsize1>
   <downloadtype2>Ubuntu </downloadtype2>
   <downloadprice2>0</downloadprice2>
   <downloadlink2>http://www.opendesktop.org/content/download.php?content=1422&amp;id=2</downloadlink2>
   <downloadname2>free download</downloadname2>
   <downloadtype3>SUSE </downloadtype3>
   <downloadprice3>0</downloadprice3>
   <downloadlink3>http://www.opendesktop.org/content/download.php?content=1422&amp;id=3</downloadlink3>
   <downloadname3>free item</downloadname3>
   <detailpage>http://www.KDE-Look.org/content/show.php?content=100</detailpage>
  </content>
 </data>
</ocs>
}}}


==== get ====
Read content data of one specific content. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /v1/content/data/"contentid"/ 
 * HTTP Method: GET
 * Arguments: contentid - Id of a content
 * Result: content xml
 * Statuscodes:
   * 100 - successfull
   * 101 - content not found

 * Example: http://frank:password@api.opendesktop.org/v1/content/data/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <content details="full">
   <id>100</id>
   <name>GradE8</name>
   <version></version>
   <typeid>10</typeid>
   <typename>Theme/Style for KDE 2.1</typename>
   <language></language>
   <personid>Hans</personid>
   <created>2001-09-28T18:45:40+02:00</created>
   <changed>2001-09-28T18:45:40+02:00</changed>
   <downloads>2</downloads>
   <score>67</score>
   <description>his is my first KDE 2.0 theme. It isn't the final version, I must add some icons etc...</description>
   <changelog></changelog>
   <homepage></homepage>
   <comments>0</comments>
   <commentspage>http://www.opendesktop.org/content/show.php?content=100</commentspage>
   <fans>22</fans>
   <fanspage>http://www.opendesktop.org/content/show.php?action=fan&amp;content=100</fanspage>
   <knowledgebaseentries>7</knowledgebaseentries>
   <knowledgebasepage>http://www.opendesktop.org/content/show.php?action=knowledgebase&amp;content=100</knowledgebasepage>
   <depend></depend>
   <preview1>http://www.KDE-Look.org/content/preview.php?preview=1&amp;id=100&amp;file1=100-1.jpg&amp;file2=&amp;file3=&amp;name=GradE8</preview1>
   <preview2></preview2>
   <preview3></preview3>
   <previewpic1>http://www.KDE-Look.org/CONTENT/content-pre1/100-1.jpg</previewpic1>
   <previewpic2></previewpic2>
   <previewpic3></previewpic3>
   <smallpreviewpic1>http://www.KDE-Look.org/CONTENT/content-m1/m100-1.png</smallpreviewpic1>
   <smallpreviewpic2></smallpreviewpic2>
   <smallpreviewpic3></smallpreviewpic3>
   <detailpage>http://www.KDE-Look.org/content/show.php?content=100</detailpage>
   <downloadtype1>Fedora </downloadtype1>
   <downloadprice1>0</downloadprice1>
   <downloadlink1>http://www.opendesktop.org/content/download.php?content=1423&amp;id=2</downloadlink1>
   <downloadname1>gdfgd22</downloadname1>
   <downloadsize1>2</downloadsize1>
   <downloadtype2>Fedora </downloadtype2>
   <downloadprice2>2.99</downloadprice2>
   <downloadlink2>http://www.opendesktop.org/content/buy.php?content=1423&amp;id=1</downloadlink2>
   <downloadname2>gdgg22</downloadname2>
  </content>
 </data>
</ocs>
}}}


==== download ====
Download or buy one specific content item.
 * Syntax: /v1/content/download/"contentid"/"itemid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * Arguments: itemid - Id of a content
 * Result: status xml
 * Statuscodes:
   * 100 - successfull
   * 101 - content not found
   * 102 - payment failed
   * 103 - content item not found
 * Example: http://api.opendesktop.org/v1/content/download/12345/2
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <content details="download">
   <downloadlink>http://www......tar.gz</downloadlink>
  </content>
 </data>
</ocs>
}}}




==== vote ====
Vote for one specific content.
 * Syntax: /v1/content/vote/"contentid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * URL Arguments: vote - The vote. "good" or "bad"
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - content not found
 * Example: http://api.opendesktop.org/v1/content/vote/12345?vote=good
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}



==== add ====
Add a new content entry:
 * Syntax: v1/content/add
 * HTTP Method: POST 

 * POST Arguments: name - the name of the entry
 * POST Arguments: type - the type or category of the entry. call the categories method to get a list of all categories.
 * POST Arguments: depend - the dependency of this entry. possible values are:
 *   1 - KDE 1.x
 *   2 - KDE 2.x
 *   3 - KDE 3.x
 *   4 - KDE 3.0.x
 *   5 - KDE 3.1.x
 *   6 - KDE 3.2.x
 *   7 - KDE 3.3.x
 *   8 - KDE 3.4.x
 *   9 - KDE 3.5.x
 *   10 - Qt 1.x
 *   11 - Qt 2.x
 *   12 - Qt 3.x
 *   13 - Qt 4.x
 *   20 - GTK 1.x
 *   21 - GTK 2.x
 *   30 - GNOME 1.x
 *   31 - GNOME 2.x
 *   40 - Kommander
 *   41 - Gambas 1.x
 *   42 - Gambas 2.x
 *   50 - KDE 4.x
 *   51 - KDE 3.x and KDE 4.x
 *   60 - PyKDE/PyQt
 *   80 - Opie
 *   85 - KOffice 1.4
 *   86 - KOffice 1.5
 *   87 - KOffice 2.x
 *   100 - Qtopia
 *   200 - Mac OS X
 *   300 - MS Windows
 *   401 - Maemo 1.0
 *   402 - Maemo 2.0
 *   404 - Maemo 3.0
 *   405 - Maemo 4.0
 *   406 - Maemo 5.0
 * POST Arguments: downloadtyp1 - the type of the first download. possible values are: 0 - use the uploaded file, 1 - use the downloadlink1
 * POST Arguments: downloadname1 - the name of the 1. downloadlink
 * POST Arguments: downloadlink1 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype1 - the type of the distribution for the download.
 *   0 -
 *   500 - Source
 *   600 - SUSE
 *   700 - Novell
 *   800 - Fedora
 *   900 - Red Hat
 *   1000 - Gentoo
 *   1100 - Debian
 *   1200 - Ubuntu
 *   1300 - Mandriva
 *   1400 - Linspire
 *   1500 - Slackware
 *   1600 - FreeBSD
 *   1700 - Xandros
 *   1800 - MEPIS
 *   1900 - Solaris
 *   2000 - Ark
 *   2100 - Yoper
 *   2200 - Arch
 *   3000 - Mac OS X
 *   3100 - MS Windows
 *   10000 - Klik
 *   20000 - other
 * POST Arguments: downloadbuy1 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason1 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice1 - the price of this content in USD.

 * POST Arguments: downloadname2 - the name of the downloadlink
 * POST Arguments: downloadlink2 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype2 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy2 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason2 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice2 - the price of this content in USD.

 * POST Arguments: downloadname3 - the name of the downloadlink
 * POST Arguments: downloadlink3 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype3 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy3 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason3 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice3 - the price of this content in USD.

 * POST Arguments: downloadname4 - the name of the downloadlink
 * POST Arguments: downloadlink4 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype4 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy4 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason4 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice4 - the price of this content in USD.

 * POST Arguments: downloadname5 - the name of the downloadlink
 * POST Arguments: downloadlink5 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype5 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy5 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason5 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice5 - the price of this content in USD.

 * POST Arguments: downloadname6 - the name of the downloadlink
 * POST Arguments: downloadlink6 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype6 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy6 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason6 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice6 - the price of this content in USD.

 * POST Arguments: downloadname7 - the name of the downloadlink
 * POST Arguments: downloadlink7 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype7 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy7 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason7 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice7 - the price of this content in USD.

 * POST Arguments: downloadname8 - the name of the downloadlink
 * POST Arguments: downloadlink8 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype8 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy8 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason8 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice8 - the price of this content in USD.

 * POST Arguments: downloadname9 - the name of the downloadlink
 * POST Arguments: downloadlink9 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype9 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy9 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason9 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice9 - the price of this content in USD.

 * POST Arguments: downloadname10 - the name of the downloadlink
 * POST Arguments: downloadlink10 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype10 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy10 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason10 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice10 - the price of this content in USD.

 * POST Arguments: downloadname11 - the name of the downloadlink
 * POST Arguments: downloadlink11 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype11 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy11 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason11 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice11 - the price of this content in USD.

 * POST Arguments: downloadname12 - the name of the downloadlink
 * POST Arguments: downloadlink12 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype12 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy12 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason12 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice12 - the price of this content in USD.

 * POST Arguments: description - a description text of the entry
 * POST Arguments: licensetype - the license this content is under. possible values are:
 *   0 - Other
 *   1 - GPL
 *   2 - LGPL
 *   3 - Artistic 2.0
 *   4 - X11
 *   5 - QPL
 *   6 - BSD
 *   7 - Proprietary License
 *   8 - GFDL
 *   9 - CPL 1.0
 *   10 - Creative Commons by
 *   11 - Creative Commons by-sa
 *   12 - Creative Commons by-nd
 *   13 - Creative Commons by-nc
 *   14 - Creative Commons by-nc-sa
 *   15 - Creative Commons by-nc-nd
 * POST Arguments: license - the license text
 * POST Arguments: homepage - a link to the homepage of the entry
 * POST Arguments: version - the version of this entry
 * POST Arguments: changelog - the changelog of this entry
 * POST Arguments: donation - do you want donation for this entry? possible values are "yes"  or "" for no donation.
 * POST Arguments: donationreason - a reason we you want a donation
 * POST Arguments: osbsproject - the opensuse build service project id
 * POST Arguments: osbspackage - the opensuse build service package id
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - please specify all mandatory fields
   * 102 - no permission to change content
 * Example: http://api.opendesktop.org/v1/content/add
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <content>
   <id>1234567</id>
  </content>
 </data>
</ocs>
}}}


==== edit ====
Edit a content entry:
 * Syntax: v1/content/edit/"12345"
 * HTTP Method: POST 

 * POST Arguments: name - the name of the entry
 * POST Arguments: type - the type or category of the entry. call the categories method to get a list of all categories.
 * POST Arguments: depend - the dependency of this entry. possible values are:
 *   1 - KDE 1.x
 *   2 - KDE 2.x
 *   3 - KDE 3.x
 *   4 - KDE 3.0.x
 *   5 - KDE 3.1.x
 *   6 - KDE 3.2.x
 *   7 - KDE 3.3.x
 *   8 - KDE 3.4.x
 *   9 - KDE 3.5.x
 *   10 - Qt 1.x
 *   11 - Qt 2.x
 *   12 - Qt 3.x
 *   13 - Qt 4.x
 *   20 - GTK 1.x
 *   21 - GTK 2.x
 *   30 - GNOME 1.x
 *   31 - GNOME 2.x
 *   40 - Kommander
 *   41 - Gambas 1.x
 *   42 - Gambas 2.x
 *   50 - KDE 4.x
 *   51 - KDE 3.x and KDE 4.x
 *   60 - PyKDE/PyQt
 *   80 - Opie
 *   85 - KOffice 1.4
 *   86 - KOffice 1.5
 *   87 - KOffice 2.x
 *   100 - Qtopia
 *   200 - Mac OS X
 *   300 - MS Windows
 *   401 - Maemo 1.0
 *   402 - Maemo 2.0
 *   404 - Maemo 3.0
 *   405 - Maemo 4.0
 *   406 - Maemo 5.0
 * POST Arguments: downloadtyp1 - the type of the first download. possible values are: 0 - use the uploaded file, 1 - use the downloadlink1
 * POST Arguments: downloadname1 - the name of the 1. downloadlink
 * POST Arguments: downloadlink1 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype1 - the type of the distribution for the download.
 *   0 -
 *   500 - Source
 *   600 - SUSE
 *   700 - Novell
 *   800 - Fedora
 *   900 - Red Hat
 *   1000 - Gentoo
 *   1100 - Debian
 *   1200 - Ubuntu
 *   1300 - Mandriva
 *   1400 - Linspire
 *   1500 - Slackware
 *   1600 - FreeBSD
 *   1700 - Xandros
 *   1800 - MEPIS
 *   1900 - Solaris
 *   2000 - Ark
 *   2100 - Yoper
 *   2200 - Arch
 *   3000 - Mac OS X
 *   3100 - MS Windows
 *   10000 - Klik
 *   20000 - other
 * POST Arguments: downloadbuy1 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason1 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice1 - the price of this content in USD.

 * POST Arguments: downloadname2 - the name of the downloadlink
 * POST Arguments: downloadlink2 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype2 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy2 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason2 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice2 - the price of this content in USD.

 * POST Arguments: downloadname3 - the name of the downloadlink
 * POST Arguments: downloadlink3 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype3 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy3 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason3 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice3 - the price of this content in USD.

 * POST Arguments: downloadname4 - the name of the downloadlink
 * POST Arguments: downloadlink4 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype4 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy4 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason4 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice4 - the price of this content in USD.

 * POST Arguments: downloadname5 - the name of the downloadlink
 * POST Arguments: downloadlink5 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype5 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy5 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason5 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice5 - the price of this content in USD.

 * POST Arguments: downloadname6 - the name of the downloadlink
 * POST Arguments: downloadlink6 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype6 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy6 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason6 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice6 - the price of this content in USD.

 * POST Arguments: downloadname7 - the name of the downloadlink
 * POST Arguments: downloadlink7 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype7 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy7 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason7 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice7 - the price of this content in USD.

 * POST Arguments: downloadname8 - the name of the downloadlink
 * POST Arguments: downloadlink8 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype8 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy8 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason8 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice8 - the price of this content in USD.

 * POST Arguments: downloadname9 - the name of the downloadlink
 * POST Arguments: downloadlink9 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype9 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy9 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason9 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice9 - the price of this content in USD.

 * POST Arguments: downloadname10 - the name of the downloadlink
 * POST Arguments: downloadlink10 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype10 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy10 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason10 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice10 - the price of this content in USD.

 * POST Arguments: downloadname11 - the name of the downloadlink
 * POST Arguments: downloadlink11 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype11 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy11 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason11 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice11 - the price of this content in USD.

 * POST Arguments: downloadname12 - the name of the downloadlink
 * POST Arguments: downloadlink12 - the url of the downloadlink
 * POST Arguments: downloaddistributiontype12 - the type of the distribution for the download. the types are described at downloaddistributiontype1.
 * POST Arguments: downloadbuy12 - is this download free or paid. 0 - free, 1 - paid.
 * POST Arguments: downloadbuyreason12 - the description why is content is not for free.
 * POST Arguments: downloadbuyprice12 - the price of this content in USD.

 * POST Arguments: description - a description text of the entry
 * POST Arguments: licensetype - the license this content is under. possible values are:
 *   0 - Other
 *   1 - GPL
 *   2 - LGPL
 *   3 - Artistic 2.0
 *   4 - X11
 *   5 - QPL
 *   6 - BSD
 *   7 - Proprietary License
 *   8 - GFDL
 *   9 - CPL 1.0
 *   10 - Creative Commons by
 *   11 - Creative Commons by-sa
 *   12 - Creative Commons by-nd
 *   13 - Creative Commons by-nc
 *   14 - Creative Commons by-nc-sa
 *   15 - Creative Commons by-nc-nd
 * POST Arguments: license - the license text
 * POST Arguments: homepage - a link to the homepage of the entry
 * POST Arguments: version - the version of this entry
 * POST Arguments: changelog - the changelog of this entry
 * POST Arguments: donation - do you want donation for this entry? possible values are "yes"  or "" for no donation.
 * POST Arguments: donationreason - a reason we you want a donation
 * POST Arguments: osbsproject - the opensuse build service project id
 * POST Arguments: osbspackage - the opensuse build service package id
 * POST Arguments: announceupdate - announce this edit on the frontpage. possible values are 1 - announce, 0 - not announce, the default is 1
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - please specify all mandatory fields
   * 102 - no permission to change content
 * Example: http://api.opendesktop.org/v1/content/edit/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}




==== delete content entry ====
Delete a content entry:
 * Syntax: v1/content/delete/"contentid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - no permission to change content
 * Example: http://api.opendesktop.org/v1/content/delete/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}


==== upload new download file ====
Upload a new download file to a content:
 * Syntax: v1/content/uploaddownload/"contentid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * POST Arguments: localfile - The file to upload
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - upload error
   * 102 - localfile not found
   * 103 - no permission to change content
 * Example: http://api.opendesktop.org/v1/content/uploaddownload/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}


==== delete download file ====
Delete the download file from a content:
 * Syntax: v1/content/deletedownload/"contentid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - no permission to change content
 * Example: http://api.opendesktop.org/v1/content/deletedownload/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}

==== upload preview image ====
Upload a new preview image for a content:
 * Syntax: v1/content/uploadpreview/"contentid"/"previewid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * Arguments: previewid - Id of the preview image. (1,2 or 3)
 * POST Arguments: localfile - The imagefile to upload
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - localfile not found
   * 102 - no permission to change content
   * 103 - preview must be 1, 2 or 4
 * Example: http://api.opendesktop.org/v1/content/uploadpreview/12345/1
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}

==== delete preview image ====
Delete a preview image from a content:
 * Syntax: v1/content/deletepreview/"contentid"/"previewid"
 * HTTP Method: POST 
 * Arguments: contentid - Id of a content
 * Arguments: previewid - Id of the preview image. (1,2 or 3)
 * Result: status xml
 * Statuscodes:
   * 100 - successful
   * 101 - no permission to change content
   * 102 - preview not found
 * Example: http://api.opendesktop.org/v1/content/deletepreview/12345/1
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <status>ok</status>
 <message></message>
</ocs>
}}}


<<Anchor(FAN)>>
=== FAN ===

==== get ====
Gets a list of fans of a specific content entries. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/fan/data/"contentid"
 * HTTP Method: GET
 * URL Arguments: contentid - Id of the content entry where you want to get the fans is from.
 * URL Arguments: page - The list page. You can control the size of a page with the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * Result: fan xml
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/fan/data/123&page=1&pagesize=10 Gets the second page of the list of fans of the content with the id 123. The pagesize is 10
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <fan details="fans">
   <personid>Frank</personid>
   <timestamp>2009-08-18T10:40:09+02:00</timestamp>
  </fan>
  <fan details="fans">
   <personid>Test</personid>
   <timestamp>2009-07-18T11:41:15+02:00</timestamp>
  </fan>
 </data>
</ocs>
}}}


==== isfan ====
Check if the current user is fan of a specific content. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/fan/status/"contentid"
 * HTTP Method: GET
 * URL Arguments: contentid - Id of the content entry where you want to get the fan status from.
 * Result: fan xml Possible stati are "fan" or "notfan"
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/fan/status/123 Checks if the user frank is a fan of the content 123
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <status>fan</status>
 </data>
</ocs>
}}}


==== add ====
Become a fan of a specific content. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/fan/add/"contentid"
 * HTTP Method: POST
 * URL Arguments: contentid - Id of the content entry
 * Result: fan xml
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/fan/add/123 The user frank becomes a fan of the content 123
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
</ocs>
}}}


==== remove ====
Remove the user from the fans list of a specific content. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/fan/remove/"contentid"
 * HTTP Method: POST
 * URL Arguments: contentid - Id of the content entry
 * Result: fan xml
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/fan/remove/123 The user frank is no longer a fan of the content 123
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
</ocs>
}}}




<<Anchor(KNOWLEDGEBASE)>>
=== KNOWLEDGEBASE ===

==== list ====
Gets a list of a specific set of knowledgebase entries. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/knowledgebase/data/
 * HTTP Method: GET
 * URL Arguments: content - Id of the content entry if you want to get knowledgebase entries from a specific content entry.
 * URL Arguments: search - a keyword you want find in the name, description or answer of a knowledgebase entry.
 * URL Arguments: sortmode -  The sortmode of the list. Possible values are: "new" - newest first or "alpha" - alphabetical
 * URL Arguments: page - The list page. You can control the size of a page with the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * Result: knowledgebase xml
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/knowledgebase/data?content=123&search=foo&sortmode=new&page=1 Gets the second page of the list of the newest knowledgebase entries from content 123 with the string foo in the name, description or answer. 
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <content details="detail">
   <id>1</id>
   <status>not answered</status>
   <contentid>12345</contentid>
   <user>testy</user>
   <changed>2009-02-07T23:14:11+01:00</changed>
   <name>app question</name>
   <description>How can I ........</description>
   <answer></answer>
   <comments>0</comments>
   <detailpage>http://www.opendesktop.org/content/show.php?action=knowledgebase&amp;content=11&amp;kbid=12345</detailpage>
  </content>
  <content details="detail">>
   <id>2</id>
   <status>answered</status>
   <contentid>12345</contentid>
   <user>testy</user>
   <changed>2009-02-03T21:11:01+01:00</changed>
   <name>app question 22</name>
   <description>How can I 22........</description>
   <answer></answer>
   <comments>0</comments>
   <detailpage>http://www.opendesktop.org/content/show.php?action=knowledgebase&amp;content=11&amp;kbid=12</detailpage>
  </content>
 </data>
}}}


==== get ====
Read one specific knowledgebase entry. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /v1/knowledgebase/data/"contentid"/ 
 * HTTP Method: GET
 * Arguments: knowledgebaseid - Id of a knowledgebase entry
 * Result: knowledgebase xml
 * Statuscodes:
   * 100 - successful
   * 101 - entry not found
 * Example: http://frank:password@api.opendesktop.org/v1/knowledgebase/data/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <knowledgebase>
   <id>1</id>
   <status>not answered</status>
   <contentid>12345</contentid>
   <user>testy</user>
   <changed>2009-02-07T23:14:11+01:00</changed>
   <name>app question</name>
   <description>How can I ........</description>
   <answer></answer>
   <comments>0</comments>
   <detailpage>http://www.opendesktop.org/content/show.php?action=knowledgebase&amp;content=11&amp;kbid=12345</detailpage>
  </knowledgebase>
 </data>
</ocs>
}}}


<<Anchor(KNOWLEDGEBASE)>>
=== EVENT ===

==== list ====
Gets a list of a specific set of events. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /v1/event/data/
 * HTTP Method: GET
 * URL Arguments: type - Id of the event type.
 * URL Arguments: country - ISO code of the country.
 * URL Arguments: startat - Earliest possible start date of the events.
 * URL Arguments: search - a keyword you want find in the name or description of a event entry.
 * URL Arguments: sortmode -  The sortmode of the list. Possible values are: "new" - newest first or "alpha" - alphabetical
 * URL Arguments: page - The list page. You can control the size of a page with the pagesize argument. The first page is 0, the second is 1, ...
 * URL Arguments: pagesize - The amount of entries per page.
 * type 10: Party
 * type 15: User Group
 * type 20: Conference
 * type 25: Developer Meeting
 * type 50: Install Party
 * type 1000: otherParty
 * Result: event xml
 * Statuscodes:
   * 100 - successful
 * Example: http://frank:password@api.opendesktop.org/v1/event/data?country=us&startat=01-01-2009&type=10&search=foo&sortmode=new&page=1 Gets the second page of the list of the newest events of 2009 from type party in the US with the string foo in the name or description. 
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
  <totalitems>2</totalitems>
  <itemsperpage>10</itemsperpage>
 </meta>
 <data>
  <event details="detail">
   <id>4</id>
   <name>Test Party</name>
   <category>Party</category>
   <startdate>2010-08-02T00:00:00+02:00</startdate>
   <enddate>2011-10-03T00:00:00+02:00</enddate>
   <user>Frank</user>
   <city>Stuttgart</city>
   <country>Germany</country>
   <longitude>9.183</longitude>
   <latitude>48.767</latitude>
   <changed>2009-05-18T14:03:55+02:00</changed>
   <comments>2</comments>
   <participants>2</participants>
   <badge></badge>
   <detailpage>http://www.opendesktop.org/events/?id=4</detailpage>
  </event>
  <event details="detail">
   <id>3</id>
   <name>Another Party</name>
   <category>Party</category>
   <startdate>1979-01-01T01:00:01+01:00</startdate>
   <enddate>1979-01-01T01:00:01+01:00</enddate>
   <user>Frank</user>
   <city>Stuttgart</city>
   <country>Germany</country>
   <longitude>1.2</longitude>
   <latitude>1.1</latitude>
   <changed>2009-05-16T00:25:31+02:00</changed>
   <comments>0</comments>
   <participants>1</participants>
   <badge></badge>
   <detailpage>http://www.opendesktop.org/events/?id=3</detailpage>
  </event>
 </data>
</ocs>



}}}


==== get ====
Read one specific event entry. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /v1/event/data/"eventid"/ 
 * HTTP Method: GET
 * Arguments: eventid - Id of a event entry
 * Result: event xml
 * Statuscodes:
   * 100 - successful
   * 101 - entry not found
 * Example: http://frank:password@api.opendesktop.org/v1/event/data/12345
Example:
{{{
<?xml version="1.0"?>
<ocs>
 <meta>
  <status>ok</status>
  <statuscode>100</statuscode>
  <message></message>
 </meta>
 <data>
  <event>
   <id>6</id>
   <name>bbb</name>
   <description>here is the description text</description>
   <category>Party</category>
   <startdate>1970-01-01T00:00:00+01:00</startdate>
   <enddate>1970-01-01T00:00:00+01:00</enddate>
   <user>Frank</user>
   <organizer></organizer>
   <location></location>
   <city></city>
   <country>Germany</country>
   <longitude>0</longitude>
   <latitude>0</latitude>
   <homepage></homepage>
   <tel></tel>
   <fax></fax>
   <email></email>
   <changed>2009-05-18T18:49:15+02:00</changed>
   <comments>1</comments>
   <participants>2</participants>
   <detailpage>http://www.opendesktop.org/events/?id=6</detailpage>
   <badge>http://www.opendesktop.org/CONTENT/event-badge/0/6.png</badge>
   <image></image>
  </event>
 </data>
</ocs>

}}}





----
CategoryHomepage
