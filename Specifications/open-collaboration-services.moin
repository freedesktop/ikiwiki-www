##language:en
= Open Collaboration Services  =


Frank Karlitschek [[MailTo(karlitschek AT kde.org)]]

== Purpose ==
integration of web communities and web bases servics into desktop and mobile applications. free, secure, privacy protected, vendor independent.

== Examples ==

 * show all my friends on my desktop and make it possible to contact them via email, messaging, instant messaging, screensharing or other.
 * find online support information and show them directly in the application
 * show other users with similar interests or from the same reason and enable filesharing and collaboration
 * show the activities of my friends on my desktop
 * show related free software events in my region in my calendar.
 * make it possible for a user to become a "friend" of a developer and a fan of an application 
 * find other users to work together on one document. (collabroation)
 * find other users with the same hardware to get help from other users.
 * show kde related and personalized news directly on the desktop

== Naming ==
 * client - the desktop or mobile application, web frontend or proxy who access the services.
 * service provider - web bases application, webservices or online communities who provide open collaboration services. 
 * provider file - a xml configuration file which maps clients to service providers

== Requirements ==

=== Performance / Scalability ===
the services should be usable by millions of users at the same time. because of that it is important to build the architecture in a scalable way. 
every component of the architecture must be cluster enabled. this means that it must be possible to implement every service or component in a server cluster.



=== Security ===
the data transfer should be encrypted if possible.  
   

=== Privacy ===
it is essential to respect the privacy requirements of the users. 
every user must have full control over the personal information. 


=== Vendor Independent ===
it important for a application to be independent of a specific websites or services 
because of that we use independent provider files who map the clients to the service providers.
For example the KDE project has provider files hosted on the KDE.org server who contains a list of providers who are providing a specific service. So the application maintainer has full control over which content and services are accessed by the application (client)



== Architecture ==


=== REST ===
We use REST for the webservices calls. Unlike, for example SOAP, REST is very, lightweight, easy to learn and implement and cachable. REST is very widespread in the internet and ist used by other popular webservices. REST support is integrated into various web or desktop frameworks and it is platform and technology independent
The data exchange format is XML.

=== SSL ===
we suggest to use ssl to encrypt the data transfer between client and service providers. unencrypted data transfer is also possible when a SSL it too expensive or slow. 


=== Authentication ===
most services require a authenticated user. this is important for legal reasons. and to prevent DOS attacks.

=== Proxy ===
it is possible to implement proxy service provider to integrate other proprietary webservices.


=== Services ===
the applications or websites donÂ´t have to support every service. We suggest to implement into the clients or service providers only the services which are usefull for the users at this point. 

At the moment there are the following services: 


 * USER (search, friends, ..)
  * search
  * get
  
 * FRIEND 
  * get

 * MESSAGE
  * folders
  * count
  * list


 * ACTIVITY
  * get


 * CONTENT
   * categories
   * list
   * get
   * vote 

 * ...more to come later

=== Error Reporting === 
every response xml contains a "status" and a "message" tag. the status tag has only two possible values. "ok" or "failed". If the status is "failed" you can get a human readable errortext from the "message" tag. examples of errormessages are: "data is private" or "user not found".

=== Versioning ===
we support versioning of the service specifications. so if we break the api in an incompatible way we can use a new version number and still keep the old API for legacy applications(client) please note that the api is currently in draft state. so it will change in the future

=== Provider files ===
it is important to decouple the applications from the services. so we suggest to user provider files to control the mapping of applications to service providers. if an application wants to access a services it first gets the provider file to get the list of available providers. than it can access the different providers and merge the results.
provider file specs are work in progress

== Service Specifications ==

=== USER ===

==== search ====
find a  specific list of users. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/USER/search/"folder"/"page"
 * Arguments: username - A part of the name or username you want to search for.
 * Arguments: country - The country id of the country you want to search in.
 * Arguments: city - The name of the city as a string.
 * Arguments: description - A string you want to search for in the description and other fields of the user.
 * Arguments: pc - A string you want to search for in the pc/hardware field of the users.
 * Arguments: software - A string you want to search for in the software field of the users.
 * Arguments: longitude - The longitude of the position where you want to find users.
 * Arguments: latitude - The latitude of the position where you want to find users.
 * Arguments: distance - The maximum distance of the user to you longitude/latitude pasition.
 * Arguments: page - The content page. Every page has max 10 entries. The first page is 0, the second is 1, ...

 * Result: userlist xml
Example: http://frank:password@api.opendesktop.org/V1/USER/SEARCH/eter//don/development///11.2/22/0.5/2 
Gets the third page of the search result list from the search for users where "eter" is in the nickname, firstname or name and "don" is in the city and who is interested in "development" and who lived near latitude:11.2 and longitude:22.0 witch a tolerance of 0.5
 
==== get ====
get the date from one specific user. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /V1/USER/GET/"userid"/ 
 * Arguments: userid - Id of a user. for example "frank"
 * Result: user xml
 * Example: http://frank:password@api.opendesktop.org/V1/USER/GET/frank


=== FRIEND ===

==== get ====
Gets the list of friends. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/FRIEND/GET/"page"
 * Arguments: page - The page of the friendslist. Every page has max 10 entries. The first page is 0, the second is 1, ...
Example: http://frank:password@api.opendesktop.org/V1/FRIEND/GET/1
Gets the second page of friends of the user "frank"



=== MESSAGE ===
==== folders ====
Gets a list of the availabe message folders. You need the ids if you want to access the folders via messagecount or messagelist.
Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V2/MESSAGE/FOLDERS
 * Result: messagefolder xml
 * Example: http://frank:password@api.opendesktop.org/V1/MESSAGE/FOLDERS


==== count ====
Get the number of messages in a specific message folder. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/MESSAGE/COUNT/"folder"
 * Arguments: folder - ID of the folder. Use MESSAGEFOLDERS to get the folder IDs
 * Result: messagecount
 * Example: http://frank:password@api.opendesktop.org/V1/MESSAGE/COUNT/0 Gets the number of messages in the inbox


==== list ====
Gets the list of messages from a specific folder. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/MESSAGE/LIST/"folder"/"page"
 * Arguments: folder - The ID of the folder you want to get. Use the MESSAGEFOLDER method to get the list of folders.
 * Arguments: page - The content page. Every page has max 10 entries. The first page is 0, the second is 1, ...
 * Result: messagelist xml
 * Fields:
  * id- the unique id of the message
  * messagefrom- the username of the message sender
  * messageto - the username of the message receiver
  * senddate- the unix timestamp of the message
  * status- the message status. 0=>unread, 1=>read, 2=>replyed
  * subject- the subject line of the message
  * body- the message body
Example: http://frank:password@api.opendesktop.org/V1/MESSAGE/LIST/1/2
Gets the third page of messages from the "send" folder of user "frank"


=== ACTIVITY ===

==== get ====
Gets the list of activities. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/ACTIVITY/GET/"page"
 * Arguments: page - The activities page. Every page has max 10 entries. The first page is 0, the second is 1, ...
 * Result: activities xml
 * Example: http://frank:password@api.opendesktop.org/V1/ACTIVITY/GET/2
 * Gets the third page of the activities of user "frank"


=== CONTENT ===

==== categories ====
Get a list of all available content categories. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/CONTENT/CATEGORIES/
 * Result: categories xml
 * Example: http://frank:password@api.opendesktop.org/V1/CONTENT/CATEGORIES


==== list ====
Gets a list of a specific set of contents. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header.
 * Syntax: /V1/CONTENT/LIST/"categories"/"sortmode"/"page"
  * Arguments: categories - Ids of the requested category ids seperated by "x".
  * Arguments: sortmodes -  The sortmode of the list. Possible values are: "new" - newest first , "alpha" - alphabetical, "high" - highest rated, "down" - most downloads
  * Arguments: page - The content page. Every page has max 10 entries. The first page is 0, the second is 1, ...
 * Result: content xml
 * Example: http://frank:password@api.opendesktop.org/V1/CONTENT/LIST/1x2x3x4/new/1 Gets the second page of the list of the newest contents from categories 1,2,3 and 4 

==== get ====
Read content data of one specific content. Only authenticated users are allowed to access this method. Authentication is done by sending a Basic HTTP Authorisation header. 
 * Syntax: /V1/CONTENT/GET/"contentid"/ 
 * Arguments: contentid - Id of a content
 * Result: content xml
 * Example: http://frank:password@api.opendesktop.org/V1/CONTENT/GET/12345

==== vote ====
Vote for one specific content.
 * Syntax: /V1/CONTENT/VOTE/"contentid"/"vote"
  * Arguments: contentid - Id of a content
  * Arguments: vote - The vote. "good" or "bad"
 * Result: status xml
 * Example: http://api.opendesktop.org/V1/CONTENT/VOTE/12345/good



----
CategoryHomepage
