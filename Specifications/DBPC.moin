{{attachment:DBPC-logo-nb.png|alt DBPC logo}}

Links
<<Navigation(children)>>

<<TableOfContents(3)>> 

== Overview ==

Since popularity of Linux operating system in industrial environment increase, needs for interoperability between Linux applications and industrial equipment come true. Actually most every Linux scada/HMI project reinvents the wheel for field communication without interoperability.

Mainly, DPBC (DBus for process control) is a standard abstraction layer between SCADA and field equipment.

DBPC is based on D-Bus which is a message bus and activation system that is set to achieve deep penetration in Linux. 

DBPC define a standard set of objects, interfaces and methods for use in process control. It will provide a common standard for industrial communication, especially between HMI, SCADA and field electronic equipement.


== Participate ==

If you have ideas you want to suggest but don't want to edit this main document, please go to the [[/Discussion|brainstorming Page]].


== Synoptic ==

{{attachment:DBPC-Synoptic.png|alt DBPC Synoptic}}

Trivial diagrammatic description of DBPC architecture. 


== Definitions ==

 DBus:: Formally, D-Bus is an inter-process communication mechanism. Simply, DBus is a software data bus which permits communication between applications. Unless it is not a process field bus as used in factory floor, its core functionality can easily be apprehended in the same way by control engineer. For more detail about DBus please read related specification.

 DBPC:: DBPC is a layer above DBUS. It define a standard set of objects, interfaces and methods for use in process control, automation and domotic applications, to facilitate interoperability. Primary goal is defining a common communication language for real time communication of plant data between control devices from different manufacturers and SCADA, HMI, process control and open source applications.

 DBPC-server:: DBPC servers are services which provide common tags access trough DBus. Generally a DBPC server grants real time data access to one or more remote programmable logic controller. Most of time is done by pooling. Typically DBus servers represent a field bus protocol. (For example : ModbusTCP DBPC server, Profibus DBPC server).

 DBPC-client:: DBPC client are compliant application which access to tags in one or more DBPC-server.

 Tags:: Each data point available trought a DBPC server are called tags. Mainly, tags correspond to physical value, factory state, command signals, or so on. Tags value can be read or write by DBPC client. 

 Device :: Form DBPC point of view, devices are equipment or objects which may be controlled or monitored trough a DBPC server. Still DBPC target industrial world, DBPC servers can also be implemented for such devices : HVAC, heating control, domotic, real time data producers, met√©o stations, telescopes, multimedia equipments, IR remote controls, DCF clocks, robots, usb gadgets, RFID readers,...   

 PLC Programmable logical controller:: Programmable logic controllers are a digital computer used for automation of electromechanical processes. Unlike general-purpose computers, the PLC are designed for multiple inputs and output arrangements, extended temperature ranges, immunity to electrical noise, and resistance to vibration and impact. Although the norm IEC 61131-3 define PLC programming languages each manufacturer has its own programming tool. Interoperability is not yet a priority for PLC manufacturers. Majors world PLC manufacturer are Siemens Simatic S7, Allen Bradley, Telemecanique and GE fanuc.

 Field bus:: Fieldbus is an industrial automation network system for real-time distributed control. It is a way to interconnect instruments, actuator and sensor with controller. Field buses typically take place in a plant. Many fieldbus competing technologies exist. So merging them in D-Bus is a brave goal followed by DBPC.   


== Audience ==

  * Process control and automation engineers 
  * Linux user and open source programmer 
  * HMI and SACDA open source projects 
  * Industrial embedded systems programmer 
  * Industrial equipment manufacturer 
  * Industrial computer manufacturer
  * Education

== Specification ==

=== Part 1, DBPC basis ===

[[/part1|Part 1]] 

This part introduce basis usage of D-Bus for process control.

It start by specifying common usage of methods call and signals. Next, convention usage of bus name are described. 

=== Part 2, DBPC Tags : interfaces and methods description ===

[[/part2|Part 2]] 

This part specify common objects, interface and method of D-Bus for process control.

=== Part 3, DBPC Server : specification, interfaces and methods description  ===

[[/part3|Part 3]] 

This part is targeted to be a development guideline for programmers. It describe server behaviours.    

=== Part 4, DBPC Configuration file ===

[[/part4|Part 4]] 

Configuration files must be generated, imported or exported by thirds-party software or bash scripts. This part define a common configuration file format which should be used by DBPC servers.  

=== Part 5, DBPC Common Gui configuration tool guideline ===

In the Future, a modular Gui configuration tool will allow graphical DBPC setup. This part will describe how to develop a DBPC server specific plugin/capplet for this tool. 

== FAQ ==

=== What is the difference between DBPC for Linux and OPC-DA for Windows ? ===
[[http://www.opcfoundation.org/Default.aspx/01_about/01_whatis.asp?MID=AboutOPC|OPC-DA]]
was designed to bridge Windows and process control hardware and software applications. Standard defines consistent method of accessing field data from plant floor devices. Actually, OPC-DA is probably the most common interoperability tool used in automation and process control world.

Same needs for interoperability is also desired in Linux world. Unfortunately OPC-DA is based on the OLE, COM, and DCOM technologies developed by Microsoft for the Microsoft Windows operating system family. Then a Linux port is not realistic. As a result of, DBPC as been created, having in mind that final users needs to find same habits they get used to work with. So from this point of view, DBPC and OPC-DA sould appear similar.

Nevertheless, DBPC distinguish of OPC-DA in one sens that it target to exploit full advantage and benefit provided by Linux and Open source software development. Although, DBPC still to encourage, manufacturer providing there own DBPC compliant tools.  

=== New specification OPC-UA work with linux ? Do we really need DBPC ? ===
[[http://www.opcfoundation.org/Default.aspx/01_about/UA.asp?MID=AboutOPC|OPC-UA]] is a evolution of OPC-DA.
It has been created for make up some OPC-DA lack. 

OPC-UA is a communucation protocol. DBPC is an Inter-Process Communication.

  * In one hand, OPC-UA will be suitable for automation network and inter-systems interoperability, because it is XML based and include authentication support. 

  * In the other hand DBPC is rooted in Linux thanks to D-bus which allow deep system integration and easy application development. Besides D-Bus is low-latency and low-overhead, designed to be small and efficient to minimize round-trips. So very suitable for embedded systems as well as fanless touchscreen HMI. In addition, the protocol is binary, not textual, which removes the costly serialization process.


In fact OPC-UA will benefit of DBPC and reciprocally. As a reslut of OPC-UA can be implemented as a upper layer (wrapper) above DBPC, similar to XMP-RPC, SOAP, CGI and so on.

=== There is many interprocess communication or networking protocols. Why D-BUS ? ===

A first approach may be reading [[http://dbus.freedesktop.org/doc/dbus-faq.html#other-ipc|D-Bus FAQ]], 9 to 18 which compare D-Bus with several IPC. Obviously, benefit of B-Bus benefit to DBPC too. 

More precisely, When choosing an IPC for process control in Linux, some criteria where decisive : 
 * Availability : D-Bus have been integrated in Gnome and KDE desktop. This mean long term perspective and good support. 
 * Portability : D-Bus is very portable to any Linux or UNIX flavor, and a port to Windows is in progress. 
 * Liability : The D-Bus low-level API reference implementation and protocol have been heavily tested in the real world over several years, and are now "set in stone."
 * Multi-language support : D-Bus is supported by most common Linux programming language : C, C++, Java, Python, Perl, and so one. 
 * Scripting : D-Bus can be used from terminal which mean bash scripting.
 * Efficiency : D-Bus is light enough to be implemented in low performance hardware and embedded systems.
 * Openness : A a side effect, Instead of DBPC, HMI application can also benefit of all Desktop application supporting D-Bus connectivity.
 * Simplicity : It is easy to start programming D-Bus support.
