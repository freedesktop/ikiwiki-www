||<#eeeeee> DBPC logo (te be created)||

== Overview ==
Since popularity of Linux operating system in industrial environment increase, needs for interoperability between application and field equipment come true. The main goal of DBPC is to define robust and reliable standards set of objects, interfaces and methods for use in process control and manufacturing automation applications to facilitate interoperability.

== Synoptic ==

...in progress... (add here a trivial diagrammatic description of what DBPC can do)

== Audience and related benefit ==
 Process control and automation engineer::  ...
 SCADA and IHM designer::  ...
 Open source programmer::  ...
 PLC and industrial devices equipment manufacturer::  ...
 Industrial computer and HMI manufacturer::  ...
 Industrial embedded systems manufacturer::  ...

== Definitions ==
 DBus:: Formally, D-Bus is an inter-process communication mechanism. Simply, DBus is a software data bus which permits communication between applications. Unless it is not a process field bus as used in factory floor, its core functionality can easily be apprehended in the same way by control engineer. For more detail about DBus please read [[Software/dbus|related specification]].
 DBPC:: DBPC is a layer above DBUS which define a standard set of objects, interfaces and methods for use in process control and manufacturing automation applications to facilitate interoperability. Primary goal is defining a common communication language for real time communication of plant data between control devices from different manufacturers and SCADA, HMI, process control and open source applications.
 DBPC-server:: DBPC servers are service who provide common items access trough DBus. Generally a DBPC server grants real time data access to one or more remote programmable logic controller. Typically DBus servers represent a field bus protocol. (For example : ModbusTCP DBPC server, Profibus DBPC server).
 DBPC-client:: DBPC client are application who access to one or more remote programmable logic controller via DBus.
 Field bus:: ...in progress...
 PLC:: Programmable logical controller. in progress...
 Item:: ...in progress...
 Physical view:: ...in progress...
 Logical view:: ...in progress...

== Specification ==
 Part 1, DBPC Mechanisms::  ...in progress...(add here link to a new page + summary)...
 Part 2, DBPC Objects, interfaces and methods description::  ...in progress...(add here link to a new page + summary)...
 Part 3, DBPC Server specification::  ...in progress...(add here link to a new page + summary)...
 Part 4, DBPC Standard Configuration file::  ...in progress...(add here link to a new page + summary)...
 Part 5, DBPC Common Gui configuration tool guideline::  ...in progress...(add here link to a new page + summary)...

== FAQ ==
=== Is DBPC for Linux similar to OPC-DA for Windows ? ===
[[http://www.opcfoundation.org/Default.aspx/01_about/01_whatis.asp?MID=AboutOPC|OPC-DA]]
was designed to bridge Windows based applications and process control hardware and software applications. Standard defines consistent method of accessing field data from plant floor devices. Actually, OPC-DA is probably the most common interoperability tool used in automation and process control world.

Same needs for interoperability is also desired in Linux world. Unfortunately OPC-DA is based on the OLE, COM, and DCOM technologies developed by Microsoft for the Microsoft Windows operating system family. Then a Linux port is not realistic. As a result of, DBPC as been created, having in mind that final users needs to find same habits they get used to work with. So from this point of view, DBPC and OPC-DA sould appear similar.

Nevertheless, DBPC distinguish of OPC-DA in one sens that it target to exploit full advantage and benefit provided by Linux and Open source software development.  

=== What about OPC-UA? ===
[[http://www.opcfoundation.org/Default.aspx/01_about/UA.asp?MID=AboutOPC|OPC-UA]]
has been created for make up OPC-DA lacke. In some years, OPC-UA will probably replace OPC-DA in Windows world as is it strategically designed to. Contrary, in linux, OPC-UA and DBPC will stay complimentary.

  * In one hand, OPC-UA will be more suitable for network automation interoperability because it is XML based and include authentication support. 

  * In the other hand  DBPC will be more suitable for embedded systems, heavy loaded servers and human machine interfaces, because it is binary oriented. Besides DBPC is rooted in Linux thanks to D-bus which allow deep system integration and easy application development. 

In fact OPC-UA will benefit of DBPC and reciprocally. As a reslut of OPC-UA will be implemented as a upper layer above DBPC as will may be XMP-RPC, SOAP, CGI and so on. 
