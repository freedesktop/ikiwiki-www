{{attachment:DBPC-logo-nb.png|alt DBPC logo}}


== Overview ==

Since popularity of Linux operating system in industrial environment increase, needs for interoperability between Linux applications and industrial equipment come true. The main goal of DBPC is to define robust and reliable standards set of objects, interfaces and methods for use in process control and manufacturing automation applications to facilitate interoperability.

DBPC is based on D-Bus which is a message bus and activation system that is set to achieve deep penetration in the Linux.


== Participate ==

If you have ideas you want to suggest but don't want to edit this main document, please go to the [[/Discussion|Discussion Page]].


== Synoptic ==

{{attachment:DBPC-Synoptic.png|alt DBPC Synoptic}}

Trivial diagrammatic description of DBPC architecture. 


== Definitions ==

 DBus:: Formally, D-Bus is an inter-process communication mechanism. Simply, DBus is a software data bus which permits communication between applications. Unless it is not a process field bus as used in factory floor, its core functionality can easily be apprehended in the same way by control engineer. For more detail about DBus please read [[Software/dbus|related specification]].

 DBPC:: DBPC is a layer above DBUS which define a standard set of objects, interfaces and methods for use in process control and manufacturing automation applications to facilitate interoperability. Primary goal is defining a common communication language for real time communication of plant data between control devices from different manufacturers and SCADA, HMI, process control and open source applications.

 DBPC-server:: DBPC servers are services which provide common items access trough DBus. Generally a DBPC server grants real time data access to one or more remote programmable logic controller. Most of time is done by pooling. Typically DBus servers represent a field bus protocol. (For example : ModbusTCP DBPC server, Profibus DBPC server).

 DBPC-client:: DBPC client are compliant application which access to items in one or more DBPC-server.

 Field bus:: Fieldbus is an industrial automation network system for real-time distributed control. It is a way to interconnect instruments, actuator and sensor with controller. Field buses typically take place in a plant. Many fieldbus competing technologies exist. So merging them in D-Bus is a brave goal followed by DBPC.   

 PLC:: Programmable logical controller. Programmable logic controllers are a digital computer used for automation of electromechanical processes. Unlike general-purpose computers, the PLC are designed for multiple inputs and output arrangements, extended temperature ranges, immunity to electrical noise, and resistance to vibration and impact. Majors world PLC manufacturer are Siemens Simatic, Allen Bradeley, Telemecanique and GE fanuc. Although the norm IEC 61131-3 define PLC programming languages each manufacturer has its own programming tool. Interoperability is not the priority of PLC manufacturers.  

 Item:: Each data point available trought a DBPC server are called Items. Mainly, items correspond to physical value, factory state, command signals, and so on.  


== Audience and related benefit ==

==== Process control and automation engineers ====
Probably you job is driven around one of those heavy proprietary application supplied by a famous manufacturer. Actually most of your evolution possibilities are closely related to this business. Every update, option or runtime are generously charged for. You job is driven by wizards meant to simplify your life, save you time and hide real world complexity. Thanks a DBPC, there will be a time when you will may recover you power and freedom over you factory equipment. DBPC Trough D-Bus will open you automation to a wide variety of Linux applications. And even, ultimate DBPC's goal could be an industrial oriented Linux distribution. A live Linux distribution may allow setup of a full working HMI from scratch very quickly.

==== Open source programmers ====
There is some pretty good HMI and SCADA tools developed for Linux by the open source community. Unfortunately, each data acquisition library has to be adapted individually for each protocol and this is done in each project. It is a difficult and time consuming task which slow down those open source initiative. An important point of DBPC's philosophy is to consider that time of each voluntary programmer is very precious. As a specification, DBPC will allow those programmer sharing they effort and so increasing project efficiency. Consequently, after having resolved the problem caused by data acquisition, programmer can devote their full attention to the core of there own application. 

==== Industrial equipment manufacturer ====
Each respectable industrial computer supplier provide models with pre-installed Linux. So, as industrial equipment manufacturer you may be interested to make your products able to work with Linux too. Thanks to your own DBPC-server, you will be able to provid a general Linux support. Unlike a library, your product is usable directly without the need of programming. DBPC let you choose between several development models:
 * You sponsor the open source community for a Specific DBPC-server according to your specifications.
 * You create you own server by yourself and publish it according to you business model.
 * You only publish your specification and allow the open source community to voluntary create a DBPC-server.

==== Industrial embedded systems programmer ====
Although, D-Bus is very suitable for HMI because it as been created for graphical desktop  inter process communication, it can be used without a full graphical environment. In addition, D-Bus need few resource, it is easily portable and robust. So D-Bus for process control will feel good in embedded system. Naturally, it is also convenient to think that those quality may also be good for heavy loaded automation servers. 

==== Education ====
Industries miss well qualified people. As a result of easy and free availability, DBPC let student and professionals  to increase there practical and knowledge while learning by doing. As every Linux professional tools, and for people who want go further, DBPC may be technically demanding and should allow going deep inside.

DBPC is also a infinite field of experimentation for Education graduate project.


== Specification ==

 Part 1, DBPC Mechanisms::  ...in progress...(add here link to a new page + summary)...
 Part 2, DBPC Objects, interfaces and methods description::  ...in progress...(add here link to a new page + summary)...
 Part 3, DBPC Server specification::  ...in progress...(add here link to a new page + summary)...
 Part 4, DBPC Standard Configuration file::  ...in progress...(add here link to a new page + summary)...
 Part 5, DBPC Common Gui configuration tool guideline::  ...in progress...(add here link to a new page + summary)...


== FAQ ==

=== Is DBPC for Linux similar to OPC-DA for Windows ? ===
[[http://www.opcfoundation.org/Default.aspx/01_about/01_whatis.asp?MID=AboutOPC|OPC-DA]]
was designed to bridge Windows and process control hardware and software applications. Standard defines consistent method of accessing field data from plant floor devices. Actually, OPC-DA is probably the most common interoperability tool used in automation and process control world.

Same needs for interoperability is also desired in Linux world. Unfortunately OPC-DA is based on the OLE, COM, and DCOM technologies developed by Microsoft for the Microsoft Windows operating system family. Then a Linux port is not realistic. As a result of, DBPC as been created, having in mind that final users needs to find same habits they get used to work with. So from this point of view, DBPC and OPC-DA sould appear similar.

Nevertheless, DBPC distinguish of OPC-DA in one sens that it target to exploit full advantage and benefit provided by Linux and Open source software development. Although, DBPC still to encourage, manufacturer providing there own DBPC compliant tools.  

=== What about OPC-UA? ===
[[http://www.opcfoundation.org/Default.aspx/01_about/UA.asp?MID=AboutOPC|OPC-UA]]
has been created for make up some OPC-DA lack. Actually, OPC-UA seems to be pushed to replace OPC-DA in Windows world. Contrary, in linux, OPC-UA and DBPC will stay complimentary.

  * In one hand, OPC-UA will be more suitable for automation network and inter-systems interoperability, because it is XML based and include authentication support.  

  * In the other hand DBPC is rooted in Linux thanks to D-bus which allow deep system integration and easy application development. Besides D-Bus is low-latency and low-overhead, designed to be small and efficient to minimize round-trips. So very suitable for embedded systems as well as fanless touchscreen HMI. In addition, the protocol is binary, not textual, which removes the costly serialization process.  

In fact OPC-UA will benefit of DBPC and reciprocally. As a reslut of OPC-UA will be implemented as a upper layer above DBPC similar to XMP-RPC, SOAP, CGI and so on.

=== There is many interprocess communication or networking protocols. Why D-BUS ? ===

A first approach may be reading [[http://dbus.freedesktop.org/doc/dbus-faq.html#other-ipc|D-Bus FAQ]], 9 to 18 which compare D-Bus with several IPC. Obviously, benefit of B-Bus benefit to DBPC too. 

More precisely, When choosing an IPC for process control in Linux, some criteria where decisive : 
 * Availability : D-Bus have been integrated in Gnome and KDE desktop. This mean long term perspective and good support. 
 * Portability : D-Bus is very portable to any Linux or UNIX flavor, and a port to Windows is in progress. 
 * Liability : The D-Bus low-level API reference implementation and protocol have been heavily tested in the real world over several years, and are now "set in stone."
 * Multi-language support : D-Bus is supported by most common Linux programming language : C, C++, Java, Python, Perl, and so one. 
 * Scripting : D-Bus can be used from terminal which mean bash scripting.
 * Efficiency : D-Bus is light enough to be implemented in low performance hardware and embedded systems.
 * Openness : A a side effect, Instead of DBPC, HMI application can also benefit of all Desktop application supporting D-Bus connectivity.
 * Simplicity : It is easy to start programming D-Bus support.
