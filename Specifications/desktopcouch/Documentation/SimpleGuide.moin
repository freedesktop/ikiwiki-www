= Simple Guide to using desktopcouch in your applications =

This document describes in basic terms how to store data to and retrieve data from desktopcouch for application developers.

== desktopcouch.records ==

`desktopcouch.records` is the Python library for accessing desktopcouch from applications. Basic use is as follows (simple examples are also available offline in `/usr/share/doc/python-desktopcouch-records/api/records.txt`):

{{{
>>> from desktopcouch.records.server import CouchDatabase
>>> from desktopcouch.records.record import Record
}}}

Create a database object. Your database needs to exist. If it doesn't, you
can create it by passing create=True.

{{{
>>> db = CouchDatabase('testing', create=True)
}}}

Create a Record object. Records have a record type, which should be a
URL.  The URL should point to a human-readable document which
describes your record type. (This is not checked, though.) You can
pass in an initial set of data.

{{{
>>> r = Record({'a':'b'}, record_type='http://example.com/testrecord')
}}}

Records work like Python dicts.

{{{
>>> r['c'] = ['d','e','f']
}}}

Save the record into the database with put_record:

{{{
>>> record_id = db.put_record(r)
}}}

Fetch existing records from the database by ID:

{{{
>>> fetched = db.get_record(record_id)
>>> print fetched['a']
b
>>>
}}}

There is no ad-hoc query functionality.

For views, you should specify a design document for most all calls.

{{{
>>> design_doc = "application"
}}}

To create a view:

{{{
>>> map_js = """function(doc) { emit(doc._id, null) }"""
>>> reduce_js = None
>>> db.add_view("blueberries", map_js, reduce_js, design_doc)
}}}

List views for a given design document:

{{{
>>> db.list_views(design_doc)
['blueberries']
}}}

Test that a view exists:

{{{
>>> db.view_exists("blueberries", design_doc)
True
}}}

Execute a view.  Results from execute_view() take list-like syntax to
pick one or more rows to retrieve.  Use index or slice notation.

{{{
>>> result = db.execute_view("blueberries", design_doc)
>>> for row in result["idfoo"]:
...     pass  # all rows with id "idfoo".  Unlike lists, may be more than one.
}}}

Finally, remove a view.  It returns a dict containing the deleted view data.

{{{
>>> db.delete_view("blueberries", design_doc)
{'map': 'function(doc) { emit(doc._id, null) }'}
}}}

For most operations (except testing existence), if the view you ask for does
not exist, the function will throw a KeyError exception.

There are also some introductory desktopcouch code snippets on the [[https://wiki.ubuntu.com/Quickly/Snippets|Quickly code snippets]] page.

== couchdb-glib ==

`couchdb-glib` is a C library for accessing CouchDB servers, included desktopcouch. It heavily uses Glib's GObject to offer a nice API that easily integrates into GNOME/GTK applications.

To start using, first thing is to include the top-level header file
{{{
#include <couchdb-glib/couchdb-glib.h>
}}}

The entry point for the API is the ''CouchDB'' object, which can be obtained as shown in the following example:
{{{
CouchDB *couchdb;

couchdb = couchdb_new ("http://localhost:5984");
}}}
The only argument to ''couchdb_new'' is the URL of the CouchDB instance to connect to. If NULL, it would use the system-wide CouchDB instance (located at http://localhost:5984). Also, take into account that at the time of this writing, couchdb-glib doesn't know anything specific about desktopcouch, so you need to get the port and OAuth credentials as shown [[http://git.gnome.org./cgit/evolution-couchdb/tree/addressbook/e-book-backend-couchdb.c|here]] (see function ''e_book_backend_couchdb_load_source'' in that code). Code to do this automatically for you is being added to couchdb-glib unstable version, so should be available soon in the stable API.

Once you have a ''CouchDB'' object, you can do all the operations the API provides from it. Please note that most of the API functions have a ''GError'' argument as the last parameter, which is used to return error information to the caller.

=== Working with databases ===
First, you can list the databases that are available:
{{{
GSList *couchdb_list_databases (CouchDB *couchdb, GError **error);
}}}
This would return a list of ''CouchDBDatabaseInfo'' structures, which contain information (such as database name, number of documents, etc) for each database available on the CouchDB instance you're connecting to. If you already know the name of a database, you can easily obtain that information for that specific database with the following function:
{{{
CouchDBDatabaseInfo *couchdb_get_database_info (CouchDB *couchdb, const char *dbname, GError **error);
}}}

You can also create new databases:
{{{
gboolean couchdb_create_database (CouchDB *couchdb, const char *dbname, GError **error);
}}}

Or delete existing databases:
{{{
gboolean couchdb_delete_database (CouchDB *couchdb, const char *dbname, GError **error);
}}}

Also, before starting to work with documents on a specific database, you might want to listen for changes on the database(s) you're working with. To do so, you just need to call the following function:
{{{
void couchdb_listen_for_changes (CouchDB *couchdb, const char *dbname);
}}}
This will setup a listener for changes on the database specificied by the ''dbname'' argument. Notification of changes are sent to the caller via GObject's signals, so to actually receive those notifications in your application, you would need to connect to one (or all) of the following signals of the ''CouchDB'' object:
{{{
void (* database_created) (CouchDB *couchdb, const char *dbname);
void (* database_deleted) (CouchDB *couchdb, const char *dbname);
void (* document_created) (CouchDB *couchdb, const char *dbname, CouchDBDocument *document);
void (* document_updated) (CouchDB *couchdb, const char *dbname, CouchDBDocument *document);
void (* document_deleted) (CouchDB *couchdb, const char *dbname, const char *docid);
}}}
If you don't call ''couchdb_listen_for_changes'' on your program, you might still get some notifications through these signals of the changes done through your application, but you won't get any notification for external changes.

=== Working with documents ===
Once you know what database you'll be working with, you can use the documents part of the API. First, to list documents on a specific database:
{{{
GSList          *couchdb_list_documents (CouchDB *couchdb, const char *dbname, GError **error);
}}}
This returns a list of ''CouchDBDocumentInfo'', which is a struct that contains the unique identifier and last revision number for a specific document.

To get a specific document:
{{{
CouchDBDocument *couchdb_document_get (CouchDB *couchdb,
                                       const char *dbname,
                                       const char *docid,
                                       GError **error);
}}}
This returns a ''CouchDBDocument'' object, which lets you read/modify a document in memory. You can also create an empty ''CouchDBDocument'' object in memory with the ''couchdb_document_new'' function, for later saving it to the database. There are several functions you'd want to know for retrieving/setting fields' data on a document:
{{{
gboolean         couchdb_document_has_field (CouchDBDocument *document, const char *field);
void             couchdb_document_remove_field (CouchDBDocument *document, const char *field);
gboolean         couchdb_document_get_boolean_field (CouchDBDocument *document, const char *field);
void             couchdb_document_set_boolean_field (CouchDBDocument *document, const char *field, gboolean value);
gint             couchdb_document_get_int_field (CouchDBDocument *document, const char *field);
void             couchdb_document_set_int_field (CouchDBDocument *document, const char *field, gint value);
gdouble          couchdb_document_get_double_field (CouchDBDocument *document, const char *field);
void             couchdb_document_set_double_field (CouchDBDocument *document, const char *field, gdouble value);
const char      *couchdb_document_get_string_field (CouchDBDocument *document, const char *field);
void             couchdb_document_set_string_field (CouchDBDocument *document, const char *field, const char *value);
CouchDBStructField *couchdb_document_get_struct_field (CouchDBDocument *document, const char *field);
void             couchdb_document_set_struct_field (CouchDBDocument *document,
                                                    const char *field,
                                                    CouchDBStructField *value);
}}}
These functions allow you to check for the existence of a field in a document (''couchdb_document_has_field''), remove a field from it (''couchdb_document_remove_field'') and retrieve/set the value of a field in different formats (boolean, integer, double, string). A special mention is needed for the ''couchdb_document_get_struct_field'' and ''couchdb_document_get_struct_field'', which allow you to have object fields (or structs, if you find it easier to understand it that way) on your documents. Object fields can in turn contain other object fields, and they are manager by the ''CouchDBStructField'' object, which contains very similar methods to those of ''CouchDBDocument'' shown above:
{{{
gboolean            couchdb_struct_field_get_boolean_field (CouchDBStructField *sf, const char *field);
void                couchdb_struct_field_set_boolean_field (CouchDBStructField *sf, const char *field, gboolean value);
gdouble             couchdb_struct_field_get_double_field (CouchDBStructField *sf, const char *field);
void                couchdb_struct_field_set_double_field (CouchDBStructField *sf, const char *field, gdouble value);
gint                couchdb_struct_field_get_int_field (CouchDBStructField *sf, const char *field);
void                couchdb_struct_field_set_int_field (CouchDBStructField *sf, const char *field, gint value);
const char         *couchdb_struct_field_get_string_field (CouchDBStructField *sf, const char *field);
void                couchdb_struct_field_set_string_field (CouchDBStructField *sf, const char *field, const char *value);
CouchDBStructField *couchdb_struct_field_get_struct_field (CouchDBStructField *sf, const char *field);
void                couchdb_struct_field_set_struct_field (CouchDBStructField *sf, const char *field, CouchDBStructField *value);
}}}
Once you have modified your document and want to save it to the database, you use the following function:
{{{
gboolean couchdb_document_put (CouchDBDocument *document,
                               const char *dbname,
                               GError **error);
}}}
Also, you can remove documents, based on their unique ID:
{{{
gboolean couchdb_document_delete (CouchDBDocument *document, GError **error);
}}}

=== Working with contacts ===
couchdb-glib provide high-level API for dealing with ''CouchDBDocument'' that are contacts. For that, you can use the following functions:
{{{
const char *couchdb_document_contact_get_first_name (CouchDBDocument *document);
void        couchdb_document_contact_set_first_name (CouchDBDocument *document, const char *first_name);
const char *couchdb_document_contact_get_last_name (CouchDBDocument *document);
void        couchdb_document_contact_set_last_name (CouchDBDocument *document, const char *last_name);
const char *couchdb_document_contact_get_nick_name (CouchDBDocument *document);
void        couchdb_document_contact_set_nick_name (CouchDBDocument *document, const char *nick_name);
const char *couchdb_document_contact_get_spouse_name (CouchDBDocument *document);
void        couchdb_document_contact_set_spouse_name (CouchDBDocument *document, const char *spouse_name);
const char *couchdb_document_contact_get_birth_date (CouchDBDocument *document);
void        couchdb_document_contact_set_birth_date (CouchDBDocument *document, const char *birth_date);
const char *couchdb_document_contact_get_wedding_date (CouchDBDocument *document);
void        couchdb_document_contact_set_wedding_date (CouchDBDocument *document, const char *wedding_date);

const char *couchdb_document_contact_get_company (CouchDBDocument *document);
void        couchdb_document_contact_set_company (CouchDBDocument *document, const char *company);
const char *couchdb_document_contact_get_department (CouchDBDocument *document);
void        couchdb_document_contact_set_department (CouchDBDocument *document, const char *department);
const char *couchdb_document_contact_get_title (CouchDBDocument *document);
void        couchdb_document_contact_set_title (CouchDBDocument *document, const char *title);
const char *couchdb_document_contact_get_job_title (CouchDBDocument *document);
void        couchdb_document_contact_set_job_title (CouchDBDocument *document, const char *job_title);
const char *couchdb_document_contact_get_manager_name (CouchDBDocument *document);
void        couchdb_document_contact_set_manager_name (CouchDBDocument *document, const char *manager_name);
const char *couchdb_document_contact_get_assistant_name (CouchDBDocument *document);
void        couchdb_document_contact_set_assistant_name (CouchDBDocument *document, const char *assistant_name);
const char *couchdb_document_contact_get_office (CouchDBDocument *document);
void        couchdb_document_contact_set_office (CouchDBDocument *document, const char *office);

GSList     *couchdb_document_contact_get_email_addresses (CouchDBDocument *document);
void        couchdb_document_contact_set_email_addresses (CouchDBDocument *document, GSList *list);

GSList     *couchdb_document_contact_get_phone_numbers (CouchDBDocument *document);
void        couchdb_document_contact_set_phone_numbers (CouchDBDocument *document, GSList *list);

GSList     *couchdb_document_contact_get_addresses (CouchDBDocument *document);
void        couchdb_document_contact_set_addresses (CouchDBDocument *document, GSList *list);

GSList     *couchdb_document_contact_get_im_addresses (CouchDBDocument *document);
void        couchdb_document_contact_set_im_addresses (CouchDBDocument *document, GSList *list);

GSList     *couchdb_document_contact_get_urls (CouchDBDocument *document);
void        couchdb_document_contact_set_urls (CouchDBDocument *document, GSList *list);

const char *couchdb_document_contact_get_notes (CouchDBDocument *document);
void        couchdb_document_contact_set_notes (CouchDBDocument *document, const char *notes);
}}}
They allow you to easily get/set values from the contacts records without having to remember the names of the fields
