# Use cases

### Users who can only use a keyboard

Need keyboard shortcuts for all actions in applications.

Need to be able to drive the mouse for positioning actions (-> MouseKeys)

### Users who can only use a joystick

Need to be able to drive the mouse

### Users who can only use a mouse or a button

Need to use a virtual keyboard.

### Half-keyboard

For people with one hand, using a toggle to "mirror" the keyboard layout. Some implementations use xkb: 
[[http://blog.xkcd.com/2007/08/14/mirrorboard-a-one-handed-keyboard-layout-for-the-lazy/]] , others use extensions: [[http://kieranbingham.co.uk/implementing-xhk/]] , [[https://github.com/kbingham/xhk]]

### AccessX

Done in Xorg, in progress in Wayland

* StickyKeys: modifiers are sticky so the user does not have to be able to press several keys at the same time
* MouseKeys: mouse can be driven from the keyboard
* SlowKeys: only keys that are held for a longtime produce a key event.
* RepeatKeys: the repeat delay can be set to a very long time.
* ToggleKeys: makes an audible feedback when a toggle (capslock, numlock) is enabled (beep once) or disabled (beep twice)
* BounceKeys: ignores rapide, repeated key events for the same key

### Navigation shortcuts

The user uses shortcuts to tell the screen reader specific actions (read the current line, the current character, spell the current word, detail the attributes of the text, get the content of the status bar, change feedback verbosity level, navigate the interface with global view)

To avoid interfering with usual shortcuts, this is typically done with a "screen reader" key that needs to be pressed like a modifier. Typically, insert and capslock are used. For instance, one types insert-v to change the verbosity level. Double-typing that key however allows to achieve the original behavior.

### Braille typing

Some Braille output devices have braille keys, numbered from dot 1 to dot 8. One would for instance type dot 1 to type "a", which is sent by the device to the computer as "a" (not as dot1), which needs to be interpreted as such by the application. Pressing dot 1 and dot 2 at the same time produces "b", which is sent as such by the device, and so one.

Some people can not afford a Braille output device with such keys, and would use the keyboard to type Braille, using keys 'a', 's', 'd', 'f', 'j', 'k', 'l', ';' in a chord. For instance, the 'f' keyboard key is dot 1, and thus typing it alone produces "a". The 'd' keyboard key is dot 2, and thus typing both 'f' and 'd' at the same time produces "b".

Braille contains abreviations. For instance, dot1 ("a") followed by dot1+dot2 ("b") is a contraction for "about". Typing dot1 alone then dot1 and dot2 together, then a word separator character, should expand the contraction to produce "about".

### Global positioning

The user uses e.g. a touchpad as a global positioning device within a virtual field, while another device provides tactile feedback of the virtual field. For instance, allows to get feedback on the frames of the windows of the desktop.

### To be continued...

---

# Ways to achieve them

### Mouse event injection

Orca needs this for clicking in flat review mode

See [[https://bugzilla.gnome.org/show_bug.cgi?id=709999]]

### Absolute mouse coordinates event

Orca needs this for flat review

See [[https://bugzilla.gnome.org/show_bug.cgi?id=710012]]

### Key injection

We need to be able to inject both untranslated key presses and translated keypresses, as some specific devices or handling happen to provide both of them.

* keycode injection
 * Available in Xorg through XTest
* keysym injection
 * Not available in Xorg, have to backtranslate.
 * Could be done by adding EV_KEYSYM and EV_UNICODE to evdev layer.

Wayland: this is completely missing apparently?

A bridge for dogtail was implemented on [[https://gitlab.gnome.org/ofourdan/gnome-ponytail-daemon]] but this is more of a hack

### input stealing

We need to be able to steal input event, for instance:

* Orca wants to eat all capslock key presses/releases, to be able to use it for its own shortcuts
* feedback applications want to eat all mouse events from a given touchpad, getting absolute coordinates from it, to use it as a positioning device.

### PC braille keyboard

* Available in Xorg as the brai xkb layout
* ibus module available: [[https://gitlab.com/smc/ibus-braille]]

