[http:/~jonsmirl/model.png http:/~jonsmirl/model.png]

Xegl is built on many layers that you will need to get from several different places. So get a cup of coffee, this is going to take you at least an hour to build.

Currently only Radeon R200 hardware under Linux is functioning.

 * [http://linuxconsole.sourceforge.net/ fbdev - Linux framebuffer console graphics]

 fbdev provides the mode list, mode setting, scanout configs, hardware cursor, and panning. It is part of the Linux kernel. Very recent, 2.6.13-rc5 or better, kernels have all the needed patches. There are fbdev changes planned that may require patches in the near future. Xegl depends on sysfs support from fbdev. Look in /sys/class/graphics/fb0 to see fbdev's sysfs attributes.

 * [http://dri.freedesktop.org/wiki/DRM DRM - Direct Rendering Manager]

 DRM provides an interface to the 3D portion of the graphics chip. Currently Xegl only works on the r200 DRM driver. The r200 DRM driver in the kernel does not contain the needed changes, you will need to compile the driver from CVS.

 {{{
$ cvs -z3 -d:pserver:anonymous@dri.freedesktop.org:/cvs/dri login
CVS password: <hit return>
$ cvs -z3 -d:pserver:anonymous@dri.freedesktop.org:/cvs/dri co drm
}}}

 Xegl is designed to run without needing root privilege. The DRM code currently in CVS still requires that run as root to use DRM. You can either choose to run everything as root or apply this patch which opens up DRM for non-root use: [http://dri.freedesktop.org/~jonsmirl/drm_no_root.patch drm_no_root.patch]


 Change directory to drm/linux-core and make

 * [http://mesa3d.sourceforge.net/ Mesa - Open source OpenGL]
 * [http://dri.freedesktop.org/wiki/ DRI - Direct Rendering Infrastructure]

 Mesa and DRI are in the same source code tree. Login as an anonymous user:

 {{{
$ cvs -d:pserver:anonymous@cvs.freedesktop.org:/cvs/mesa login
CVS password: <hit return>
$ cvs -d:pserver:anonymous@cvs.freedesktop.org:/cvs/mesa co Mesa
}}}

 Next build libGL.so, r200_dri.so, libEGL.so, libEGLdri.so and some other libraries. 
 
 {{{
$ cd Mesa
$ make linux-dri
}}}

 When done you will have libGL which is the generic OpenGL code, libEGL the generic EGL code, r200_dri the r200 chip specific DRI driver, libEGLdri an EGL driver for DRI. There are some sample programs in progs/egl.

 * [:Software_2fglitz:Cairo/glitz - Cairo running on OpenGL]

 Glitz implements [http://www.keithp.com/~keithp/render/protocol.html X Render] using OpenGL. This serves two purposes, glitz can be a backend for the Cairo drawing library and it can also be a backend for an X server. Xegl uses glitz as its backend library for drawing.

 {{{
$ cvs -d:pserver:anoncvs@cvs.freedesktop.org:/cvs/cairo login
CVS password: <hit return>
$ cvs -d:pserver:anoncvs@cvs.freedesktop.org:/cvs/cairo co glitz
}}}

 You will need to pick somewhere to install glitz and other libraries that are built later. The install location is controlled with --prefix on ./configure

 {{{
$ cd glitz
$ ./autogen.sh --enable-egl --prefix=/opt/xegl 
$ make
$ make install
}}}

 * [http://wiki.x.org/wiki/ModularDevelopersGuide : Modularized X libraries]

 To check out the modular tree, you will need to check out each of the modules:
 {{{
$ mkdir xorg
$ cd xorg
$ cvs -d :pserver:anoncvs@cvs.freedesktop.org:/cvs/xorg login
CVS password: <hit return>
$ cvs -d :pserver:anoncvs@cvs.freedesktop.org:/cvs/xorg -f co app data doc driver font lib proto util xserver
}}}

 Note the `-f` option, which will override your current `.cvsrc` defaults.  This is necessary to make sure that you do not use the `-P` option to remove empty directories, which will cause problems with the symlink script.  Also note that if other people add directories to a module and you already have that module checked out, you need to run `cvs -f update -d` to make sure that new and possibly empty directories will be created.

 After checking out the modular tree, you will also need to check out a monolithic tree, if you don't already have one checked out.  This tree is required by the symlink script.
 {{{
$ cvs -d :pserver:anoncvs@cvs.freedesktop.org:/cvs/xorg co xc
}}}

 Once you have both the modular and monolithic trees checked out, you can use the symlink script, `util/modular/symlink.sh`, to link the source files as follows:
 {{{
$ util/modular/symlink.sh /insert-full-path/xorg/xc .
}}}

 Note that the symlink script requires a full path to the modular tree.

 Now that you have a modular tree ready to use in `xorg`, the proto module components can be built, installed and packaged as follows:
 {{{
$ cd src/proto/X11
$ ./autogen.sh --prefix=/opt/xegl
$ make install
$ make distcheck
}}}

 There is nothing to make in the proto module components since there are only header files that need to be installed.  `make install` will create the directories in `/opt/egl` as needed and then install the headers and the pkgconfig metadata file.  Creating the packages for the various components is very easy with the autotools -- simply run `make dist` or `make distcheck`.  I would recommend using `distcheck` since it will both create the package as well as test it to make sure that it builds properly.

 You need to build all the modular components, a script has been developed to run the above steps for each module in the order required by their various interdependencies.   It can be found in the modular tree in `modular/util/build.sh`. It requires the path to the `prefix` directory you want all the modules to be installed under as it's first argument. If you don't have a full existing recent X build on your system, you may also need to set your PATH to include the bin subdirectory from the install area so that later components can find the programs installed by the earlier ones.

 {{{
$ cd xorg
$ PATH=/opt/xegl/bin:$PATH ./util/modular/build.sh /opt/xegl
}}}

 * [:Software_2fXgl: Xgl - X running on OpenGL]

 The Xegl server is built as part for the Xserver/kdrive project. 

 {{{
$ cvs -d :pserver:anoncvs@cvs.freedesktop.org:/cvs/xserver login
CVS password: <hit return>
$ cvs -d :pserver:anoncvs@cvs.freedesktop.org:/cvs/xserver co xserver
}}}

 {{{
$  ./autogen.sh --prefix=/opt/xegl --enable-egl
$ make
$ make install
}}}

 The next page tells how to [:Xegl-run: run and debug Xegl]

----
==== Jon Smirl - Aug 8, 2005 ====
