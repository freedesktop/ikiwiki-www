Xegl is built on many layers that you will need to get from several different places. Currently only Radeon R200 hardware under Linux is functioning.

 * [http://linuxconsole.sourceforge.net/ fbdev - Linux framebuffer console graphics]

 fbdev provides the mode list, mode setting, scanout configs, hardware cursor, and panning. It is part of the Linux kernel. Very recent, 2.6.13-rc5 or better, kernels have all the needed patches. There are fbdev changes planned that may require patches in the near future. Xegl depends on sysfs support from fbdev. Look in /sys/class/graphics/fb0 to see fbdev's sysfs attributes.

 * [http://dri.freedesktop.org/wiki/DRM DRM - Direct Rendering Manager]

 DRM provides an interface to the 3D portion of the graphics chip. Currently Xegl only works on the r200 DRM driver. The r200 DRM driver in the kernel does not contain the needed changes, you will need to compile the driver from CVS.

 {{{
$ cvs -z3 -d:pserver:anonymous@dri.freedesktop.org:/cvs/dri login
CVS password: <hit return>
$ cvs -z3 -d:pserver:anonymous@dri.freedesktop.org:/cvs/dri co drm
}}}

 Xegl is designed to run without needing root privilege. The DRM code currently in CVS still requires that run as root to use DRM. You can either choose to run everything as root or apply this patch which opens up DRM for non-root use: [http://dri.freedesktop.org/~jonsmirl/drm_no_root.patch drm_no_root.patch]

 Change directory to drm/linux-core and make

 * [http://mesa3d.sourceforge.net/ Mesa - Open source OpenGL]
 * [http://dri.freedesktop.org/wiki/ DRI - Direct Rendering Infrastructure]

 Mesa and DRI are in the same source code tree. Login as an anonymous user:

 {{{
$ cvs -d:pserver:anonymous@pdx.freedesktop.org:/cvs/mesa login
CVS password: <hit return>
$ cvs -d:pserver:anonymous@pdx.freedesktop.org:/cvs/mesa co Mesa
}}}

 Change into the mesa directory and 'make linux-dri'. This will build libGL.so, r200_dri.so, libEGL.so, libEGLdri.so and some other libraries. libGL is the generic OpenGL code, libEGL is the generic EGL code, r200_dri is the r200 chip specific DRI driver, libEGLdri is an EGL driver for DRI. There are some sample programs in progs/egl.

 * [http://www.freedesktop.org/wiki/Software_2fglitz Cairo/glitz - Cairo running on OpenGL]

 Glitz implements [http://www.keithp.com/~keithp/render/protocol.html X Render] using OpenGL. This serves two purposes, glitz can be a backend for the Cairo drawing library and it can also be a backend for an X server. Xegl uses glitz as its backend library for drawing.

 {{{
$ cvs -d:pserver:anoncvs@cvs.freedesktop.org:/cvs/cairo login
CVS password: <hit return>
$ cvs -d:pserver:anoncvs@cvs.freedesktop.org:/cvs/cairo co glitz
}}}

 You will need to pick somewhere to install glitz and other libraries that are built later. The install location is controlled with --prefix on ./configure

 {{{
$ cd glitz
$ ./autogen.sh
$ ./configure --enable-egl --prefix=/opt/xegl
$ make
$ su
Password:
$ make install
}}}

 * [http://www.freedesktop.org/wiki/Software_2fxlibs xlibs - modularized X libraries]

 Xegl is derived from kdrive which is part of the Xserver project. Xserver needs these modular X libraries to run.

 {{{
$ cvs -d:pserver:anoncvs@cvs.freedesktop.org:/cvs/xlibs login
CVS password: <hit return>
$ cvs -d:pserver:anoncvs@cvs.freedesktop.org:/cvs/xlibs co xlibs
}}}

 This will bring down a small script called build-em. Run this script with your install prefix. The script will checkout the needed subprojects and build and install them. You need to run this script as root if you need root priv to access the install destination. The PKG_CONFIG variable needs to point at your install destination.

 {{{
su
Password:
$ export PKG_CONFIG=/opt/xegl/lib/pkgconfig
$ ./build-em --prefix=/opt/xegl
}}}

 * [http://www.freedesktop.org/wiki/Software_2fXgl Xgl - X running on OpenGL]

 djdjdj

 * [http://www.freedesktop.org/wiki/Xegl Xegl - X running on standalone OpenGL]

 djdjdjd
