== Introduction ==

There are a number of metadata frameworks and indexers currently being developed such as Beagle and Kat that provide a rich source of metadata about files including such things as the author of a document or the artist of an mp3 file. The purpose of this specification is to define a common interface that each framework can implement to allow applications to tap into this wealth of information. Some examples of interested applications would include filemanagers that want to display and allow editing of this metadata as well as providing integrated search functionality and Virtual Folder capability (IE folders whose file contents are defined by metadata rather than physical location). This specification will define both an interface and a common set of "well-known" metadata.

== Metadata ==

Metadata is usually defined as data about data. In our case the metadata describes data about files and such metadata is user visible in office applications, document viewers and audio players. Metadata can typically be viewed or written by selecting "properties" from the file menu of one of these applications. 

Whilst there are some standards for naming document metadata like [http://dublincore.org/documents/dces/ Dublin Core], most desktop applications use a propriety set of metadata names. This specification will attempt to define a common set of metadata using a mixture of [http://dublincore.org/documents/dces/ Dublin Core], [http://en.wikipedia.org/wiki/Id3 ID3], [http://en.wikipedia.org/wiki/EXIF EXIF] as well as application specific metadata names. The purpose of these common matadata names is not just for the benefit of metadata frameworks and search engines but also for standardising the display of metadata in all applications. This specification only defines a common subset of all possible metadata and is not desingned to limit what metadata any file can have nor does it provide any formal names for custom or non-standard metadata. The only requirement for metadata names is that they are unique and do not overload or cause confusion with others. For non-generic metadata, each metadata item needs to be namespaced with its type using a '.' qualifier (EG ID3.Artist represents the metadata Artist for an audio file based on ID3 standard).

=== Generic Metadata ===

Generic metadata is applicable to all files regardless of their format. The specified metadata uses some [http://dublincore.org/documents/dces/ Dublin Core] based types and some custom ones. Note generic metadata types are not namespaced.

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| {{{Format}}}  || string ||  Mime type of the file ||
|| {{{Type}}}  || string || descriptive type of the file ||
|| {{{Size}}}  || uint64 || size of the file in bytes||
|| {{{Owner}}}  || string || size of the file in bytes||
|| {{{Description }}}|| string ||  User defined free text/notes ||
|| {{{Tags }}} || string ||  List of tags/keywords/emblems ||
|| {{{SmallThumbnailPath}}} || string || file uri for a small thumbnail of the file suitable for use in icon views ||
|| {{{LargeThumbnailPath}}} || string || file uri for a larger thumbnail of the file suitable for previews ||
|| {{{DateModified }}} || string ||  Last modified date in format YYYY-MM-DD-hh:mm:ss ||
|| {{{DateAccessed }}} || string ||  Last access date in format YYYY-MM-DD-hh:mm:ss ||
|| {{{DateIndexed }}} || string ||  Last indexed date in format YYYY-MM-DD-hh:mm:ss ||

=== Audio Metadata ===

Audio metadata is based on the widespread [http://en.wikipedia.org/wiki/Id3 ID3.1] tags embedded in mp3, ogg and similiar files. These are already defined in that specification. All metadata in this section is prefixed with "ID3" and it is recommended that any other metadata not listed below also uses this prefix if its ID3 related. 

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| {{{ID3.Title }}} || string ||  title of the track ||
|| {{{ID3.Artist}}} || string ||  artist of the track ||
|| {{{ID3.Album }}} || string ||  name of the album ||
|| {{{ID3.Year}}}    || integer || year track was released ||
|| {{{ID3.Comment}}}       || string || user definable comments on the track ||
|| {{{ID3.Genre }}}   || string || type of music classification for the track as defined in ID3 spec ||

=== Document Metadata ===

For documents, applications have typically used a mixture of Dublin Core types and propriety types. In order to be consistent with them, we have based our metadata names likewise. We have also based these names on metadata names found in OpenOffice and PDF documents. All metadata in this section is prefixed with "Doc" and any other custom document metadata should be likewise.

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| {{{Doc.Title}}}  || string ||  Title of document ||
|| {{{Doc.Subject}}} || string ||  document subject ||
|| {{{Doc.Author}}}  || string ||  name of the author ||
|| {{{Doc.Keywords}}}  || string || list of keywords||
|| {{{Doc.Comments}}}  || string || user definable free text ||
|| {{{Doc.PageCount}}}  || integer || no. of pages in document ||
|| {{{Doc.WordCount}}} || integer || total no. of chars in document ||

== The Interface ==

The Interface should be accessible via the Dbus session bus with the interface name '''org/freedesktop/file/metadata'''. Frameworks should implement this interface with a corresponding entry in their own dbus service file so applications can activate them via that interface. The interface must implement all methods and signals on object '''org.freedesktop.file.metadata''' as follows:

 === Methods ===

   * {{{GetMetaDataForFile}}} (returns a specific type of metadata for a given uri)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''input DBUS_TYPE_STRING s'' (the metadata type name) ||
    || ''output DBUS_TYPE_VARIANT v'' (the metadata value) ||

   * {{{SetMetaDataForFile}}} (sets a specific type of metadata for a given uri)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''input DBUS_TYPE_STRING s'' (the metadata type name) ||
    || ''input DBUS_TYPE_VARIANT v'' (the metadata value) ||

   * {{{GetAllMetaDataForFile}}} (returns all available metadata for a given uri)
    || ''input DBUS_TYPE_STRING'' s (the file's uri) ||
    || ''output DBUS_TYPE_DICT  a{sv}'' (the metadata as key,value pairs) ||

   * {{{GetMetaDataForFilesInFolder}}} (returns a specific type of metadata for all files in a given folder's uri)
    || ''input DBUS_TYPE_STRING s'' (the parent folder's uri) ||
    || ''input DBUS_TYPE_STRING s'' (the metadata type name) ||
    || ''output DBUS_TYPE_DICT  a{sv}'' (the metadata as filename, metadata key/value pairs) ||

   * {{{IsMetaDataForFileUpToDate}}} (returns whether a file's metadata is up to date)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''output DBUS_TYPE_BOOLEAN b'' (returns true if metadata is up to date on the given file uri. Usually this involves comparing the last modified date via a stat() call with the last indexed date generated by the framework for the file)||

   * {{{RefreshFileMetaData}}} (asks the framework to reindex and regenerate a file's metadata)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||

   * {{{SearchFileMetaData}}} (searches for files that matches a search criteria string)
    || ''input DBUS_TYPE_STRING s'' (the search string - format of this string can be found below) ||
    || ''output DBUS_TYPE_ARRAY as'' (array of file uris that matched the search string criteria) ||



 === Signals ===

   * {{{FileMetaDataChanged'}}} (emitted when any metadata has changed)
    || ''output DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''output DBUS_TYPE_STRING s'' (the metadata type name that was changed) ||
    || ''output DBUS_TYPE_VARIANT v'' (the new value for the metadata type) ||


== Searching Metadata ==

