= Introduction =

There are a number of metadata frameworks and indexers currently being developed such as [http://beaglewiki.org/Main_Page Beagle], [http://rcappuccio.altervista.org/ Kat] as well as a new system currently under development [http://freedesktop.org/wiki/Software/Tracker Tracker]. These frameworks provide a rich source of metadata about files including such things as the author of a document or the artist of an mp3 file. The purpose of this specification is to define a common interface that each framework can implement to allow applications to tap into this wealth of information. Some examples of interested applications would include filemanagers that want to display and allow editing of this metadata as well as providing integrated search functionality and virtual folder capability (IE folders whose file contents are defined by metadata rather than physical location). This specification will define both an interface and a common set of "well-known" metadata.

= Metadata =

Metadata is usually defined as data about data. In our case the metadata describes data about files that is often user visible in file managers, office applications, document viewers and audio players. Metadata can typically be viewed or written by selecting "properties" from the file menu of one of these applications. 

Whilst there are some standards for naming document metadata like [http://dublincore.org/documents/dces/ Dublin Core], most desktop applications use a propriety set of metadata names. This specification will attempt to define a common set of metadata using a mixture of [http://dublincore.org/documents/dces/ Dublin Core], [http://en.wikipedia.org/wiki/Id3 ID3] for audio files, [http://en.wikipedia.org/wiki/EXIF EXIF] for image files as well as application specific metadata names. The purpose of these common matadata names is not just for the benefit of metadata frameworks and search engines but also for standardising the display of metadata in all applications. 

== Metadata rules ==

The only requirement for metadata names is that they are unique and do not overload or cause confusion with each other. To make this possible, all metadata is namespaced by an appropriate class based on the type of the file or the application name (if the metadata is application specific).

This specification only defines a common subset of all possible metadata and is not designed to limit what metadata any file can have nor does it provide any formal names for custom or non-standard metadata other than a namespace class. 

None of the metadata defined in this specification is mandatory and the existence of any metadata is dependent on the framework being used and the files being indexed. 

All metadata defined here may be used in search strings.

Only metadata that is not derived from the file or file contents may be editable in the interface (applications that want to change non-writable metadata need to modify the embedded metadata in the file's contents themselves).




== Metadata Namespaces ==

For all metadata, each metadata item needs to be namespaced with its class type using a "." qualifier (EG Audio.Artist represents the metadata Artist for an audio class file). Metadata that is strictly application specific should use a namespace class based on the application name (EG "Nautilus.Window_Geometry").

This specification defines the following built-in classes:
 * File
 * Audio
 * Doc
 * Image


== Generic File Metadata ==

Generic file metadata is applicable to all files regardless of their format. The specified metadata uses a few [http://dublincore.org/documents/dces/ Dublin Core] based types where applicable with the rest being custom ones. Generic file metadata types are namespaced with the "File" class. Only some of the generic metadata may be writable. Custom metadata not listed below that is generic and applies to all files should also be namespaced with the "File" class unless it is strictly application specific.

|| ''' Name    ''' || '''   Type     ''' || '''Writable''' || '''    Description''' ||
|| {{{File.Name}}} || string || No || File name excluding path but including the file extension ||
|| {{{File.Path}}}  || string || No ||   full file path of file excluding the filename ||
|| {{{File.Link}}}  || string || No ||   Uri of link target ||
|| {{{File.Format}}}  || string || No ||   Mime type of the file or if a directory it should contain value "Folder"||
|| {{{File.Size}}}  || uint64 ||  No || size of the file in bytes or if a directory no. of items it contains||
|| {{{File.Owner}}}  || string ||  No || Owner of the file ||
|| {{{File.Group}}}  || string ||  No || File group ||
|| {{{File.Permissions}}} || string ||  No || Permission string in unix format eg "-rw-r--r--" ||
|| {{{File.Content}}}  || string ||  No || File's contents filtered as plain text (IE as stored by the indexer) ||
|| {{{File.Description}}} || string ||   Yes || Editable free text/notes ||
|| {{{File.Keywords }}} || array of string ||   Yes ||  Editable array of keywords ||
|| {{{File.Rank }}} || integer ||   Yes ||  Editable file rank for grading favourites. Value sould be in the range 1..10 ||
|| {{{File.IconPath }}} || string ||   Yes ||  Editable file uri for a custom icon for the file ||
|| {{{File.SmallThumbnailPath}}} || string ||   Yes || Editable file uri for a small thumbnail of the file suitable for use in icon views ||
|| {{{File.LargeThumbnailPath}}} || string ||   Yes || Editable file uri for a larger thumbnail of the file suitable for previews ||
|| {{{File.Modified }}} || string ||  No ||  Last modified date in format "YYYY-MM-DD hh:mm:ss" ||
|| {{{File.Accessed }}} || string ||  No ||  Last access date in format "YYYY-MM-DD hh:mm:ss" ||
|| {{{File.Indexed }}} || string ||   No || Last indexed date in format "YYYY-MM-DD hh:mm:ss" ||

== Audio Metadata ==

Audio metadata is based on the widespread [http://en.wikipedia.org/wiki/Id3 ID3.1] tags embedded in mp3, ogg and similiar files. These are already defined in that specification. All metadata in this section is prefixed with "Audio" and it is recommended that any other metadata not listed below also uses this prefix if its audio related (unless it is application specific). All the metadata here is not editable through the interface as all of it is derived from the file contents.

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| {{{Audio.Title }}} || string ||  title of the track ||
|| {{{Audio.Artist}}} || string ||  artist of the track ||
|| {{{Audio.Album }}} || string ||  name of the album ||
|| {{{Audio.Year}}}    || integer || year track was released ||
|| {{{Audio.Comment}}}       || string ||  comments on the track ||
|| {{{Audio.Genre }}}   || string || type of music classification for the track as defined in ID3 spec ||
|| {{{Audio.Codec}}}       || string || codec encoding description ||
|| {{{Audio.Samplerate}}}       || float || samplerate in Hz ||
|| {{{Audio.Bitrate}}}       || float || bitrate in kbps ||
|| {{{Audio.Channels}}}       || integer || no. of channels in the audio (2 = stereo) ||



== Document Metadata ==

For documents, applications have typically used a mixture of Dublin Core types and propriety types. In order to be consistent with them, we have based our metadata names likewise. We have also based these names on metadata names found in Open Office, Ms Word and PDF documents. All metadata in this section is prefixed with the "Doc" class and any otherd ocument based metadata should also have this prefix (unless it is application specific). All the metadata here is not editable through the interface as all of it is derived from the file contents.

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| {{{Doc.Title}}}  || string ||  Title of document ||
|| {{{Doc.Subject}}} || string ||  document subject ||
|| {{{Doc.Author}}}  || string ||  name of the author ||
|| {{{Doc.Keywords}}}  || string  || string of keywords||
|| {{{Doc.Comments}}}  || string || user definable free text ||
|| {{{Doc.PageCount}}}  || integer || no. of pages in document ||
|| {{{Doc.WordCount}}} || integer || total no. of chars in document ||
|| {{{Doc.Created }}} || string || date document was originally created in format "YYYY-MM-DD hh:mm:ss" ||

== Image Metadata ==

For images, most support the [http://en.wikipedia.org/wiki/EXIF EXIF] standard and so a subset of this makes up part of this specification. SVG files have user definable non-standard metadata so a subset of Dublin Core is also provided here. All metadata in this section is prefixed with the "Image" class and any other image based metadata should also have this prefix (unless it is application specific). All the metadata here is not editable through the interface as all of it is derived from the file contents.

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| {{{Image.Height}}}  || integer || Height in pixels ||
|| {{{Image.Width}}} || integer || Width in pixels ||
|| {{{Image.Title}}}  || string ||  Title of image ||
|| {{{Image.Date }}} || string || date image was originally created in format "YYYY-MM-DD hh:mm:ss" ||
|| {{{Image.Keywords}}} || string ||  string of keywords ||
|| {{{Image.Creator}}}  || string ||  name of the author ||
|| {{{Image.Comments}}}  || string || user definable free text ||
|| {{{Image.Description}}}  || string || description of the image ||
|| {{{Image.Software}}}  || string || software used to produce/enhance the image ||
|| {{{Image.CameraMake}}}  || string ||  make of camera used to take the image ||
|| {{{Image.CameraModel}}}  || string || model of camera used to take the image ||


= The Interface =

The Interface should be accessible via the Dbus session bus with the interface name '''org/freedesktop/file/metadata''' or be accessible in P2P mode where the address of the server to use can be read/set from a known configuration key. Frameworks should implement this interface with a corresponding entry in their own dbus service file so applications can activate them via that interface. The interface must implement all methods and signals on object '''org.freedesktop.file.metadata''' as follows:

== Methods ==

 * {{{GetMetaDataForFile}}}
 || Input || ||
 || || DBUS_TYPE_STRING s (the file's uri) ||
 || || DBUS_TYPE_ARRAY as (array of metadata types to retrieve including wildcards) ||
 || Output || ||
 || || DBUS_TYPE_DICT  a{sv} ||
 || Description || ||
 || || Returns specified types of metadata for a given file as key value pairs. If NULL is passed to the 2nd parmeter array then all available metadata is returned. You can easily get an entire metadata section by passing wildcards like "Audio.*" which will return all Audio related metadata for the file ||

----

 * {{{SetMetaDataForFile}}} 
 || Input || ||
 || || DBUS_TYPE_STRING s (the file's uri) ||
 || || DBUS_TYPE_STRING s (the metadata type name) ||
 || || DBUS_TYPE_VARIANT v (the metadata value) ||
 || Output || ||
 || || DBUS_TYPE_BOOL b (returns true if metadata was successfully written) ||
 || Description || ||
 || || Sets the specified types of metadata for a given file to the variant value. If metadata is not writable or is invalid then this method will return FALSE ||

----

 * {{{GetMetaDataForFilesInFolder}}} 
 || Input || ||
 || || DBUS_TYPE_STRING s (the folder uri) ||
 || || DBUS_TYPE_ARRAY as (array of metadata types to retrieve but no wildcards may be used) ||
 || Output || ||
 || || DBUS_TYPE_DICT  a{sv} ||
 || Description || ||
 || || returns the specificed types of metadata for all files in a given folder and is designed for use by file managers to retrieve metadata in bulk. By getting metadata for all files in a folder we can eliminate the IPC overhead which would be quite significant when retrieving metadata on a per file basis. The array of metadata types cannot contain wildcards and must explicity state the precise metadata type to be retrieved. If NULL is passed as the array then the returned variant will also be NULL too. The return value consists of the filename as the string key and the variant is a struct containing the metadata. The metadata values returned in the struct will be of the same type and in the same order as inputted in the array of metadata types. EG passing an array containing the values "File.Name" "File.Size" "File.Type" returns a key/variant array where variant is a struct containing corresponding values of File.Name, File.Size and File.Type in that order||

----

 * {{{RefreshFileMetaData}}}
 || Input || ||
 || || DBUS_TYPE_STRING s (the file's uri) ||
 || Description || ||
 || || asks the framework to reindex and regenerate a file's metadata ||
----

 * {{{SearchFileMetaData}}} 
 || Input || ||
 || || DBUS_TYPE_STRING s (the search string - format of this string can be found below) ||
 || Output || ||
 || || DBUS_TYPE_ARRAY as (array of file uris) ||
 || Description || ||
 || || searches for files that matches a search criteria string and returns an array of file URIs that matched ||

----

 * {{{SearchFileMetaDataDetailed}}} 
 || Input || ||
 || || DBUS_TYPE_STRING s (the search string - format of this string can be found below) ||
 || || DBUS_TYPE_ARRAY as (array of metadata types to retrieve but no wildcards may be used) ||
 || Output || ||
 || || DBUS_TYPE_DICT  a{sv}  (returns matched file uri as key and variant as struct of the single matched metadata type followed by all the requested metadata in the array input parameter) ||
 || Description || ||
 || || searches for files that matches a search criteria string and returns matched files with a corresponding struct containing the metadata type that matched the file and all the requested metadata values. This method is very useful for implementing virtual folders as it provides a single method for returning matched files complete with any needed metadata to realise that folder without having to stat() any files. The struct layout is as follows: first item is the name of the metadata type that matched during the search, the remaining items correspond to metadata values requested in the array parameter as in {{{GetMetaDataForFilesInFolder}}} ||

----


== Signals ==

 * {{{FileMetaDataChanged}}}
 || Output || ||
 || || DBUS_TYPE_STRING s (the file's uri) ||
 || || DBUS_TYPE_STRING s (the metadata type name that was changed) ||
 || || DBUS_TYPE_VARIANT v (the new value for the metadata type) ||
 || Description || ||
 || || emitted when any metadata has changed for the specified file. you can use Dbus arguement matching/filtering to watch for changes in specific files and/or specific metadata ||

----

= Searching Metadata =

To search metadata, we need a common search string format that allows both free text search (like google) and also structured metadata searches (searching specific metadata types).

The search string can consist of a mixture of these two search types. For free text, a search term is matched against all metadata for a file including its indexed file contents. Multiple search terms are seperaqted by whitespace. A search term is considered to be a whole word without spaces while multiple words in double quotes are searched as one whole term.

EG the search expression '''John Smith''' will individually match the two strings '''Jonh''' and '''Smith''' against all metadata during a search whilst the search term "John Smith" will only match that whole term against the metadata.

For structured searches the type of metadata should be specfied in sqaure brackets EG [Doc.Author]. A structured metadata search expression must contain one of the following operators after the metadata type in the search expression:

|| ''' Operator   ''' || '''   Description     ''' ||
|| = || Tests values for equality ||
|| > || Tests value is greater than another ||
|| < || Tests value is lessor than another ||
|| >= || Tests value is greater or equal than another ||
|| <= || Tests value is lessor or equal than another ||

A search term may contain the wildcard character * at the end of a term. 

The layout of a structured search expression is [metadata type to search] -> operator -> search term

Multiple search expression are always "ANDED" together and should be seperated by whitespace.

Examples of metadata search expressions which can contain a mixture of both search types:

 * [Doc.Author] = Smith
 * [Doc.Author] = "John Smith" [Doc.Subject] = Letter*
 * [File.Size] > 1024
 * [Doc.Author] = Smith [File.Size] >= 2048
 * John Smith [File.Format] = images*

