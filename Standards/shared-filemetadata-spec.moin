== Introduction ==

There are a number of metadata frameworks and indexers currently being developed such as Beagle and Kat that provide a rich source of metadata about files including such things as the author of a document or the artist of an mp3 file. The purpose of this specification is to define a common interface that each framework can implement to allow applications to tap into this wealth of information. Some examples of interested applications would include filemanagers that want to display and allow editing of this metadata as well as providing integrated search functionality and Virtual Folder capability (IE folders whose file contents are defined by metadata rather than physical location). This specification will define both an interface and a common set of "well-known" metadata.

== Metadata ==

Metadata is usually defined as data about data. In our case the metadata describes files as a series of properties and such metadata is readily available in office applications, document viewers and audio players. Metadata can typically be viewed or written by selecting "properties" form the file menu of one of these applications. 

Whilst there are some standards for naming metadata like [http://dublincore.org/documents/dcmi-type-vocabulary/ Dublin Core], most desktop applications use a propriety set of metadata names. This specification will attempt to define a common set of metadata using a mixture of [http://dublincore.org/documents/dcmi-type-vocabulary/ Dublin Core] and application specific metadata names. The purpose of these common matadata names is not just for the benefit of metadata frameworks and search enginges but also for standardising the display of metadata in all applications.

=== Audio Metadata ===

Audio metadata is based on the widespread [http://en.wikipedia.org/wiki/Id3 ID3] tags embedded in mp3, ogg and similiar files. These are already defined in that specification:

|| ''' Name    ''' || '''   Type     ''' || '''    Description''' ||
|| Title  || string ||  title of the track ||
|| Artist || string ||  artist of the track ||
|| Album  || string ||  name of the album ||
|| Year    || integer || year track was released ||
|| Comment       || string || user definable comments on the track ||
|| Genre    || string || type of music classification for the track as defined in ID3 spec ||




== The Interface ==

The Interface should be accessible via the Dbus session bus with the interface name '''org/freedesktop/file/metadata'''. Frameworks should implement this interface with a corresponding entry in their own dbus service file so applications can activate them via that interface. The interface must implement all methods and signals on object '''org.freedesktop.file.metadata''' as follows:

 === Methods ===

   * {{{GetMetaDataForFile}}} (returns a specific type of metadata for a given uri)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''input DBUS_TYPE_STRING s'' (the metadata type name) ||
    || ''output DBUS_TYPE_VARIANT v'' (the metadata value) ||

   * {{{SetMetaDataForFile}}} (sets a specific type of metadata for a given uri)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''input DBUS_TYPE_STRING s'' (the metadata type name) ||
    || ''input DBUS_TYPE_VARIANT v'' (the metadata value) ||

   * {{{GetAllMetaDataForFile}}} (returns all available metadata for a given uri)
    || ''input DBUS_TYPE_STRING'' s (the file's uri) ||
    || ''output DBUS_TYPE_DICT  a{sv}'' (the metadata as key,value pairs) ||

   * {{{GetMetaDataForFilesInFolder}}} (returns a specific type of metadata for all files in a given folder's uri)
    || ''input DBUS_TYPE_STRING s'' (the parent folder's uri) ||
    || ''input DBUS_TYPE_STRING s'' (the metadata type name) ||
    || ''output DBUS_TYPE_DICT  a{sv}'' (the metadata as filename, metadata key/value pairs) ||

   * {{{IsMetaDataForFileUpToDate}}} (returns whether a file's metadata is up to date)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''output DBUS_TYPE_BOOLEAN b'' (returns true if metadata is up to date on the given file uri. Usually this involves comparing the last modified date via a stat() call with the last indexed date generated by the framework for the file)||

   * {{{RefreshFileMetaData}}} (asks the framework to reindex and regenerate a file's metadata)
    || ''input DBUS_TYPE_STRING s'' (the file's uri) ||

   * {{{SearchFileMetaData}}} (searches for files that matches a search criteria string)
    || ''input DBUS_TYPE_STRING s'' (the search string - format of this string can be found below) ||
    || ''output DBUS_TYPE_ARRAY as'' (array of file uris that matched the search string criteria) ||



 === Signals ===

   * {{{FileMetaDataChanged'}}} (emitted when any metadata has changed)
    || ''output DBUS_TYPE_STRING s'' (the file's uri) ||
    || ''output DBUS_TYPE_STRING s'' (the metadata type name that was changed) ||
    || ''output DBUS_TYPE_VARIANT v'' (the new value for the metadata type) ||


== Searching Metadata ==

