# Accessibility

Accessibility is important for a lot of users, without it they just can not use their computer.

## Principles

A few important principles are to be kept in mind

* We want to make existing software accessible, and avoid dedicated software
* We need synchronization: accessibility is another way for input and output
* It should be easily available, ready to be enabled.

***

## Input

### Only a keyboard

Needs keyboard shortcuts, MouseKeys.

### Only a joystick

Being able to use it as a mouse

### Only a mouse or button

Using a virtual keyboard.

### Half-keyboard

For people with one hand, using a toggle to "mirror" the keyboard layout. Some implementations use xkb: 
http://blog.xkcd.com/2007/08/14/mirrorboard-a-one-handed-keyboard-layout-for-the-lazy/ , others use extensions: http://kieranbingham.co.uk/implementing-xhk/ , https://github.com/kbingham/xhk

### AccessX

Done in Xorg, TBD in Wayland

* StickyKeys
* MouseKeys
* SlowKeys
* RepeatKeys
* ToggleKeys
* BounceKeys

### Key injection

* keycode injection
 * Available in Xorg through XTest
* keysym injection
 * Not available in Xorg, have to backtranslate.

### PC braille keyboard

* Available in Xorg as the brai xkb layout
* ibus module available: http://ibus-sharada-braille.blogspot.fr/

***

## Output

### Rendering tinkering

* Tweak DPI to make toolkits use bigger icons & fonts etc.
* Xrandr panning support
 * provides basic zoom
* Gamma tuning & color inversion
 * To tune colors
* Xrandr screen mirror
* TODO: gtk3 "perfect" magnification
 * widget is requested to render in a bigger pixmap

### AT-SPI2

This is over DBus, toolkit widgets provide their content to screen readers such as Orca.

* GTK2/GTK3: good support
* QT4/5: only preliminary support

Accerciser to test the availability of the content
